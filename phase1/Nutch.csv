Project Name,Package Name,Class Name,Class Type,Class Visibilty,Is Abstract,Is Static,Is Final,Is Interface,Extends,Implements,Children,Fields,Methods,Overrides,Static Methods,final Methods , Abstract Methods
JHotDraw,net.nutch.analysis,CharStream,2,0,0,0,0,true,0 ,0 ,0 ,,readChar{ Params :  Returns : char} getColumn{ Params :  Returns : int} getLine{ Params :  Returns : int} getEndColumn{ Params :  Returns : int} getEndLine{ Params :  Returns : int} getBeginColumn{ Params :  Returns : int} getBeginLine{ Params :  Returns : int} backup{ Params : int Returns : void} BeginToken{ Params :  Returns : char} GetImage{ Params :  Returns : String} GetSuffix{ Params : int Returns : char[]} Done{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.analysis,CommonGrams,1,1,0,0,0,false,0 ,0 ,Filter ArrayTokens ,LOG: Logger SEPARATOR: char COMMON_TERMS: HashMap ,next{ Params :  Returns : Token} isCommon{ Params : Token Returns : boolean} popNext{ Params :  Returns : Token} peekNext{ Params : ListIterator Returns : Token} gramToken{ Params : Token,Token Returns : Token} init{ Params :  Returns : void} getFilter{ Params : TokenStream,String Returns : TokenFilter} next{ Params :  Returns : Token} optimizePhrase{ Params : Phrase,String Returns : String[]} arity{ Params : String Returns : int} main{ Params : String[] Returns : void} ,,init getFilter optimizePhrase arity main ,,
JHotDraw,net.nutch.analysis,Filter,3,2,0,1,0,false,0 ,0 ,Filter ArrayTokens ,common: HashSet previous: Token gramQueue: LinkedList nextQueue: LinkedList buffer: StringBuffer ,next{ Params :  Returns : Token} isCommon{ Params : Token Returns : boolean} popNext{ Params :  Returns : Token} peekNext{ Params : ListIterator Returns : Token} gramToken{ Params : Token,Token Returns : Token} init{ Params :  Returns : void} getFilter{ Params : TokenStream,String Returns : TokenFilter} next{ Params :  Returns : Token} optimizePhrase{ Params : Phrase,String Returns : String[]} arity{ Params : String Returns : int} main{ Params : String[] Returns : void} ,,init getFilter optimizePhrase arity main ,,
JHotDraw,net.nutch.analysis,ArrayTokens,3,2,0,1,0,false,0 ,0 ,Filter ArrayTokens ,terms: Term index: int ,next{ Params :  Returns : Token} isCommon{ Params : Token Returns : boolean} popNext{ Params :  Returns : Token} peekNext{ Params : ListIterator Returns : Token} gramToken{ Params : Token,Token Returns : Token} init{ Params :  Returns : void} getFilter{ Params : TokenStream,String Returns : TokenFilter} next{ Params :  Returns : Token} optimizePhrase{ Params : Phrase,String Returns : String[]} arity{ Params : String Returns : int} main{ Params : String[] Returns : void} ,,init getFilter optimizePhrase arity main ,,
JHotDraw,net.nutch.analysis,FastCharStream,1,0,0,0,1,false,0 ,CharStream ,0 ,buffer: char bufferLength: int bufferPosition: int tokenStart: int bufferStart: int input: Reader ,readChar{ Params :  Returns : char} refill{ Params :  Returns : void} BeginToken{ Params :  Returns : char} backup{ Params : int Returns : void} GetImage{ Params :  Returns : String} GetSuffix{ Params : int Returns : char[]} Done{ Params :  Returns : void} getColumn{ Params :  Returns : int} getLine{ Params :  Returns : int} getEndColumn{ Params :  Returns : int} getEndLine{ Params :  Returns : int} getBeginColumn{ Params :  Returns : int} getBeginLine{ Params :  Returns : int} ,,,readChar refill BeginToken backup GetImage GetSuffix Done getColumn getLine getEndColumn getEndLine getBeginColumn getBeginLine ,
JHotDraw,net.nutch.analysis,NutchAnalysisConstants,2,1,0,0,0,true,0 ,CharStream ,0 ,EOF: int WORD: int ACRONYM: int SIGRAM: int PLUS: int MINUS: int QUOTE: int COLON: int SLASH: int DOT: int ATSIGN: int APOSTROPHE: int WHITE: int WORD_PUNCT: int LETTER: int CJK: int DIGIT: int DEFAULT: int tokenImage: String ,,,,,
JHotDraw,net.nutch.analysis,NutchAnalysisTokenManager,1,1,0,0,0,false,0 ,NutchAnalysisConstants ,0 ,debugStream: java.io.PrintStream jjbitVec0: long jjbitVec2: long jjbitVec3: long jjbitVec4: long jjbitVec5: long jjbitVec6: long jjbitVec7: long jjnextStates: int jjstrLiteralImages: String lexStateNames: String input_stream: CharStream jjrounds: int jjstateSet: int image: StringBuffer jjimageLen: int lengthOfMatch: int curChar: char curLexState: int defaultLexState: int jjnewStateCnt: int jjround: int jjmatchedPos: int jjmatchedKind: int ,setDebugStream{ Params : java.io.PrintStream Returns : void} jjStopStringLiteralDfa_0{ Params : int,long Returns : int} jjStartNfa_0{ Params : int,long Returns : int} jjStopAtPos{ Params : int,int Returns : int} jjStartNfaWithStates_0{ Params : int,int,int Returns : int} jjMoveStringLiteralDfa0_0{ Params :  Returns : int} jjCheckNAdd{ Params : int Returns : void} jjAddStates{ Params : int,int Returns : void} jjCheckNAddTwoStates{ Params : int,int Returns : void} jjCheckNAddStates{ Params : int,int Returns : void} jjCheckNAddStates{ Params : int Returns : void} jjMoveNfa_0{ Params : int,int Returns : int} ReInit{ Params : CharStream Returns : void} ReInitRounds{ Params :  Returns : void} ReInit{ Params : CharStream,int Returns : void} SwitchTo{ Params : int Returns : void} jjFillToken{ Params :  Returns : Token} getNextToken{ Params :  Returns : Token} TokenLexicalActions{ Params : Token Returns : void} ,,,jjStopStringLiteralDfa_0 jjStartNfa_0 jjStopAtPos jjStartNfaWithStates_0 jjMoveStringLiteralDfa0_0 jjCheckNAdd jjAddStates jjCheckNAddTwoStates jjCheckNAddStates jjCheckNAddStates jjMoveNfa_0 ReInitRounds jjFillToken getNextToken TokenLexicalActions ,
JHotDraw,net.nutch.analysis,NutchDocumentAnalyzer,1,1,0,0,0,false,Analyzer ,0 ,ContentAnalyzer AnchorFilter AnchorAnalyzer ,CONTENT_ANALYZER: Analyzer INTER_ANCHOR_GAP: int ANCHOR_ANALYZER: Analyzer ,tokenStream{ Params : String,Reader Returns : TokenStream} next{ Params :  Returns : Token} tokenStream{ Params : String,Reader Returns : TokenStream} tokenStream{ Params : String,Reader Returns : TokenStream} ,,,next tokenStream ,
JHotDraw,net.nutch.analysis,ContentAnalyzer,3,2,0,1,0,false,Analyzer ,0 ,ContentAnalyzer AnchorFilter AnchorAnalyzer ,,tokenStream{ Params : String,Reader Returns : TokenStream} next{ Params :  Returns : Token} tokenStream{ Params : String,Reader Returns : TokenStream} tokenStream{ Params : String,Reader Returns : TokenStream} ,,,next tokenStream ,
JHotDraw,net.nutch.analysis,AnchorFilter,3,2,0,1,0,false,Analyzer ,0 ,ContentAnalyzer AnchorFilter AnchorAnalyzer ,first: boolean ,tokenStream{ Params : String,Reader Returns : TokenStream} next{ Params :  Returns : Token} tokenStream{ Params : String,Reader Returns : TokenStream} tokenStream{ Params : String,Reader Returns : TokenStream} ,,,next tokenStream ,
JHotDraw,net.nutch.analysis,AnchorAnalyzer,3,2,0,1,0,false,Analyzer ,0 ,ContentAnalyzer AnchorFilter AnchorAnalyzer ,,tokenStream{ Params : String,Reader Returns : TokenStream} next{ Params :  Returns : Token} tokenStream{ Params : String,Reader Returns : TokenStream} tokenStream{ Params : String,Reader Returns : TokenStream} ,,,next tokenStream ,
JHotDraw,net.nutch.analysis,NutchDocumentTokenizer,1,1,0,0,1,false,Tokenizer ,NutchAnalysisConstants ,0 ,tokenManager: NutchAnalysisTokenManager ,next{ Params :  Returns : Token} main{ Params : String[] Returns : void} ,,main ,next ,
JHotDraw,net.nutch.analysis,ParseException,1,0,0,0,0,false,java.io.IOException ,0 ,0 ,specialConstructor: boolean currentToken: Token expectedTokenSequences: int tokenImage: String eol: String ,getMessage{ Params :  Returns : String} add_escapes{ Params : String Returns : String} ,,,,
JHotDraw,net.nutch.analysis,Token,1,0,0,0,0,false,0 ,0 ,0 ,kind: int beginLine: int image: String next: Token specialToken: Token ,toString{ Params :  Returns : String} newToken{ Params : int Returns : Token} ,,newToken ,toString ,
JHotDraw,net.nutch.analysis,TokenManager,2,0,0,0,0,true,0 ,0 ,0 ,,getNextToken{ Params :  Returns : Token} ,,,,
JHotDraw,net.nutch.analysis,TokenMgrError,1,0,0,0,0,false,Error ,0 ,0 ,LEXICAL_ERROR: int STATIC_LEXER_ERROR: int INVALID_LEXICAL_STATE: int LOOP_DETECTED: int errorCode: int ,addEscapes{ Params : String Returns : String} LexicalError{ Params : boolean,int,int,int,String,char Returns : String} getMessage{ Params :  Returns : String} ,,addEscapes LexicalError ,,
JHotDraw,net.nutch.db,BucketSet,1,0,0,0,0,false,0 ,0 ,0 ,BUCKET_FILENAME: String CONFIG_FILENAME: String INTEGER_SIZE: int bucketsDir: File keyStartByte: int insertsAllowed: boolean inStreams: DataInputStream outStreams: DataOutputStream numBuckets: int closed: boolean ,loadBuckets{ Params : File Returns : BucketSet} createBuckets{ Params : File,int,int Returns : BucketSet} close{ Params :  Returns : void} storeItem{ Params : byte[] Returns : void} getNextItem{ Params :  Returns : byte[]} computeBucket{ Params : byte[] Returns : int} loadConfig{ Params :  Returns : void} storeConfig{ Params :  Returns : void} ,,loadBuckets createBuckets ,,
JHotDraw,net.nutch.db,DBKeyDivision,1,1,0,0,0,false,0 ,0 ,0 ,URL_KEYSPACE_DIVIDERS: String MD5_KEYSPACE_DIVIDERS: MD5Hash MAX_SECTIONS: int ,findURLSection{ Params : String,int Returns : int} findMD5Section{ Params : MD5Hash,int Returns : int} binarySearch{ Params : Comparable,Comparable[],int Returns : int} ,,findURLSection findMD5Section binarySearch ,,
JHotDraw,net.nutch.db,DBSectionReader,1,1,0,0,0,false,0 ,0 ,TableEnumerator IndexEnumerator MapEnumerator ,sectionFile: File comparator: WritableComparator reader: MapFile.Reader ,getPage{ Params : UTF8,Page Returns : Page} getPages{ Params : MD5Hash Returns : Vector} pageExists{ Params : MD5Hash Returns : boolean} pages{ Params :  Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} pagesByMD5{ Params :  Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} getLinks{ Params : UTF8 Returns : Vector} getLinks{ Params : MD5Hash Returns : Vector} links{ Params :  Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} close{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.db,TableEnumerator,3,0,0,0,0,false,0 ,0 ,TableEnumerator IndexEnumerator MapEnumerator ,reader: MapFile.Reader nextItem: Page ,getPage{ Params : UTF8,Page Returns : Page} getPages{ Params : MD5Hash Returns : Vector} pageExists{ Params : MD5Hash Returns : boolean} pages{ Params :  Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} pagesByMD5{ Params :  Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} getLinks{ Params : UTF8 Returns : Vector} getLinks{ Params : MD5Hash Returns : Vector} links{ Params :  Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} close{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.db,IndexEnumerator,3,0,0,0,0,false,0 ,0 ,TableEnumerator IndexEnumerator MapEnumerator ,reader: SetFile.Reader nextItem: Page ,getPage{ Params : UTF8,Page Returns : Page} getPages{ Params : MD5Hash Returns : Vector} pageExists{ Params : MD5Hash Returns : boolean} pages{ Params :  Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} pagesByMD5{ Params :  Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} getLinks{ Params : UTF8 Returns : Vector} getLinks{ Params : MD5Hash Returns : Vector} links{ Params :  Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} close{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.db,MapEnumerator,3,0,0,0,0,false,0 ,0 ,TableEnumerator IndexEnumerator MapEnumerator ,reader: MapFile.Reader nextItem: Link ,getPage{ Params : UTF8,Page Returns : Page} getPages{ Params : MD5Hash Returns : Vector} pageExists{ Params : MD5Hash Returns : boolean} pages{ Params :  Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} pagesByMD5{ Params :  Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} getLinks{ Params : UTF8 Returns : Vector} getLinks{ Params : MD5Hash Returns : Vector} links{ Params :  Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} close{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.db,DistributedWebDBReader,1,1,0,0,0,false,0 ,IWebDBReader ,EnumCall PageEnumCall PageByMD5EnumCall LinkEnumCall MetaEnumerator ,PAGE_RECORDS: Page LINK_RECORDS: Link PAGES_BY_URL: String PAGES_BY_MD5: String LINKS_BY_URL: String LINKS_BY_MD5: String STATS_FILE: String META_FILE: String PAGE_ENUMS: EnumCall PAGE_MD5_ENUMS: EnumCall LINK_ENUMS: EnumCall STATIC_SR_ARRAY: DBSectionReader dbDir: NutchFile globalWriteLock: NutchFile pagesByURL: DBSectionReader totalPages: long numMachines: int ,close{ Params :  Returns : void} numMachines{ Params :  Returns : int} numPages{ Params :  Returns : long} numLinks{ Params :  Returns : long} getPage{ Params : String Returns : Page} getPages{ Params : MD5Hash Returns : Page[]} pageExists{ Params : MD5Hash Returns : boolean} pages{ Params :  Returns : Enumeration} pagesByMD5{ Params :  Returns : Enumeration} getLinks{ Params : UTF8 Returns : Link[]} getLinks{ Params : MD5Hash Returns : Link[]} links{ Params :  Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} main{ Params : String[] Returns : void} compare{ Params : Object,Object Returns : int} ,,main ,,getEnumeration 
JHotDraw,net.nutch.db,EnumCall,3,0,1,1,0,false,0 ,IWebDBReader ,EnumCall PageEnumCall PageByMD5EnumCall LinkEnumCall MetaEnumerator ,,close{ Params :  Returns : void} numMachines{ Params :  Returns : int} numPages{ Params :  Returns : long} numLinks{ Params :  Returns : long} getPage{ Params : String Returns : Page} getPages{ Params : MD5Hash Returns : Page[]} pageExists{ Params : MD5Hash Returns : boolean} pages{ Params :  Returns : Enumeration} pagesByMD5{ Params :  Returns : Enumeration} getLinks{ Params : UTF8 Returns : Link[]} getLinks{ Params : MD5Hash Returns : Link[]} links{ Params :  Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} main{ Params : String[] Returns : void} compare{ Params : Object,Object Returns : int} ,,main ,,getEnumeration 
JHotDraw,net.nutch.db,PageEnumCall,3,0,0,1,0,false,0 ,IWebDBReader ,EnumCall PageEnumCall PageByMD5EnumCall LinkEnumCall MetaEnumerator ,,close{ Params :  Returns : void} numMachines{ Params :  Returns : int} numPages{ Params :  Returns : long} numLinks{ Params :  Returns : long} getPage{ Params : String Returns : Page} getPages{ Params : MD5Hash Returns : Page[]} pageExists{ Params : MD5Hash Returns : boolean} pages{ Params :  Returns : Enumeration} pagesByMD5{ Params :  Returns : Enumeration} getLinks{ Params : UTF8 Returns : Link[]} getLinks{ Params : MD5Hash Returns : Link[]} links{ Params :  Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} main{ Params : String[] Returns : void} compare{ Params : Object,Object Returns : int} ,,main ,,getEnumeration 
JHotDraw,net.nutch.db,PageByMD5EnumCall,3,0,0,1,0,false,0 ,IWebDBReader ,EnumCall PageEnumCall PageByMD5EnumCall LinkEnumCall MetaEnumerator ,,close{ Params :  Returns : void} numMachines{ Params :  Returns : int} numPages{ Params :  Returns : long} numLinks{ Params :  Returns : long} getPage{ Params : String Returns : Page} getPages{ Params : MD5Hash Returns : Page[]} pageExists{ Params : MD5Hash Returns : boolean} pages{ Params :  Returns : Enumeration} pagesByMD5{ Params :  Returns : Enumeration} getLinks{ Params : UTF8 Returns : Link[]} getLinks{ Params : MD5Hash Returns : Link[]} links{ Params :  Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} main{ Params : String[] Returns : void} compare{ Params : Object,Object Returns : int} ,,main ,,getEnumeration 
JHotDraw,net.nutch.db,LinkEnumCall,3,0,0,1,0,false,0 ,IWebDBReader ,EnumCall PageEnumCall PageByMD5EnumCall LinkEnumCall MetaEnumerator ,,close{ Params :  Returns : void} numMachines{ Params :  Returns : int} numPages{ Params :  Returns : long} numLinks{ Params :  Returns : long} getPage{ Params : String Returns : Page} getPages{ Params : MD5Hash Returns : Page[]} pageExists{ Params : MD5Hash Returns : boolean} pages{ Params :  Returns : Enumeration} pagesByMD5{ Params :  Returns : Enumeration} getLinks{ Params : UTF8 Returns : Link[]} getLinks{ Params : MD5Hash Returns : Link[]} links{ Params :  Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} main{ Params : String[] Returns : void} compare{ Params : Object,Object Returns : int} ,,main ,,getEnumeration 
JHotDraw,net.nutch.db,MetaEnumerator,3,0,0,0,0,false,0 ,IWebDBReader ,EnumCall PageEnumCall PageByMD5EnumCall LinkEnumCall MetaEnumerator ,enumerations: Enumeration curEnum: int ,close{ Params :  Returns : void} numMachines{ Params :  Returns : int} numPages{ Params :  Returns : long} numLinks{ Params :  Returns : long} getPage{ Params : String Returns : Page} getPages{ Params : MD5Hash Returns : Page[]} pageExists{ Params : MD5Hash Returns : boolean} pages{ Params :  Returns : Enumeration} pagesByMD5{ Params :  Returns : Enumeration} getLinks{ Params : UTF8 Returns : Link[]} getLinks{ Params : MD5Hash Returns : Link[]} links{ Params :  Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} getEnumeration{ Params : DBSectionReader Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} main{ Params : String[] Returns : void} compare{ Params : Object,Object Returns : int} ,,main ,,getEnumeration 
JHotDraw,net.nutch.db,DistributedWebDBWriter,1,1,0,0,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,LOG: Logger CUR_VERSION: byte OPEN_COUNTER_VERSION: byte CLOSE_COUNTER_VERSION: byte MACHINE_INFO_VERSION: byte READY_TO_USE: int IS_COMPLETE: int WRITE_LOCK_INFO: int LONG_TIMEOUT: long ADD_PAGE: byte ADD_PAGE_WITH_SCORE: byte ADD_PAGE_IFN_PRESENT: byte DEL_PAGE: byte ADD_LINK: int DEL_LINK: int DEL_SINGLE_LINK: int PAGES_BY_URL: String PAGES_BY_MD5: String LINKS_BY_URL: String LINKS_BY_MD5: String STATS_FILE: String META_SHAREGROUP: String METAINFO: String NO_OUTLINKS: int HAS_OUTLINKS: int LINK_INVALID: int piwriter: PageInstructionWriter liwriter: LinkInstructionWriter inBuf: DataInputBuffer outBuf: DataOutputBuffer nutchfs: NutchFileSystem dbName: String dbDir: NutchFile localWriteLock: NutchFile pagesByURLWriter: EditSectionGroupWriter pagesByURL: MapFile.Reader pagesByURLEdits: long machineNum: int ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,int,Writable Returns : void} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createDB{ Params : NutchFileSystem,String,int Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createDB main ,,mergeEdits 
JHotDraw,net.nutch.db,PageInstruction,3,1,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,opcode: byte hasLink: boolean page: Page link: Link ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,int,Writable Returns : void} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createDB{ Params : NutchFileSystem,String,int Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createDB main ,,mergeEdits 
JHotDraw,net.nutch.db,PageComparator,3,1,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,PAGE_COMPARATOR: Page.Comparator ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,int,Writable Returns : void} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createDB{ Params : NutchFileSystem,String,int Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createDB main ,,mergeEdits 
JHotDraw,net.nutch.db,UrlComparator,3,1,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,PAGE_COMPARATOR: Page.UrlComparator ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,int,Writable Returns : void} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createDB{ Params : NutchFileSystem,String,int Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createDB main ,,mergeEdits 
JHotDraw,net.nutch.db,PageInstructionWriter,3,1,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,pi: PageInstruction ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,int,Writable Returns : void} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createDB{ Params : NutchFileSystem,String,int Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createDB main ,,mergeEdits 
JHotDraw,net.nutch.db,DeduplicatingPageSequenceReader,3,2,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,edits: SequenceFile.Reader current: PageInstruction currentUrl: UTF8 haveCurrent: boolean ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,int,Writable Returns : void} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createDB{ Params : NutchFileSystem,String,int Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createDB main ,,mergeEdits 
JHotDraw,net.nutch.db,LinkInstruction,3,1,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,link: Link instruction: int ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,int,Writable Returns : void} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createDB{ Params : NutchFileSystem,String,int Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createDB main ,,mergeEdits 
JHotDraw,net.nutch.db,MD5Comparator,3,1,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,MD5_COMPARATOR: Link.MD5Comparator ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,int,Writable Returns : void} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createDB{ Params : NutchFileSystem,String,int Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createDB main ,,mergeEdits 
JHotDraw,net.nutch.db,UrlComparator,3,1,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,URL_COMPARATOR: Link.UrlComparator ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,int,Writable Returns : void} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createDB{ Params : NutchFileSystem,String,int Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createDB main ,,mergeEdits 
JHotDraw,net.nutch.db,LinkInstructionWriter,3,1,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,li: LinkInstruction ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,int,Writable Returns : void} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createDB{ Params : NutchFileSystem,String,int Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createDB main ,,mergeEdits 
JHotDraw,net.nutch.db,DeduplicatingLinkSequenceReader,3,0,0,0,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,currentKey: Link current: LinkInstruction edits: SequenceFile.Reader haveCurrent: boolean ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,int,Writable Returns : void} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createDB{ Params : NutchFileSystem,String,int Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createDB main ,,mergeEdits 
JHotDraw,net.nutch.db,CloseProcessor,3,2,1,0,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,basename: String curDBPart: String oldDb: MapFile.Reader editWriter: EditSectionGroupWriter sorter: SequenceFile.Sorter comparator: WritableComparator keyClass: Class itemsWritten: long ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,int,Writable Returns : void} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createDB{ Params : NutchFileSystem,String,int Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createDB main ,,mergeEdits 
JHotDraw,net.nutch.db,PagesByURLProcessor,3,2,0,0,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,futureEdits: EditSectionGroupWriter ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,int,Writable Returns : void} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createDB{ Params : NutchFileSystem,String,int Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createDB main ,,mergeEdits 
JHotDraw,net.nutch.db,PagesByMD5Processor,3,2,0,0,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,int,Writable Returns : void} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createDB{ Params : NutchFileSystem,String,int Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createDB main ,,mergeEdits 
JHotDraw,net.nutch.db,LinksByMD5Processor,3,2,0,0,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,futureEdits: EditSectionGroupWriter ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,int,Writable Returns : void} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createDB{ Params : NutchFileSystem,String,int Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createDB main ,,mergeEdits 
JHotDraw,net.nutch.db,TargetTester,3,2,0,0,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,pagedb: MapFile.Reader hasPage: boolean pageURL: UTF8 page: Page ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,int,Writable Returns : void} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createDB{ Params : NutchFileSystem,String,int Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createDB main ,,mergeEdits 
JHotDraw,net.nutch.db,LinksByURLProcessor,3,2,0,0,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,pageDb: MapFile.Reader futureEdits: EditSectionGroupWriter ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,int,Writable Returns : void} appendInstructionInfo{ Params : EditSectionGroupWriter,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : EditSectionGroupWriter,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : NutchFile,NutchFile Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createDB{ Params : NutchFileSystem,String,int Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createDB main ,,mergeEdits 
JHotDraw,net.nutch.db,EditSectionGroupReader,1,1,0,0,0,false,0 ,0 ,0 ,LOG: Logger MERGED_EDITS: String SLEEP_INTERVAL: int WORRY_INTERVALS: int nutchfs: NutchFileSystem dbName: String readerNum: int sectionComplete: boolean ,sectionComplete{ Params :  Returns : void} numEdits{ Params :  Returns : int} mergeSectionComponents{ Params :  Returns : File} delete{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.db,EditSectionGroupWriter,1,1,0,0,0,false,0 ,0 ,KeyExtractor PageURLExtractor PageMD5Extractor LinkURLExtractor LinkMD5Extractor ,CUR_VERSION: int GROUP_METAINFO: String URL_KEYSPACE: int MD5_KEYSPACE: int machineNum: int extractor: KeyExtractor label: String sectionKeys: WritableComparable sectionWriters: EditSectionWriter ,extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} createEditGroup{ Params : NutchFileSystem,String,String,int,int Returns : void} append{ Params : WritableComparable,Writable Returns : void} close{ Params :  Returns : void} ,,createEditGroup ,,extractInnerKey 
JHotDraw,net.nutch.db,KeyExtractor,3,1,1,1,0,false,0 ,0 ,KeyExtractor PageURLExtractor PageMD5Extractor LinkURLExtractor LinkMD5Extractor ,,extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} createEditGroup{ Params : NutchFileSystem,String,String,int,int Returns : void} append{ Params : WritableComparable,Writable Returns : void} close{ Params :  Returns : void} ,,createEditGroup ,,extractInnerKey 
JHotDraw,net.nutch.db,PageURLExtractor,3,1,0,1,0,false,0 ,0 ,KeyExtractor PageURLExtractor PageMD5Extractor LinkURLExtractor LinkMD5Extractor ,,extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} createEditGroup{ Params : NutchFileSystem,String,String,int,int Returns : void} append{ Params : WritableComparable,Writable Returns : void} close{ Params :  Returns : void} ,,createEditGroup ,,extractInnerKey 
JHotDraw,net.nutch.db,PageMD5Extractor,3,1,0,1,0,false,0 ,0 ,KeyExtractor PageURLExtractor PageMD5Extractor LinkURLExtractor LinkMD5Extractor ,,extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} createEditGroup{ Params : NutchFileSystem,String,String,int,int Returns : void} append{ Params : WritableComparable,Writable Returns : void} close{ Params :  Returns : void} ,,createEditGroup ,,extractInnerKey 
JHotDraw,net.nutch.db,LinkURLExtractor,3,1,0,1,0,false,0 ,0 ,KeyExtractor PageURLExtractor PageMD5Extractor LinkURLExtractor LinkMD5Extractor ,,extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} createEditGroup{ Params : NutchFileSystem,String,String,int,int Returns : void} append{ Params : WritableComparable,Writable Returns : void} close{ Params :  Returns : void} ,,createEditGroup ,,extractInnerKey 
JHotDraw,net.nutch.db,LinkMD5Extractor,3,1,0,1,0,false,0 ,0 ,KeyExtractor PageURLExtractor PageMD5Extractor LinkURLExtractor LinkMD5Extractor ,,extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} extractInnerKey{ Params : WritableComparable Returns : WritableComparable} createEditGroup{ Params : NutchFileSystem,String,String,int,int Returns : void} append{ Params : WritableComparable,Writable Returns : void} close{ Params :  Returns : void} ,,createEditGroup ,,extractInnerKey 
JHotDraw,net.nutch.db,EditSectionWriter,1,1,0,0,0,false,0 ,0 ,0 ,COMPLETION_VERSION: int WRITE_METAINFO_PREFIX: String EDITS_PREFIX: String numSections: int editsDir: NutchFile editsListFile: File numEdits: int closed: boolean seqWriter: SequenceFile.Writer ,append{ Params : WritableComparable,Writable Returns : void} close{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.db,IWebDBReader,2,1,0,0,0,true,0 ,0 ,0 ,,close{ Params :  Returns : void} getPage{ Params : String Returns : Page} getPages{ Params : MD5Hash Returns : Page[]} pageExists{ Params : MD5Hash Returns : boolean} pages{ Params :  Returns : Enumeration} pagesByMD5{ Params :  Returns : Enumeration} numPages{ Params :  Returns : long} getLinks{ Params : UTF8 Returns : Link[]} getLinks{ Params : MD5Hash Returns : Link[]} links{ Params :  Returns : Enumeration} numLinks{ Params :  Returns : long} ,,,,
JHotDraw,net.nutch.db,IWebDBWriter,2,1,0,0,0,true,0 ,0 ,0 ,,close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} ,,,,
JHotDraw,net.nutch.db,Link,1,1,0,0,0,false,0 ,WritableComparable ,UrlComparator MD5Comparator ,MAX_ANCHOR_LENGTH: int VERSION_1: byte VERSION_2: byte CUR_VERSION: byte fromID: MD5Hash url: UTF8 domainID: long anchor: UTF8 targetHasOutlink: boolean ,readFields{ Params : DataInput Returns : void} set{ Params : Link Returns : void} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Link} getFromID{ Params :  Returns : MD5Hash} getURL{ Params :  Returns : UTF8} getDomainID{ Params :  Returns : long} getAnchorText{ Params :  Returns : UTF8} targetHasOutlink{ Params :  Returns : boolean} setTargetHasOutlink{ Params : boolean Returns : void} toString{ Params :  Returns : String} toTabbedString{ Params :  Returns : String} compareTo{ Params : Object Returns : int} urlCompare{ Params : Object Returns : int} md5Compare{ Params : Object Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} ,,read ,,
JHotDraw,net.nutch.db,UrlComparator,3,1,0,1,0,false,0 ,WritableComparable ,UrlComparator MD5Comparator ,,readFields{ Params : DataInput Returns : void} set{ Params : Link Returns : void} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Link} getFromID{ Params :  Returns : MD5Hash} getURL{ Params :  Returns : UTF8} getDomainID{ Params :  Returns : long} getAnchorText{ Params :  Returns : UTF8} targetHasOutlink{ Params :  Returns : boolean} setTargetHasOutlink{ Params : boolean Returns : void} toString{ Params :  Returns : String} toTabbedString{ Params :  Returns : String} compareTo{ Params : Object Returns : int} urlCompare{ Params : Object Returns : int} md5Compare{ Params : Object Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} ,,read ,,
JHotDraw,net.nutch.db,MD5Comparator,3,1,0,1,0,false,0 ,WritableComparable ,UrlComparator MD5Comparator ,,readFields{ Params : DataInput Returns : void} set{ Params : Link Returns : void} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Link} getFromID{ Params :  Returns : MD5Hash} getURL{ Params :  Returns : UTF8} getDomainID{ Params :  Returns : long} getAnchorText{ Params :  Returns : UTF8} targetHasOutlink{ Params :  Returns : boolean} setTargetHasOutlink{ Params : boolean Returns : void} toString{ Params :  Returns : String} toTabbedString{ Params :  Returns : String} compareTo{ Params : Object Returns : int} urlCompare{ Params : Object Returns : int} md5Compare{ Params : Object Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} ,,read ,,
JHotDraw,net.nutch.db,Page,1,1,0,0,0,false,0 ,WritableComparable Cloneable ,Comparator UrlComparator ,CUR_VERSION: byte DEFAULT_INTERVAL: byte url: UTF8 md5: MD5Hash nextFetch: long retries: byte fetchInterval: byte numOutlinks: int score: float nextScore: float ,readFields{ Params : DataInput Returns : void} set{ Params : Page Returns : void} write{ Params : DataOutput Returns : void} compareTo{ Params : Object Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} read{ Params : DataInput Returns : Page} getURL{ Params :  Returns : UTF8} setURL{ Params : String Returns : void} getMD5{ Params :  Returns : MD5Hash} setMD5{ Params : MD5Hash Returns : void} getNextFetchTime{ Params :  Returns : long} setNextFetchTime{ Params : long Returns : void} getRetriesSinceFetch{ Params :  Returns : byte} setRetriesSinceFetch{ Params : int Returns : void} getFetchInterval{ Params :  Returns : byte} setFetchInterval{ Params : byte Returns : void} getNumOutlinks{ Params :  Returns : int} setNumOutlinks{ Params : int Returns : void} getScore{ Params :  Returns : float} getNextScore{ Params :  Returns : float} setScore{ Params : float,float Returns : void} computeDomainID{ Params :  Returns : long} toString{ Params :  Returns : String} toTabbedString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} clone{ Params :  Returns : Object} ,,read ,,
JHotDraw,net.nutch.db,Comparator,3,1,0,1,0,false,0 ,WritableComparable Cloneable ,Comparator UrlComparator ,,readFields{ Params : DataInput Returns : void} set{ Params : Page Returns : void} write{ Params : DataOutput Returns : void} compareTo{ Params : Object Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} read{ Params : DataInput Returns : Page} getURL{ Params :  Returns : UTF8} setURL{ Params : String Returns : void} getMD5{ Params :  Returns : MD5Hash} setMD5{ Params : MD5Hash Returns : void} getNextFetchTime{ Params :  Returns : long} setNextFetchTime{ Params : long Returns : void} getRetriesSinceFetch{ Params :  Returns : byte} setRetriesSinceFetch{ Params : int Returns : void} getFetchInterval{ Params :  Returns : byte} setFetchInterval{ Params : byte Returns : void} getNumOutlinks{ Params :  Returns : int} setNumOutlinks{ Params : int Returns : void} getScore{ Params :  Returns : float} getNextScore{ Params :  Returns : float} setScore{ Params : float,float Returns : void} computeDomainID{ Params :  Returns : long} toString{ Params :  Returns : String} toTabbedString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} clone{ Params :  Returns : Object} ,,read ,,
JHotDraw,net.nutch.db,UrlComparator,3,1,0,1,0,false,0 ,WritableComparable Cloneable ,Comparator UrlComparator ,,readFields{ Params : DataInput Returns : void} set{ Params : Page Returns : void} write{ Params : DataOutput Returns : void} compareTo{ Params : Object Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} read{ Params : DataInput Returns : Page} getURL{ Params :  Returns : UTF8} setURL{ Params : String Returns : void} getMD5{ Params :  Returns : MD5Hash} setMD5{ Params : MD5Hash Returns : void} getNextFetchTime{ Params :  Returns : long} setNextFetchTime{ Params : long Returns : void} getRetriesSinceFetch{ Params :  Returns : byte} setRetriesSinceFetch{ Params : int Returns : void} getFetchInterval{ Params :  Returns : byte} setFetchInterval{ Params : byte Returns : void} getNumOutlinks{ Params :  Returns : int} setNumOutlinks{ Params : int Returns : void} getScore{ Params :  Returns : float} getNextScore{ Params :  Returns : float} setScore{ Params : float,float Returns : void} computeDomainID{ Params :  Returns : long} toString{ Params :  Returns : String} toTabbedString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} clone{ Params :  Returns : Object} ,,read ,,
JHotDraw,net.nutch.db,WebDBInjector,1,1,0,0,0,false,0 ,0 ,XMLCharFilter RDFProcessor ,DMOZ_PAGENAME: String DEFAULT_INTERVAL: byte NEW_INJECTED_PAGE_SCORE: float LOG: Logger dbWriter: IWebDBWriter startTime: long pages: long nextFetch: long ,read{ Params :  Returns : int} read{ Params : char[],int,int Returns : int} startElement{ Params : String,String,String,Attributes Returns : void} characters{ Params : char[],int,int Returns : void} endElement{ Params : String,String,String Returns : void} startDocument{ Params :  Returns : void} endDocument{ Params :  Returns : void} setDocumentLocator{ Params : Locator Returns : void} error{ Params : SAXParseException Returns : void} fatalError{ Params : SAXParseException Returns : void} warning{ Params : SAXParseException Returns : void} close{ Params :  Returns : void} printStatusBar{ Params : int,int Returns : void} printStatus{ Params :  Returns : void} injectURLFile{ Params : File Returns : void} injectDmozFile{ Params : File,int,boolean,boolean,int Returns : void} addPage{ Params : String Returns : boolean} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.db,XMLCharFilter,3,2,0,1,0,false,0 ,0 ,XMLCharFilter RDFProcessor ,lastBad: boolean ,read{ Params :  Returns : int} read{ Params : char[],int,int Returns : int} startElement{ Params : String,String,String,Attributes Returns : void} characters{ Params : char[],int,int Returns : void} endElement{ Params : String,String,String Returns : void} startDocument{ Params :  Returns : void} endDocument{ Params :  Returns : void} setDocumentLocator{ Params : Locator Returns : void} error{ Params : SAXParseException Returns : void} fatalError{ Params : SAXParseException Returns : void} warning{ Params : SAXParseException Returns : void} close{ Params :  Returns : void} printStatusBar{ Params : int,int Returns : void} printStatus{ Params :  Returns : void} injectURLFile{ Params : File Returns : void} injectDmozFile{ Params : File,int,boolean,boolean,int Returns : void} addPage{ Params : String Returns : boolean} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.db,RDFProcessor,3,0,0,0,0,false,0 ,0 ,XMLCharFilter RDFProcessor ,curURL: String titlePending: boolean title: StringBuffer reader: XMLReader subsetDenom: int hashSkew: int includeAdult: boolean srcDmozID: MD5Hash srcDmozDomainID: long location: Locator ,read{ Params :  Returns : int} read{ Params : char[],int,int Returns : int} startElement{ Params : String,String,String,Attributes Returns : void} characters{ Params : char[],int,int Returns : void} endElement{ Params : String,String,String Returns : void} startDocument{ Params :  Returns : void} endDocument{ Params :  Returns : void} setDocumentLocator{ Params : Locator Returns : void} error{ Params : SAXParseException Returns : void} fatalError{ Params : SAXParseException Returns : void} warning{ Params : SAXParseException Returns : void} close{ Params :  Returns : void} printStatusBar{ Params : int,int Returns : void} printStatus{ Params :  Returns : void} injectURLFile{ Params : File Returns : void} injectDmozFile{ Params : File,int,boolean,boolean,int Returns : void} addPage{ Params : String Returns : boolean} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.db,WebDBReader,1,1,0,0,0,false,0 ,IWebDBReader ,TableEnumerator IndexEnumerator MapEnumerator ,PAGE_RECORDS: Page LINK_RECORDS: Link PAGES_BY_URL: String PAGES_BY_MD5: String LINKS_BY_URL: String LINKS_BY_MD5: String STATS_FILE: String dbFile: File pagesByURL: MapFile.Reader totalPages: long mapReaders: Vector dbReadLockData: FileInputStream dbReadLock: FileLock ,close{ Params :  Returns : void} getPage{ Params : String Returns : Page} getPages{ Params : MD5Hash Returns : Page[]} pageExists{ Params : MD5Hash Returns : boolean} pages{ Params :  Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} pagesByMD5{ Params :  Returns : Enumeration} numPages{ Params :  Returns : long} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} getLinks{ Params : UTF8 Returns : Link[]} getLinks{ Params : MD5Hash Returns : Link[]} links{ Params :  Returns : Enumeration} numLinks{ Params :  Returns : long} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} main{ Params : String[] Returns : void} compare{ Params : Object,Object Returns : int} ,,main ,,
JHotDraw,net.nutch.db,TableEnumerator,3,0,0,0,0,false,0 ,IWebDBReader ,TableEnumerator IndexEnumerator MapEnumerator ,reader: MapFile.Reader nextItem: Page ,close{ Params :  Returns : void} getPage{ Params : String Returns : Page} getPages{ Params : MD5Hash Returns : Page[]} pageExists{ Params : MD5Hash Returns : boolean} pages{ Params :  Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} pagesByMD5{ Params :  Returns : Enumeration} numPages{ Params :  Returns : long} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} getLinks{ Params : UTF8 Returns : Link[]} getLinks{ Params : MD5Hash Returns : Link[]} links{ Params :  Returns : Enumeration} numLinks{ Params :  Returns : long} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} main{ Params : String[] Returns : void} compare{ Params : Object,Object Returns : int} ,,main ,,
JHotDraw,net.nutch.db,IndexEnumerator,3,0,0,0,0,false,0 ,IWebDBReader ,TableEnumerator IndexEnumerator MapEnumerator ,reader: SetFile.Reader nextItem: Page ,close{ Params :  Returns : void} getPage{ Params : String Returns : Page} getPages{ Params : MD5Hash Returns : Page[]} pageExists{ Params : MD5Hash Returns : boolean} pages{ Params :  Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} pagesByMD5{ Params :  Returns : Enumeration} numPages{ Params :  Returns : long} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} getLinks{ Params : UTF8 Returns : Link[]} getLinks{ Params : MD5Hash Returns : Link[]} links{ Params :  Returns : Enumeration} numLinks{ Params :  Returns : long} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} main{ Params : String[] Returns : void} compare{ Params : Object,Object Returns : int} ,,main ,,
JHotDraw,net.nutch.db,MapEnumerator,3,0,0,0,0,false,0 ,IWebDBReader ,TableEnumerator IndexEnumerator MapEnumerator ,reader: MapFile.Reader nextItem: Link ,close{ Params :  Returns : void} getPage{ Params : String Returns : Page} getPages{ Params : MD5Hash Returns : Page[]} pageExists{ Params : MD5Hash Returns : boolean} pages{ Params :  Returns : Enumeration} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} pagesByMD5{ Params :  Returns : Enumeration} numPages{ Params :  Returns : long} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} getLinks{ Params : UTF8 Returns : Link[]} getLinks{ Params : MD5Hash Returns : Link[]} links{ Params :  Returns : Enumeration} numLinks{ Params :  Returns : long} hasMoreElements{ Params :  Returns : boolean} nextElement{ Params :  Returns : Object} main{ Params : String[] Returns : void} compare{ Params : Object,Object Returns : int} ,,main ,,
JHotDraw,net.nutch.db,WebDBWriter,1,1,0,0,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,LOG: Logger CUR_VERSION: byte ADD_PAGE: byte ADD_PAGE_WITH_SCORE: byte ADD_PAGE_IFN_PRESENT: byte DEL_PAGE: byte ADD_LINK: int DEL_LINK: int DEL_SINGLE_LINK: int PAGES_BY_URL: String PAGES_BY_MD5: String LINKS_BY_URL: String LINKS_BY_MD5: String STATS_FILE: String NO_OUTLINKS: int HAS_OUTLINKS: int LINK_INVALID: int haveEdits: boolean dbFile: File pagesByURL: MapFile.Reader pagesByURLWriter: SequenceFile.Writer pagesByURLEdits: long piwriter: PageInstructionWriter liwriter: LinkInstructionWriter inBuf: DataInputBuffer outBuf: DataOutputBuffer dbReadLockData: FileOutputStream dbWriteLock: FileLock ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Page,int,Writable Returns : void} appendInstructionInfo{ Params : SequenceFile.Writer,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createWebDB{ Params : File Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createWebDB main ,,mergeEdits 
JHotDraw,net.nutch.db,PageInstruction,3,1,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,opcode: byte hasLink: boolean page: Page link: Link ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Page,int,Writable Returns : void} appendInstructionInfo{ Params : SequenceFile.Writer,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createWebDB{ Params : File Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createWebDB main ,,mergeEdits 
JHotDraw,net.nutch.db,PageComparator,3,1,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,PAGE_COMPARATOR: Page.Comparator ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Page,int,Writable Returns : void} appendInstructionInfo{ Params : SequenceFile.Writer,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createWebDB{ Params : File Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createWebDB main ,,mergeEdits 
JHotDraw,net.nutch.db,UrlComparator,3,1,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,PAGE_COMPARATOR: Page.UrlComparator ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Page,int,Writable Returns : void} appendInstructionInfo{ Params : SequenceFile.Writer,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createWebDB{ Params : File Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createWebDB main ,,mergeEdits 
JHotDraw,net.nutch.db,PageInstructionWriter,3,1,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,pi: PageInstruction ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Page,int,Writable Returns : void} appendInstructionInfo{ Params : SequenceFile.Writer,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createWebDB{ Params : File Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createWebDB main ,,mergeEdits 
JHotDraw,net.nutch.db,DeduplicatingPageSequenceReader,3,2,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,edits: SequenceFile.Reader current: PageInstruction currentUrl: UTF8 haveCurrent: boolean ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Page,int,Writable Returns : void} appendInstructionInfo{ Params : SequenceFile.Writer,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createWebDB{ Params : File Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createWebDB main ,,mergeEdits 
JHotDraw,net.nutch.db,LinkInstruction,3,1,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,link: Link instruction: int ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Page,int,Writable Returns : void} appendInstructionInfo{ Params : SequenceFile.Writer,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createWebDB{ Params : File Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createWebDB main ,,mergeEdits 
JHotDraw,net.nutch.db,MD5Comparator,3,1,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,MD5_COMPARATOR: Link.MD5Comparator ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Page,int,Writable Returns : void} appendInstructionInfo{ Params : SequenceFile.Writer,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createWebDB{ Params : File Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createWebDB main ,,mergeEdits 
JHotDraw,net.nutch.db,UrlComparator,3,1,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,URL_COMPARATOR: Link.UrlComparator ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Page,int,Writable Returns : void} appendInstructionInfo{ Params : SequenceFile.Writer,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createWebDB{ Params : File Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createWebDB main ,,mergeEdits 
JHotDraw,net.nutch.db,LinkInstructionWriter,3,1,0,1,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,li: LinkInstruction ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Page,int,Writable Returns : void} appendInstructionInfo{ Params : SequenceFile.Writer,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createWebDB{ Params : File Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createWebDB main ,,mergeEdits 
JHotDraw,net.nutch.db,DeduplicatingLinkSequenceReader,3,0,0,0,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,currentKey: Link current: LinkInstruction edits: SequenceFile.Reader haveCurrent: boolean ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Page,int,Writable Returns : void} appendInstructionInfo{ Params : SequenceFile.Writer,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createWebDB{ Params : File Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createWebDB main ,,mergeEdits 
JHotDraw,net.nutch.db,CloseProcessor,3,2,1,0,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,basename: String oldDb: MapFile.Reader editWriter: SequenceFile.Writer sorter: SequenceFile.Sorter comparator: WritableComparator keyClass: Class itemsWritten: long ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Page,int,Writable Returns : void} appendInstructionInfo{ Params : SequenceFile.Writer,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createWebDB{ Params : File Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createWebDB main ,,mergeEdits 
JHotDraw,net.nutch.db,PagesByURLProcessor,3,2,0,0,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,futureEdits: SequenceFile.Writer ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Page,int,Writable Returns : void} appendInstructionInfo{ Params : SequenceFile.Writer,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createWebDB{ Params : File Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createWebDB main ,,mergeEdits 
JHotDraw,net.nutch.db,PagesByMD5Processor,3,2,0,0,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Page,int,Writable Returns : void} appendInstructionInfo{ Params : SequenceFile.Writer,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createWebDB{ Params : File Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createWebDB main ,,mergeEdits 
JHotDraw,net.nutch.db,LinksByMD5Processor,3,2,0,0,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,futureEdits: SequenceFile.Writer ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Page,int,Writable Returns : void} appendInstructionInfo{ Params : SequenceFile.Writer,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createWebDB{ Params : File Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createWebDB main ,,mergeEdits 
JHotDraw,net.nutch.db,TargetTester,3,2,0,0,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,pagedb: MapFile.Reader hasPage: boolean pageURL: UTF8 page: Page ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Page,int,Writable Returns : void} appendInstructionInfo{ Params : SequenceFile.Writer,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createWebDB{ Params : File Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createWebDB main ,,mergeEdits 
JHotDraw,net.nutch.db,LinksByURLProcessor,3,2,0,0,0,false,0 ,IWebDBWriter ,PageInstruction PageComparator UrlComparator PageInstructionWriter DeduplicatingPageSequenceReader LinkInstruction MD5Comparator UrlComparator LinkInstructionWriter DeduplicatingLinkSequenceReader CloseProcessor PagesByURLProcessor PagesByMD5Processor LinksByMD5Processor TargetTester LinksByURLProcessor ,pageDb: MapFile.Reader futureEdits: SequenceFile.Writer ,set{ Params : PageInstruction Returns : void} set{ Params : Page,int Returns : void} set{ Params : Page,Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getPage{ Params :  Returns : Page} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Page,int,Writable Returns : void} appendInstructionInfo{ Params : SequenceFile.Writer,Page,Link,int,Writable Returns : void} next{ Params : PageInstruction Returns : boolean} set{ Params : LinkInstruction Returns : void} set{ Params : Link,int Returns : void} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} getLink{ Params :  Returns : Link} getInstruction{ Params :  Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} appendInstructionInfo{ Params : SequenceFile.Writer,Link,int,Writable Returns : void} next{ Params : LinkInstruction Returns : boolean} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} hasOutlinks{ Params : UTF8 Returns : int} close{ Params :  Returns : void} closeDown{ Params : File,File,long Returns : long} mergeEdits{ Params : MapFile.Reader,SequenceFile.Reader,MapFile.Writer Returns : void} createWebDB{ Params : File Returns : void} close{ Params :  Returns : void} addPage{ Params : Page Returns : void} addPageWithScore{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page Returns : void} addPageIfNotPresent{ Params : Page,Link Returns : void} deletePage{ Params : String Returns : void} addLink{ Params : Link Returns : void} deleteLink{ Params : MD5Hash Returns : void} main{ Params : String[] Returns : void} ,,createWebDB main ,,mergeEdits 
JHotDraw,net.nutch.fetcher,Fetcher,1,1,0,0,0,false,0 ,0 ,BlockedHost FetcherThread ,DEFAULT_ROBOTS_LIFETIME: long MINIMUM_ROBOTS_LIFETIME: long serverDelay: long AGENT_NAME: String LOG: Logger fetchList: ArrayFile.Reader fetcherDb: ArrayFile.Writer rawDb: ArrayFile.Writer strippedDb: ArrayFile.Writer hostnameBans: TrieStringMatcher threadCount: // max number of threads
int start: long bytes: long pages: int errors: int group: ThreadGroup timeout: int http: Http robotRulesParser: RobotRulesParser robotRulesCache: Hashtable deadHosts: TreeSet blockedHostComparator: Comparator blockedHostsByOrder: TreeSet blockedHostsByName: TreeSet blockedPendingQueues: TreeMap readyPendingQueues: TreeMap ,getHostname{ Params :  Returns : String} getReadyTime{ Params :  Returns : long} compare{ Params : Object,Object Returns : int} setTimeout{ Params : int Returns : void} run{ Params :  Returns : void} logError{ Params : String,FetchListEntry,Throwable Returns : void} handleFetch{ Params : URL,FetchListEntry,Response Returns : void} handleNoFetch{ Params : FetchListEntry,int Returns : void} outputPage{ Params : FetcherOutput,FetcherContent,FetcherText Returns : void} setThreadCount{ Params : int Returns : void} setTimeout{ Params : int Returns : void} setServerDelay{ Params : long Returns : void} getHttp{ Params :  Returns : Http} setLogLevel{ Params : Level Returns : void} run{ Params :  Returns : void} status{ Params :  Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.fetcher,BlockedHost,3,0,0,0,0,false,0 ,0 ,BlockedHost FetcherThread ,hostname: String readyTime: long ,getHostname{ Params :  Returns : String} getReadyTime{ Params :  Returns : long} compare{ Params : Object,Object Returns : int} setTimeout{ Params : int Returns : void} run{ Params :  Returns : void} logError{ Params : String,FetchListEntry,Throwable Returns : void} handleFetch{ Params : URL,FetchListEntry,Response Returns : void} handleNoFetch{ Params : FetchListEntry,int Returns : void} outputPage{ Params : FetcherOutput,FetcherContent,FetcherText Returns : void} setThreadCount{ Params : int Returns : void} setTimeout{ Params : int Returns : void} setServerDelay{ Params : long Returns : void} getHttp{ Params :  Returns : Http} setLogLevel{ Params : Level Returns : void} run{ Params :  Returns : void} status{ Params :  Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.fetcher,FetcherThread,3,2,0,0,0,false,0 ,0 ,BlockedHost FetcherThread ,parser: DOMFragmentParser robotsMeta: RobotsMetaIndicator ftp: Ftp timeout: int ,getHostname{ Params :  Returns : String} getReadyTime{ Params :  Returns : long} compare{ Params : Object,Object Returns : int} setTimeout{ Params : int Returns : void} run{ Params :  Returns : void} logError{ Params : String,FetchListEntry,Throwable Returns : void} handleFetch{ Params : URL,FetchListEntry,Response Returns : void} handleNoFetch{ Params : FetchListEntry,int Returns : void} outputPage{ Params : FetcherOutput,FetcherContent,FetcherText Returns : void} setThreadCount{ Params : int Returns : void} setTimeout{ Params : int Returns : void} setServerDelay{ Params : long Returns : void} getHttp{ Params :  Returns : Http} setLogLevel{ Params : Level Returns : void} run{ Params :  Returns : void} status{ Params :  Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.fetcher,FetcherConstants,2,1,0,0,0,true,0 ,0 ,0 ,MISC_STATS: int MISC_KEY: int MISC_ROBOTS_FORBIDDEN: int MISC_META_NOINDEX: int MISC_META_NOFOLLOW: int MISC_META_NOCACHE: int MISC_FETCH_SUCCESS: int MISC_INFORMATIONAL: int NUM_MISC_CODES: int FAIL_UNKNOWN: int FAIL_BAD_URL: int FAIL_ROBOTS_EXCLUDED: int FAIL_TOO_MANY_ERRORS: int FAIL_TOO_MANY_REDIRECTS: int FAIL_REDIRECT_MISSING_TARGET: int FAIL_NOT_FOUND: int FAIL_FORBIDDEN: int FAIL_REDIRECT_LOOP_DETECTED: int FAIL_HOSTNAME_BANNED: int FAIL_DEAD_HOST: int FAIL_UNKNOWN_RESP_CODE: int FAIL_UNKNOWN_HOST: int FAIL_CONNECTION_REFUSED: int NUM_FAIL_REASONS: int ERR_UNKNOWN: int ERR_CONNECTION_TIMED_OUT: int ERR_BAD_HEADER_LINE: int ERR_RESET_BY_PEER: int ERR_BAD_STATUS_LINE: int ERR_EOF_DURING_READ: int ERR_NO_ROUTE: int ERR_SOCKET_TIMEOUT: int ERR_NETWORK_UNREACHABLE: int ERR_BAD_CONTENT_LENGTH: int ERR_CHUNKLEN_PARSE: int ERR_CHUNK_EOF: int ERR_DECOMPRESS: int NUM_ERR_REASONS: int OUT_OK: int OUT_UNKNOWN: int OUT_DOM_ERROR: int OUT_DOM_EXCEPTION: int OUT_UNKNOWN_CONTENT: int OUT_ENCODING_ERR: int NUM_OUT_STATUS: int ,,,,,
JHotDraw,net.nutch.fetcher,FetcherContent,1,1,0,0,0,false,VersionedWritable ,0 ,0 ,DIR_NAME: String VERSION: byte content: byte ,getVersion{ Params :  Returns : byte} readFields{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : FetcherContent} getContent{ Params :  Returns : byte[]} equals{ Params : Object Returns : boolean} toString{ Params :  Returns : String} main{ Params : String[] Returns : void} ,,read main ,,
JHotDraw,net.nutch.fetcher,FetcherOutput,1,1,0,0,0,false,0 ,Writable ,0 ,DIR_NAME: String DONE_NAME: String ERROR_NAME: String VERSION: byte RETRY: byte SUCCESS: byte NOT_FOUND: byte fetchListEntry: FetchListEntry md5Hash: MD5Hash status: int title: String outlinks: Outlink fetchDate: long ,getVersion{ Params :  Returns : byte} readFields{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : FetcherOutput} getFetchListEntry{ Params :  Returns : FetchListEntry} getMD5Hash{ Params :  Returns : MD5Hash} getStatus{ Params :  Returns : int} getTitle{ Params :  Returns : String} getOutlinks{ Params :  Returns : Outlink[]} getFetchDate{ Params :  Returns : long} setFetchDate{ Params : long Returns : void} equals{ Params : Object Returns : boolean} toString{ Params :  Returns : String} main{ Params : String[] Returns : void} ,,read main ,,
JHotDraw,net.nutch.fetcher,FetcherStatus,1,1,0,0,1,false,0 ,FetcherConstants ,0 ,LOG: Logger LOG_SUCCESS: boolean LOG_NOT_FOUND: boolean USE_LONG_TRACE_MSGS: boolean NEWLINE_STRING: String URL_UNKNOWN: String SECONDS_TO_MS_MULTIPLIER: long MISC_PRETTY_NAME_MAX_LEN: int FAILURE_PRETTY_NAME_MAX_LEN: int ERROR_PRETTY_NAME_MAX_LEN: int OUT_PRETTY_NAME_MAX_LEN: int requestsIssued: long fetchListRequestsIssued: long robotsRequestsIssued: long http11RequestsIssued: long requestRetries: long fetchListRequestRetries: long robotsRequestRetries: long requestRedirects: long fetchListRequestRedirects: long robotsRequestRedirects: long requestsSucceeded: long fetchListRequestsSucceeded: long robotsRequestsSucceeded: long requestsFailedByReason: long fetchListRequestsFailedByReason: long robotsRequestsFailedByReason: long requestErrorsByReason: long fetchListRequestErrorsByReason: long robotsRequestErrorsByReason: long outputStatusCounts: long getRequestAttempts: long getRequestAllBusy: long getRequestThrottled: long getRequestFoundExcluded: long getRequestFoundNotReady: long getRequestSuccesses: long outputQueueAdds: long outputQueueAdded: long outputQueueAddDelays: long outputQueuePopAttempts: long outputQueuePopped: long outputQueuePopNoDelay: long outputQueueEmpty: long bytesFetched: long bytesTransferred: long fetchListBytesFetched: long robotsBytesFetched: long requestsReadFromFetchList: long droppedOnFloor: long rawBytesSent: long rawBytesRecieved: long numCompressedTransfers: long numContinues: long startTime: long endTime: long ,reset{ Params :  Returns : void} dispatchingToFetcherThread{ Params : RequestRecord Returns : void} readFromFetchlist{ Params :  Returns : void} requestFailed{ Params : RequestRecord Returns : void} requestError{ Params : RequestRecord Returns : void} succeeded{ Params : RequestRecord Returns : void} retry{ Params : RequestRecord Returns : void} redirected{ Params : RequestRecord Returns : void} droppedOnFloor{ Params : RequestRecord Returns : void} incrementOutputQueueAdd{ Params : int Returns : void} incrementOutputQueueFull{ Params :  Returns : void} incrementOutputQueuePopNoDelay{ Params :  Returns : void} incrementOutputQueuePopped{ Params :  Returns : void} incrementOutputQueueEmpty{ Params :  Returns : void} outputStatus{ Params : RequestRecord,String Returns : void} incrementGetRequestAttempts{ Params :  Returns : void} incrementGetRequestAllBusy{ Params :  Returns : void} incrementGetRequestThrottled{ Params :  Returns : void} incrementGetRequestSuccesses{ Params :  Returns : void} incrementGetRequestFoundExcluded{ Params :  Returns : void} incrementGetRequestFoundNotReady{ Params :  Returns : void} incrementRawBytes{ Params : long,long Returns : void} incrementContinues{ Params : int Returns : void} logStats{ Params :  Returns : void} getRawBandwidth{ Params :  Returns : int} cloneStatus{ Params :  Returns : FetcherStatus} getDelta{ Params : FetcherStatus Returns : FetcherStatus} logKeys{ Params :  Returns : void} logTrace{ Params : String,String,String,String[] Returns : void} logTrace{ Params : String,String,URL,String[] Returns : void} logTrace{ Params : String,String,String Returns : void} logTrace{ Params : String,String,URL Returns : void} logTraceReqFailure{ Params : RequestRecord Returns : void} logTraceReqError{ Params : RequestRecord Returns : void} logTraceOutputStatus{ Params : RequestRecord,String Returns : void} logTraceMisc{ Params : int,URL Returns : void} logTraceMisc{ Params : int,String Returns : void} getMiscInfoPrettyName{ Params : int Returns : String} getMiscInfoTerseName{ Params : int Returns : String} getFailurePrettyName{ Params : int Returns : String} getFailureTerseName{ Params : int Returns : String} getErrorPrettyName{ Params : int Returns : String} getErrorTerseName{ Params : int Returns : String} getOutputStatusPrettyName{ Params : int Returns : String} getOutputStatusTerseName{ Params : int Returns : String} ,,logKeys logTrace logTrace logTrace logTrace logTraceReqFailure logTraceReqError logTraceOutputStatus logTraceMisc logTraceMisc getMiscInfoPrettyName getMiscInfoTerseName getFailurePrettyName getFailureTerseName getErrorPrettyName getErrorTerseName getOutputStatusPrettyName getOutputStatusTerseName ,,
JHotDraw,net.nutch.fetcher,FetcherText,1,1,0,0,0,false,VersionedWritable ,0 ,0 ,DIR_NAME: String VERSION: byte text: String ,getVersion{ Params :  Returns : byte} readFields{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : FetcherText} getText{ Params :  Returns : String} equals{ Params : Object Returns : boolean} toString{ Params :  Returns : String} main{ Params : String[] Returns : void} ,,read main ,,
JHotDraw,net.nutch.fetcher,FetcherThread,1,1,0,0,0,false,Thread ,FetcherConstants ,0 ,LOG: Logger DELAY_MS: int scheduler: RequestScheduler throttle: boolean ftp: Ftp ,run{ Params :  Returns : void} throttle{ Params :  Returns : void} unthrottle{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.fetcher,HostQueue,1,1,0,0,0,false,0 ,FetcherConstants SoftHashMap.FinalizationNotifier ,HostQueueKey ,LOG: Logger MAX_CONSECUTIVE_FAILURES: int MAX_FAILERR_RATE: float MIN_REQ_FAIL_RATE: int ROBOTS_EXCLUDE: int ROBOTS_UNKNOWN: int ROBOTS_ALLOW: int INITIAL_STATE: int QUEUED_ROBOTS: int FETCHING_ROBOTS: int REPROCESSING_ROBOTS: int DONE_ROBOTS: int DEAD_HOST: int ROBOTS_REDIR_TIMEOUT_MS: long DEFAULT_ROBOTS_LIFETIME: long MINIMUM_ROBOTS_LIFETIME: long key: HostQueueKey owner: RequestScheduler queuedRequests: LinkedList state: int robotsRedirTimer: long outstandingRequests: HashSet myOrigRobotsRequest: RequestRecord robotRules: RobotRuleSet robotRulesExpireTime: long delaysUsed: int delayTimers: long delayInUse: boolean totalRequestsIssued: int totalFailErrs: int consecutiveFailures: int httpVersion: int addr: InetAddress deadMsg: String finalizationListeners: ArrayList ,getProtocol{ Params :  Returns : String} getHost{ Params :  Returns : String} getPort{ Params :  Returns : int} toString{ Params :  Returns : String} hashCode{ Params :  Returns : int} equals{ Params : Object Returns : boolean} getKey{ Params :  Returns : HostQueueKey} addRequest{ Params : RequestRecord Returns : void} queueRequest{ Params : RequestRecord Returns : void} queueRobotsRequest{ Params :  Returns : void} checkRobots{ Params : RequestRecord Returns : int} robotsExpired{ Params :  Returns : boolean} killRequest{ Params :  Returns : RequestRecord} getNextRequest{ Params :  Returns : RequestRecord} isFinished{ Params :  Returns : boolean} delaysPending{ Params :  Returns : boolean} requestReady{ Params :  Returns : boolean} size{ Params :  Returns : int} delaysInUse{ Params :  Returns : int} updateDelays{ Params :  Returns : void} removeFromOutstandingRequests{ Params : RequestRecord Returns : void} requestCompleted{ Params : RequestRecord Returns : void} checkDead{ Params :  Returns : void} hashCode{ Params :  Returns : int} isHttpRequest{ Params : RequestRecord Returns : boolean} addFinalizationListener{ Params : SoftHashMap.FinalizationListener Returns : void} finalize{ Params :  Returns : void} ,,,checkDead ,
JHotDraw,net.nutch.fetcher,HostQueueKey,3,1,0,1,0,false,0 ,FetcherConstants SoftHashMap.FinalizationNotifier ,HostQueueKey ,protocol: String host: String port: int hashCode: int ,getProtocol{ Params :  Returns : String} getHost{ Params :  Returns : String} getPort{ Params :  Returns : int} toString{ Params :  Returns : String} hashCode{ Params :  Returns : int} equals{ Params : Object Returns : boolean} getKey{ Params :  Returns : HostQueueKey} addRequest{ Params : RequestRecord Returns : void} queueRequest{ Params : RequestRecord Returns : void} queueRobotsRequest{ Params :  Returns : void} checkRobots{ Params : RequestRecord Returns : int} robotsExpired{ Params :  Returns : boolean} killRequest{ Params :  Returns : RequestRecord} getNextRequest{ Params :  Returns : RequestRecord} isFinished{ Params :  Returns : boolean} delaysPending{ Params :  Returns : boolean} requestReady{ Params :  Returns : boolean} size{ Params :  Returns : int} delaysInUse{ Params :  Returns : int} updateDelays{ Params :  Returns : void} removeFromOutstandingRequests{ Params : RequestRecord Returns : void} requestCompleted{ Params : RequestRecord Returns : void} checkDead{ Params :  Returns : void} hashCode{ Params :  Returns : int} isHttpRequest{ Params : RequestRecord Returns : boolean} addFinalizationListener{ Params : SoftHashMap.FinalizationListener Returns : void} finalize{ Params :  Returns : void} ,,,checkDead ,
JHotDraw,net.nutch.fetcher,Outlink,1,1,0,0,0,false,0 ,Writable ,0 ,toUrl: String anchor: String ,readFields{ Params : DataInput Returns : void} skip{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Outlink} getToUrl{ Params :  Returns : String} getAnchor{ Params :  Returns : String} equals{ Params : Object Returns : boolean} toString{ Params :  Returns : String} ,,skip read ,,
JHotDraw,net.nutch.fetcher,OutputThread,1,1,0,0,0,false,Thread ,FetcherConstants ,UnhandledContentTypeException DOMErrorException ,LOG: Logger NO_OUTPUT_DELAY_MS: int scheduler: RequestScheduler parser: DOMFragmentParser robotsMeta: RobotsMetaIndicator fetcherDb: ArrayFile.Writer rawDb: ArrayFile.Writer strippedDb: ArrayFile.Writer ,getContentType{ Params :  Returns : String} run{ Params :  Returns : void} handleFetch{ Params : URL,FetchListEntry,Response Returns : void} handleNoFetch{ Params : FetchListEntry,int Returns : void} outputPage{ Params : FetcherOutput,FetcherContent,FetcherText Returns : void} ,,,,
JHotDraw,net.nutch.fetcher,UnhandledContentTypeException,3,2,0,0,0,false,Thread ,FetcherConstants ,UnhandledContentTypeException DOMErrorException ,contentType: String ,getContentType{ Params :  Returns : String} run{ Params :  Returns : void} handleFetch{ Params : URL,FetchListEntry,Response Returns : void} handleNoFetch{ Params : FetchListEntry,int Returns : void} outputPage{ Params : FetcherOutput,FetcherContent,FetcherText Returns : void} ,,,,
JHotDraw,net.nutch.fetcher,DOMErrorException,3,2,0,0,0,false,Thread ,FetcherConstants ,UnhandledContentTypeException DOMErrorException ,,getContentType{ Params :  Returns : String} run{ Params :  Returns : void} handleFetch{ Params : URL,FetchListEntry,Response Returns : void} handleNoFetch{ Params : FetchListEntry,int Returns : void} outputPage{ Params : FetcherOutput,FetcherContent,FetcherText Returns : void} ,,,,
JHotDraw,net.nutch.fetcher,RequestRecord,1,1,0,0,0,false,0 ,0 ,0 ,LOG: Logger url: URL urlString: String redirectedFrom: RequestRecord fle: FetchListEntry hostQueue: HostQueue hostQueueWantsNotification: boolean numErrors: int redirects: int failureReason: int failureMessages: String outputStatus: int outputStatusMessages: String errorReason: int errorMessages: String hasFailed: boolean httpVersion: int response: Response expireTime: Date bytesTransmitted: long bytesReceived: long addr: InetAddress ,incrementErrors{ Params :  Returns : void} getNumErrors{ Params :  Returns : int} incrementRedirects{ Params :  Returns : void} getNumRedirects{ Params :  Returns : int} setResponse{ Params : Response Returns : void} getResponse{ Params :  Returns : Response} getFetchListEntry{ Params :  Returns : FetchListEntry} isRobotsRequest{ Params :  Returns : boolean} getURL{ Params :  Returns : URL} getURLString{ Params :  Returns : String} getOriginalURL{ Params :  Returns : URL} getHttpVersion{ Params :  Returns : int} setHttpVersion{ Params : int Returns : void} getHostQueue{ Params :  Returns : HostQueue} setHostQueue{ Params : HostQueue Returns : void} setHasFailed{ Params : boolean Returns : void} getHasFailed{ Params :  Returns : boolean} setFailureReason{ Params : int Returns : void} getFailureReason{ Params :  Returns : int} setFailureMessages{ Params : String[] Returns : void} getFailureMessages{ Params :  Returns : String[]} setErrorReason{ Params : int Returns : void} getErrorReason{ Params :  Returns : int} setErrorMessages{ Params : String[] Returns : void} getErrorMessages{ Params :  Returns : String[]} setOutputStatus{ Params : int Returns : void} getOutputStatus{ Params :  Returns : int} setOutputStatusMessages{ Params : String[] Returns : void} getOutputStatusMessages{ Params :  Returns : String[]} getExpireTime{ Params :  Returns : Date} setAddr{ Params : InetAddress Returns : void} getAddr{ Params :  Returns : InetAddress} getParentRequest{ Params :  Returns : RequestRecord} getOriginalRequest{ Params :  Returns : RequestRecord} setNotifyQueue{ Params : boolean Returns : void} getNotifyQueue{ Params :  Returns : boolean} updateParent{ Params :  Returns : void} notifyQueuesOfCompletion{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.fetcher,RequestScheduler,1,1,0,0,0,false,0 ,FetcherConstants ,0 ,LOG: Logger NEWLINE_STRING: String WAIT_TIMEOUT: int DELAY_SECONDS: int NUM_FETCHER_THREADS: int NUM_OUTPUT_THREADS: int MAX_QUEUED_REQUESTS: int MAX_OUTPUT_QUEUE: int MAX_ACTIVE_HOSTS: int MAX_CACHED_ROBOTS: int STATS_MINUTES: int MAX_QUEUED_HOSTS: int MAX_HOSTQUEUE_LENGTH: int LOW_ACTIVE_QUEUES: int LOW_ACTIVE_QUEUES_MAX_LENGTH: int MAX_PAGE_ERRORS: int MAX_PAGE_REDIRECTS: int AGENT_NAME: String THROTTLE_PERIOD_SECONDS: int THROTTLE_MAX_BANDWIDTH: int THROTTLE_INITIAL_THREADS: int MAX_CONCURRENT_REQUESTS_TO_A_SINGLE_SERVER: int SECONDS_TO_MS_MULTIPLIER: long msDelay: long maxPageErrors: int maxPageRedirects: int numFetchThreads: int numOutputThreads: int maxOutputQueue: int maxQueuedRequests: int maxQueuedHosts: int maxCachedRobots: int throttlePeriod: long throttleMaxBandwidth: int throttleInitialThreads: int allHostQueues: HashMap busyHostQueues: HashSet lastCheckQueues: long now: long readyHostQueues: FibonacciHeap delayHostQueues: LinkedList idleHostQueues: LinkedHashSet hostQueueCache: SoftHashMap pendingOutputQueue: LinkedList outputQueue: LinkedList numQueuedRequests: int numOutstandingRequests: int fetchList: ArrayFile.Reader fetcherDb: ArrayFile.Writer rawDb: ArrayFile.Writer strippedDb: ArrayFile.Writer fetchListEmpty: boolean finishedRequests: boolean robotRulesParser: RobotRulesParser hostNameBans: TrieStringMatcher overallFetcherStatus: FetcherStatus agentString: String aborted: boolean ,getRobotRulesParser{ Params :  Returns : RobotRulesParser} getAgentString{ Params :  Returns : String} getMaxConcurrentRequests{ Params :  Returns : int} getMsDelay{ Params :  Returns : long} primeQueue{ Params :  Returns : void} addRequest{ Params :  Returns : void} queueNewRequest{ Params : RequestRecord Returns : void} enqueuePendingOutput{ Params :  Returns : void} enqueueOutput{ Params : RequestRecord Returns : void} finishedOutput{ Params :  Returns : boolean} returnOutputAndGetNext{ Params : RequestRecord,String Returns : RequestRecord} finishedRequests{ Params :  Returns : boolean} checkQueues{ Params :  Returns : void} getNextRequest{ Params :  Returns : RequestRecord} getNextRequestHelper{ Params :  Returns : RequestRecord} returnRequest{ Params : RequestRecord,MiscHttpAccounting Returns : void} unsyncReturnRequest{ Params : RequestRecord,MiscHttpAccounting Returns : void} getTime{ Params :  Returns : long} returnRequestAndGetNext{ Params : RequestRecord,MiscHttpAccounting Returns : RequestRecord} handleFailedFetch{ Params : RequestRecord Returns : void} handleUnsuccessfulFetchAttempt{ Params : RequestRecord Returns : void} handleSuccessFetch{ Params : RequestRecord Returns : void} handleRedirectedFetch{ Params : RequestRecord Returns : void} logState{ Params :  Returns : void} run{ Params :  Returns : boolean} setLogLevel{ Params : Level Returns : void} main{ Params : String[] Returns : void} ,,main ,getMaxConcurrentRequests ,
JHotDraw,net.nutch.fetcher,RobotRulesParser,1,1,0,0,0,false,0 ,0 ,RobotRuleSet RobotsEntry ,LOG: Logger robotNames: HashMap CHARACTER_ENCODING: String NO_PRECEDENCE: int EMPTY_RULES: RobotRuleSet BUFSIZE: int ,addPrefix{ Params : String,boolean Returns : void} clearPrefixes{ Params :  Returns : void} setExpireTime{ Params : long Returns : void} getExpireTime{ Params :  Returns : long} isAllowed{ Params : String Returns : boolean} toString{ Params :  Returns : String} parseRules{ Params : byte[] Returns : RobotRuleSet} getEmptyRules{ Params :  Returns : RobotRuleSet} getForbidAllRules{ Params :  Returns : RobotRuleSet} main{ Params : String[] Returns : void} ,,getEmptyRules getForbidAllRules main ,,
JHotDraw,net.nutch.fetcher,RobotRuleSet,3,1,0,1,0,false,0 ,0 ,RobotRuleSet RobotsEntry ,tmpEntries: ArrayList entries: RobotsEntry expireTime: long ,addPrefix{ Params : String,boolean Returns : void} clearPrefixes{ Params :  Returns : void} setExpireTime{ Params : long Returns : void} getExpireTime{ Params :  Returns : long} isAllowed{ Params : String Returns : boolean} toString{ Params :  Returns : String} parseRules{ Params : byte[] Returns : RobotRuleSet} getEmptyRules{ Params :  Returns : RobotRuleSet} getForbidAllRules{ Params :  Returns : RobotRuleSet} main{ Params : String[] Returns : void} ,,getEmptyRules getForbidAllRules main ,,
JHotDraw,net.nutch.fetcher,RobotsEntry,3,2,0,0,0,false,0 ,0 ,RobotRuleSet RobotsEntry ,prefix: String allowed: boolean ,addPrefix{ Params : String,boolean Returns : void} clearPrefixes{ Params :  Returns : void} setExpireTime{ Params : long Returns : void} getExpireTime{ Params :  Returns : long} isAllowed{ Params : String Returns : boolean} toString{ Params :  Returns : String} parseRules{ Params : byte[] Returns : RobotRuleSet} getEmptyRules{ Params :  Returns : RobotRuleSet} getForbidAllRules{ Params :  Returns : RobotRuleSet} main{ Params : String[] Returns : void} ,,getEmptyRules getForbidAllRules main ,,
JHotDraw,net.nutch.html,Entities,1,1,0,0,0,false,0 ,0 ,0 ,decoder: Hashtable encoder: String ,decode{ Params : String Returns : String} encode{ Params : String Returns : String} add{ Params : String,int Returns : void} ,,decode encode add ,,
JHotDraw,net.nutch.indexer,DeleteDuplicates,1,1,0,0,0,false,0 ,0 ,IndexedDoc ByHashScore ByHashDoc Hasher ,LOG: Logger readers: IndexReader tempFile: String ,write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} compareTo{ Params : Object Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} updateHash{ Params : MD5Hash,Document Returns : void} close{ Params :  Returns : void} deleteContentDuplicates{ Params :  Returns : void} updateHash{ Params : MD5Hash,Document Returns : void} deleteUrlDuplicates{ Params :  Returns : void} updateHash{ Params : MD5Hash,Document Returns : void} computeHashes{ Params : Hasher Returns : void} deleteDuplicates{ Params :  Returns : int} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.indexer,IndexedDoc,3,1,0,1,0,false,0 ,0 ,IndexedDoc ByHashScore ByHashDoc Hasher ,hash: MD5Hash score: float index: int doc: int urlLen: int ,write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} compareTo{ Params : Object Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} updateHash{ Params : MD5Hash,Document Returns : void} close{ Params :  Returns : void} deleteContentDuplicates{ Params :  Returns : void} updateHash{ Params : MD5Hash,Document Returns : void} deleteUrlDuplicates{ Params :  Returns : void} updateHash{ Params : MD5Hash,Document Returns : void} computeHashes{ Params : Hasher Returns : void} deleteDuplicates{ Params :  Returns : int} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.indexer,ByHashScore,3,1,0,1,0,false,0 ,0 ,IndexedDoc ByHashScore ByHashDoc Hasher ,,write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} compareTo{ Params : Object Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} updateHash{ Params : MD5Hash,Document Returns : void} close{ Params :  Returns : void} deleteContentDuplicates{ Params :  Returns : void} updateHash{ Params : MD5Hash,Document Returns : void} deleteUrlDuplicates{ Params :  Returns : void} updateHash{ Params : MD5Hash,Document Returns : void} computeHashes{ Params : Hasher Returns : void} deleteDuplicates{ Params :  Returns : int} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.indexer,ByHashDoc,3,1,0,1,0,false,0 ,0 ,IndexedDoc ByHashScore ByHashDoc Hasher ,,write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} compareTo{ Params : Object Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} updateHash{ Params : MD5Hash,Document Returns : void} close{ Params :  Returns : void} deleteContentDuplicates{ Params :  Returns : void} updateHash{ Params : MD5Hash,Document Returns : void} deleteUrlDuplicates{ Params :  Returns : void} updateHash{ Params : MD5Hash,Document Returns : void} computeHashes{ Params : Hasher Returns : void} deleteDuplicates{ Params :  Returns : int} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.indexer,Hasher,3,2,0,0,0,true,0 ,0 ,IndexedDoc ByHashScore ByHashDoc Hasher ,,write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} compareTo{ Params : Object Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} updateHash{ Params : MD5Hash,Document Returns : void} close{ Params :  Returns : void} deleteContentDuplicates{ Params :  Returns : void} updateHash{ Params : MD5Hash,Document Returns : void} deleteUrlDuplicates{ Params :  Returns : void} updateHash{ Params : MD5Hash,Document Returns : void} computeHashes{ Params : Hasher Returns : void} deleteDuplicates{ Params :  Returns : int} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.indexer,HighFreqTerms,1,1,0,0,0,false,0 ,0 ,TermFreq TermFreqQueue ,numTerms: int ,lessThan{ Params : Object,Object Returns : boolean} main{ Params : String[] Returns : void} ,,main ,lessThan ,
JHotDraw,net.nutch.indexer,TermFreq,3,2,0,1,0,false,0 ,0 ,TermFreq TermFreqQueue ,docFreq: int term: Term ,lessThan{ Params : Object,Object Returns : boolean} main{ Params : String[] Returns : void} ,,main ,lessThan ,
JHotDraw,net.nutch.indexer,TermFreqQueue,3,2,0,1,0,false,0 ,0 ,TermFreq TermFreqQueue ,,lessThan{ Params : Object,Object Returns : boolean} main{ Params : String[] Returns : void} ,,main ,lessThan ,
JHotDraw,net.nutch.indexer,IndexMerger,1,1,0,0,0,false,0 ,0 ,0 ,LOG: Logger DONE_NAME: String indexDirectory: File segments: File ,merge{ Params :  Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.indexer,IndexSegment,1,1,0,0,0,false,0 ,0 ,0 ,DONE_NAME: String LOG: Logger boostByLinkCount: boolean scorePower: float maxTitleLength: int directory: File maxDocs: int ,setScorePower{ Params : float Returns : void} indexPages{ Params :  Returns : void} makeDocument{ Params : String,long,FetcherOutput,FetcherText Returns : Document} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.indexer,NutchSimilarity,1,1,0,0,0,false,DefaultSimilarity ,0 ,0 ,MIN_CONTENT_LENGTH: int ,lengthNorm{ Params : String,int Returns : float} coord{ Params : int,int Returns : float} ,,,,
JHotDraw,net.nutch.io,ArrayFile,1,1,0,0,0,false,MapFile ,0 ,Writer Reader ,,append{ Params : Writable Returns : void} seek{ Params : long Returns : void} next{ Params : Writable Returns : Writable} key{ Params :  Returns : long} get{ Params : long,Writable Returns : Writable} ,,,,
JHotDraw,net.nutch.io,Writer,3,1,0,1,0,false,MapFile ,0 ,Writer Reader ,count: LongWritable ,append{ Params : Writable Returns : void} seek{ Params : long Returns : void} next{ Params : Writable Returns : Writable} key{ Params :  Returns : long} get{ Params : long,Writable Returns : Writable} ,,,,
JHotDraw,net.nutch.io,Reader,3,1,0,1,0,false,MapFile ,0 ,Writer Reader ,key: LongWritable ,append{ Params : Writable Returns : void} seek{ Params : long Returns : void} next{ Params : Writable Returns : Writable} key{ Params :  Returns : long} get{ Params : long,Writable Returns : Writable} ,,,,
JHotDraw,net.nutch.io,ArrayWritable,1,1,0,0,0,false,0 ,Writable ,0 ,valueClass: Class values: Writable ,toStrings{ Params :  Returns : String[]} toArray{ Params :  Returns : Object} set{ Params : Writable[] Returns : void} get{ Params :  Returns : Writable[]} readFields{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} ,,,,
JHotDraw,net.nutch.io,BytesWritable,1,1,0,0,0,false,0 ,Writable ,0 ,bytes: byte ,get{ Params :  Returns : byte[]} readFields{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} ,,,,
JHotDraw,net.nutch.io,DataInputBuffer,1,1,0,0,0,false,DataInputStream ,0 ,Buffer ,buffer: Buffer ,reset{ Params : byte[],int,int Returns : void} getPosition{ Params :  Returns : int} reset{ Params : byte[],int Returns : void} reset{ Params : byte[],int,int Returns : void} getPosition{ Params :  Returns : int} ,,,,
JHotDraw,net.nutch.io,Buffer,3,2,0,1,0,false,DataInputStream ,0 ,Buffer ,,reset{ Params : byte[],int,int Returns : void} getPosition{ Params :  Returns : int} reset{ Params : byte[],int Returns : void} reset{ Params : byte[],int,int Returns : void} getPosition{ Params :  Returns : int} ,,,,
JHotDraw,net.nutch.io,DataOutputBuffer,1,1,0,0,0,false,DataOutputStream ,0 ,Buffer ,buffer: Buffer ,getData{ Params :  Returns : byte[]} getLength{ Params :  Returns : int} reset{ Params :  Returns : void} write{ Params : DataInput,int Returns : void} getData{ Params :  Returns : byte[]} getLength{ Params :  Returns : int} reset{ Params :  Returns : DataOutputBuffer} write{ Params : DataInput,int Returns : void} ,,,,
JHotDraw,net.nutch.io,Buffer,3,2,0,1,0,false,DataOutputStream ,0 ,Buffer ,,getData{ Params :  Returns : byte[]} getLength{ Params :  Returns : int} reset{ Params :  Returns : void} write{ Params : DataInput,int Returns : void} getData{ Params :  Returns : byte[]} getLength{ Params :  Returns : int} reset{ Params :  Returns : DataOutputBuffer} write{ Params : DataInput,int Returns : void} ,,,,
JHotDraw,net.nutch.io,IntWritable,1,1,0,0,0,false,0 ,WritableComparable ,Comparator ,value: int ,set{ Params : int Returns : void} get{ Params :  Returns : int} readFields{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} compareTo{ Params : Object Returns : int} toString{ Params :  Returns : String} compare{ Params : byte[],int,int,byte[],int,int Returns : int} ,,,,
JHotDraw,net.nutch.io,Comparator,3,1,0,1,0,false,0 ,WritableComparable ,Comparator ,,set{ Params : int Returns : void} get{ Params :  Returns : int} readFields{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} compareTo{ Params : Object Returns : int} toString{ Params :  Returns : String} compare{ Params : byte[],int,int,byte[],int,int Returns : int} ,,,,
JHotDraw,net.nutch.io,LongWritable,1,1,0,0,0,false,0 ,WritableComparable ,Comparator ,value: long ,set{ Params : long Returns : void} get{ Params :  Returns : long} readFields{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} compareTo{ Params : Object Returns : int} toString{ Params :  Returns : String} compare{ Params : byte[],int,int,byte[],int,int Returns : int} ,,,,
JHotDraw,net.nutch.io,Comparator,3,1,0,1,0,false,0 ,WritableComparable ,Comparator ,,set{ Params : long Returns : void} get{ Params :  Returns : long} readFields{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} compareTo{ Params : Object Returns : int} toString{ Params :  Returns : String} compare{ Params : byte[],int,int,byte[],int,int Returns : int} ,,,,
JHotDraw,net.nutch.io,MapFile,1,1,0,0,0,false,0 ,0 ,Writer Reader ,INDEX_FILE_NAME: String DATA_FILE_NAME: String ,getIndexInterval{ Params :  Returns : int} setIndexInterval{ Params : int Returns : void} close{ Params :  Returns : void} append{ Params : WritableComparable,Writable Returns : void} checkKey{ Params : WritableComparable Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} readIndex{ Params :  Returns : void} reset{ Params :  Returns : void} seek{ Params : WritableComparable Returns : boolean} binarySearch{ Params : WritableComparable Returns : int} next{ Params : WritableComparable,Writable Returns : boolean} get{ Params : WritableComparable,Writable Returns : Writable} close{ Params :  Returns : void} rename{ Params : String,String Returns : void} delete{ Params : String Returns : void} main{ Params : String[] Returns : void} ,,rename delete main ,,
JHotDraw,net.nutch.io,Writer,3,1,0,1,0,false,0 ,0 ,Writer Reader ,data: SequenceFile.Writer index: SequenceFile.Writer indexInterval: int size: long position: LongWritable comparator: WritableComparator inBuf: DataInputBuffer outBuf: DataOutputBuffer lastKey: WritableComparable ,getIndexInterval{ Params :  Returns : int} setIndexInterval{ Params : int Returns : void} close{ Params :  Returns : void} append{ Params : WritableComparable,Writable Returns : void} checkKey{ Params : WritableComparable Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} readIndex{ Params :  Returns : void} reset{ Params :  Returns : void} seek{ Params : WritableComparable Returns : boolean} binarySearch{ Params : WritableComparable Returns : int} next{ Params : WritableComparable,Writable Returns : boolean} get{ Params : WritableComparable,Writable Returns : Writable} close{ Params :  Returns : void} rename{ Params : String,String Returns : void} delete{ Params : String Returns : void} main{ Params : String[] Returns : void} ,,rename delete main ,,
JHotDraw,net.nutch.io,Reader,3,1,0,1,0,false,0 ,0 ,Writer Reader ,comparator: WritableComparator keyBuf: DataOutputBuffer nextBuf: DataOutputBuffer nextKeyLen: int seekPosition: long seekIndex: int firstPosition: long getKey: WritableComparable data: SequenceFile.Reader index: SequenceFile.Reader indexClosed: boolean count: int keys: WritableComparable positions: long ,getIndexInterval{ Params :  Returns : int} setIndexInterval{ Params : int Returns : void} close{ Params :  Returns : void} append{ Params : WritableComparable,Writable Returns : void} checkKey{ Params : WritableComparable Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} readIndex{ Params :  Returns : void} reset{ Params :  Returns : void} seek{ Params : WritableComparable Returns : boolean} binarySearch{ Params : WritableComparable Returns : int} next{ Params : WritableComparable,Writable Returns : boolean} get{ Params : WritableComparable,Writable Returns : Writable} close{ Params :  Returns : void} rename{ Params : String,String Returns : void} delete{ Params : String Returns : void} main{ Params : String[] Returns : void} ,,rename delete main ,,
JHotDraw,net.nutch.io,MD5Hash,1,1,0,0,0,false,0 ,WritableComparable ,Comparator ,MD5_LEN: int DIGESTER: MessageDigest digest: byte HEX_DIGITS: char ,readFields{ Params : DataInput Returns : void} read{ Params : DataInput Returns : MD5Hash} write{ Params : DataOutput Returns : void} set{ Params : MD5Hash Returns : void} getDigest{ Params :  Returns : byte[]} digest{ Params : byte[] Returns : MD5Hash} digest{ Params : byte[],int,int Returns : MD5Hash} digest{ Params : String Returns : MD5Hash} digest{ Params : UTF8 Returns : MD5Hash} halfDigest{ Params :  Returns : long} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} compareTo{ Params : Object Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} toString{ Params :  Returns : String} setDigest{ Params : String Returns : void} charToNibble{ Params : char Returns : int} ,,read digest digest digest digest charToNibble ,,
JHotDraw,net.nutch.io,Comparator,3,1,0,1,0,false,0 ,WritableComparable ,Comparator ,,readFields{ Params : DataInput Returns : void} read{ Params : DataInput Returns : MD5Hash} write{ Params : DataOutput Returns : void} set{ Params : MD5Hash Returns : void} getDigest{ Params :  Returns : byte[]} digest{ Params : byte[] Returns : MD5Hash} digest{ Params : byte[],int,int Returns : MD5Hash} digest{ Params : String Returns : MD5Hash} digest{ Params : UTF8 Returns : MD5Hash} halfDigest{ Params :  Returns : long} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} compareTo{ Params : Object Returns : int} compare{ Params : byte[],int,int,byte[],int,int Returns : int} toString{ Params :  Returns : String} setDigest{ Params : String Returns : void} charToNibble{ Params : char Returns : int} ,,read digest digest digest digest charToNibble ,,
JHotDraw,net.nutch.io,NullWritable,1,1,0,0,0,false,0 ,Writable ,0 ,THIS: NullWritable ,get{ Params :  Returns : NullWritable} readFields{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} ,,get ,,
JHotDraw,net.nutch.io,SequenceFile,1,1,0,0,0,false,0 ,0 ,Writer Reader BufferedRandomAccessFile Sorter SortPass MergePass MergeFiles MergeStream MergeQueue ,LOG: Logger VERSION: byte ,init{ Params : BufferedRandomAccessFile,Class,Class Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} close{ Params :  Returns : void} append{ Params : Writable,Writable Returns : void} append{ Params : byte[],int,int,int Returns : void} getLength{ Params :  Returns : long} init{ Params :  Returns : void} close{ Params :  Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} next{ Params : Writable Returns : boolean} next{ Params : Writable,Writable Returns : boolean} next{ Params : DataOutputBuffer Returns : int} seek{ Params : long Returns : void} getPosition{ Params :  Returns : long} toString{ Params :  Returns : String} read{ Params :  Returns : int} fill{ Params :  Returns : void} read{ Params : byte[],int,int Returns : int} read{ Params : byte[] Returns : int} write{ Params : int Returns : void} write{ Params : byte[],int,int Returns : void} write{ Params : byte[] Returns : void} flushBuffer{ Params :  Returns : void} seek{ Params : long Returns : void} getFilePointer{ Params :  Returns : long} close{ Params :  Returns : void} setFactor{ Params : int Returns : void} getFactor{ Params :  Returns : int} setMemory{ Params : int Returns : void} getMemory{ Params :  Returns : int} sort{ Params : String,String Returns : void} sortPass{ Params :  Returns : int} run{ Params :  Returns : int} close{ Params :  Returns : void} grow{ Params :  Returns : void} grow{ Params : int[],int Returns : int[]} flush{ Params : int,boolean Returns : void} sort{ Params : int Returns : void} compare{ Params : int,int Returns : int} mergeSort{ Params : int[],int[],int,int Returns : void} swap{ Params : int[],int,int Returns : void} mergePass{ Params : int,boolean Returns : int} close{ Params :  Returns : void} run{ Params :  Returns : int} merge{ Params : String[],String Returns : void} close{ Params :  Returns : void} run{ Params :  Returns : void} next{ Params :  Returns : boolean} lessThan{ Params : Object,Object Returns : boolean} merge{ Params :  Returns : void} close{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.io,Writer,3,1,0,1,0,false,0 ,0 ,Writer Reader BufferedRandomAccessFile Sorter SortPass MergePass MergeFiles MergeStream MergeQueue ,out: BufferedRandomAccessFile buffer: DataOutputBuffer keyClass: Class valClass: Class ,init{ Params : BufferedRandomAccessFile,Class,Class Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} close{ Params :  Returns : void} append{ Params : Writable,Writable Returns : void} append{ Params : byte[],int,int,int Returns : void} getLength{ Params :  Returns : long} init{ Params :  Returns : void} close{ Params :  Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} next{ Params : Writable Returns : boolean} next{ Params : Writable,Writable Returns : boolean} next{ Params : DataOutputBuffer Returns : int} seek{ Params : long Returns : void} getPosition{ Params :  Returns : long} toString{ Params :  Returns : String} read{ Params :  Returns : int} fill{ Params :  Returns : void} read{ Params : byte[],int,int Returns : int} read{ Params : byte[] Returns : int} write{ Params : int Returns : void} write{ Params : byte[],int,int Returns : void} write{ Params : byte[] Returns : void} flushBuffer{ Params :  Returns : void} seek{ Params : long Returns : void} getFilePointer{ Params :  Returns : long} close{ Params :  Returns : void} setFactor{ Params : int Returns : void} getFactor{ Params :  Returns : int} setMemory{ Params : int Returns : void} getMemory{ Params :  Returns : int} sort{ Params : String,String Returns : void} sortPass{ Params :  Returns : int} run{ Params :  Returns : int} close{ Params :  Returns : void} grow{ Params :  Returns : void} grow{ Params : int[],int Returns : int[]} flush{ Params : int,boolean Returns : void} sort{ Params : int Returns : void} compare{ Params : int,int Returns : int} mergeSort{ Params : int[],int[],int,int Returns : void} swap{ Params : int[],int,int Returns : void} mergePass{ Params : int,boolean Returns : int} close{ Params :  Returns : void} run{ Params :  Returns : int} merge{ Params : String[],String Returns : void} close{ Params :  Returns : void} run{ Params :  Returns : void} next{ Params :  Returns : boolean} lessThan{ Params : Object,Object Returns : boolean} merge{ Params :  Returns : void} close{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.io,Reader,3,1,0,1,0,false,0 ,0 ,Writer Reader BufferedRandomAccessFile Sorter SortPass MergePass MergeFiles MergeStream MergeQueue ,file: String in: BufferedRandomAccessFile outBuf: DataOutputBuffer inBuf: DataInputBuffer keyClass: Class valClass: Class end: long keyLength: int ,init{ Params : BufferedRandomAccessFile,Class,Class Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} close{ Params :  Returns : void} append{ Params : Writable,Writable Returns : void} append{ Params : byte[],int,int,int Returns : void} getLength{ Params :  Returns : long} init{ Params :  Returns : void} close{ Params :  Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} next{ Params : Writable Returns : boolean} next{ Params : Writable,Writable Returns : boolean} next{ Params : DataOutputBuffer Returns : int} seek{ Params : long Returns : void} getPosition{ Params :  Returns : long} toString{ Params :  Returns : String} read{ Params :  Returns : int} fill{ Params :  Returns : void} read{ Params : byte[],int,int Returns : int} read{ Params : byte[] Returns : int} write{ Params : int Returns : void} write{ Params : byte[],int,int Returns : void} write{ Params : byte[] Returns : void} flushBuffer{ Params :  Returns : void} seek{ Params : long Returns : void} getFilePointer{ Params :  Returns : long} close{ Params :  Returns : void} setFactor{ Params : int Returns : void} getFactor{ Params :  Returns : int} setMemory{ Params : int Returns : void} getMemory{ Params :  Returns : int} sort{ Params : String,String Returns : void} sortPass{ Params :  Returns : int} run{ Params :  Returns : int} close{ Params :  Returns : void} grow{ Params :  Returns : void} grow{ Params : int[],int Returns : int[]} flush{ Params : int,boolean Returns : void} sort{ Params : int Returns : void} compare{ Params : int,int Returns : int} mergeSort{ Params : int[],int[],int,int Returns : void} swap{ Params : int[],int,int Returns : void} mergePass{ Params : int,boolean Returns : int} close{ Params :  Returns : void} run{ Params :  Returns : int} merge{ Params : String[],String Returns : void} close{ Params :  Returns : void} run{ Params :  Returns : void} next{ Params :  Returns : boolean} lessThan{ Params : Object,Object Returns : boolean} merge{ Params :  Returns : void} close{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.io,BufferedRandomAccessFile,3,2,0,1,0,false,0 ,0 ,Writer Reader BufferedRandomAccessFile Sorter SortPass MergePass MergeFiles MergeStream MergeQueue ,buf: byte pos: int count: int filePointer: long isReadOnly: boolean ,init{ Params : BufferedRandomAccessFile,Class,Class Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} close{ Params :  Returns : void} append{ Params : Writable,Writable Returns : void} append{ Params : byte[],int,int,int Returns : void} getLength{ Params :  Returns : long} init{ Params :  Returns : void} close{ Params :  Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} next{ Params : Writable Returns : boolean} next{ Params : Writable,Writable Returns : boolean} next{ Params : DataOutputBuffer Returns : int} seek{ Params : long Returns : void} getPosition{ Params :  Returns : long} toString{ Params :  Returns : String} read{ Params :  Returns : int} fill{ Params :  Returns : void} read{ Params : byte[],int,int Returns : int} read{ Params : byte[] Returns : int} write{ Params : int Returns : void} write{ Params : byte[],int,int Returns : void} write{ Params : byte[] Returns : void} flushBuffer{ Params :  Returns : void} seek{ Params : long Returns : void} getFilePointer{ Params :  Returns : long} close{ Params :  Returns : void} setFactor{ Params : int Returns : void} getFactor{ Params :  Returns : int} setMemory{ Params : int Returns : void} getMemory{ Params :  Returns : int} sort{ Params : String,String Returns : void} sortPass{ Params :  Returns : int} run{ Params :  Returns : int} close{ Params :  Returns : void} grow{ Params :  Returns : void} grow{ Params : int[],int Returns : int[]} flush{ Params : int,boolean Returns : void} sort{ Params : int Returns : void} compare{ Params : int,int Returns : int} mergeSort{ Params : int[],int[],int,int Returns : void} swap{ Params : int[],int,int Returns : void} mergePass{ Params : int,boolean Returns : int} close{ Params :  Returns : void} run{ Params :  Returns : int} merge{ Params : String[],String Returns : void} close{ Params :  Returns : void} run{ Params :  Returns : void} next{ Params :  Returns : boolean} lessThan{ Params : Object,Object Returns : boolean} merge{ Params :  Returns : void} close{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.io,Sorter,3,1,0,1,0,false,0 ,0 ,Writer Reader BufferedRandomAccessFile Sorter SortPass MergePass MergeFiles MergeStream MergeQueue ,FACTOR: int MEGABYTES: int comparator: WritableComparator inFile: String inFiles: String outFile: String memory: int factor: int keyClass: Class valClass: Class ,init{ Params : BufferedRandomAccessFile,Class,Class Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} close{ Params :  Returns : void} append{ Params : Writable,Writable Returns : void} append{ Params : byte[],int,int,int Returns : void} getLength{ Params :  Returns : long} init{ Params :  Returns : void} close{ Params :  Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} next{ Params : Writable Returns : boolean} next{ Params : Writable,Writable Returns : boolean} next{ Params : DataOutputBuffer Returns : int} seek{ Params : long Returns : void} getPosition{ Params :  Returns : long} toString{ Params :  Returns : String} read{ Params :  Returns : int} fill{ Params :  Returns : void} read{ Params : byte[],int,int Returns : int} read{ Params : byte[] Returns : int} write{ Params : int Returns : void} write{ Params : byte[],int,int Returns : void} write{ Params : byte[] Returns : void} flushBuffer{ Params :  Returns : void} seek{ Params : long Returns : void} getFilePointer{ Params :  Returns : long} close{ Params :  Returns : void} setFactor{ Params : int Returns : void} getFactor{ Params :  Returns : int} setMemory{ Params : int Returns : void} getMemory{ Params :  Returns : int} sort{ Params : String,String Returns : void} sortPass{ Params :  Returns : int} run{ Params :  Returns : int} close{ Params :  Returns : void} grow{ Params :  Returns : void} grow{ Params : int[],int Returns : int[]} flush{ Params : int,boolean Returns : void} sort{ Params : int Returns : void} compare{ Params : int,int Returns : int} mergeSort{ Params : int[],int[],int,int Returns : void} swap{ Params : int[],int,int Returns : void} mergePass{ Params : int,boolean Returns : int} close{ Params :  Returns : void} run{ Params :  Returns : int} merge{ Params : String[],String Returns : void} close{ Params :  Returns : void} run{ Params :  Returns : void} next{ Params :  Returns : boolean} lessThan{ Params : Object,Object Returns : boolean} merge{ Params :  Returns : void} close{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.io,SortPass,3,2,0,0,0,false,0 ,0 ,Writer Reader BufferedRandomAccessFile Sorter SortPass MergePass MergeFiles MergeStream MergeQueue ,limit: int buffer: DataOutputBuffer rawBuffer: byte starts: int pointers: int pointersCopy: int keyLengths: int lengths: int in: Reader out: BufferedRandomAccessFile ,init{ Params : BufferedRandomAccessFile,Class,Class Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} close{ Params :  Returns : void} append{ Params : Writable,Writable Returns : void} append{ Params : byte[],int,int,int Returns : void} getLength{ Params :  Returns : long} init{ Params :  Returns : void} close{ Params :  Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} next{ Params : Writable Returns : boolean} next{ Params : Writable,Writable Returns : boolean} next{ Params : DataOutputBuffer Returns : int} seek{ Params : long Returns : void} getPosition{ Params :  Returns : long} toString{ Params :  Returns : String} read{ Params :  Returns : int} fill{ Params :  Returns : void} read{ Params : byte[],int,int Returns : int} read{ Params : byte[] Returns : int} write{ Params : int Returns : void} write{ Params : byte[],int,int Returns : void} write{ Params : byte[] Returns : void} flushBuffer{ Params :  Returns : void} seek{ Params : long Returns : void} getFilePointer{ Params :  Returns : long} close{ Params :  Returns : void} setFactor{ Params : int Returns : void} getFactor{ Params :  Returns : int} setMemory{ Params : int Returns : void} getMemory{ Params :  Returns : int} sort{ Params : String,String Returns : void} sortPass{ Params :  Returns : int} run{ Params :  Returns : int} close{ Params :  Returns : void} grow{ Params :  Returns : void} grow{ Params : int[],int Returns : int[]} flush{ Params : int,boolean Returns : void} sort{ Params : int Returns : void} compare{ Params : int,int Returns : int} mergeSort{ Params : int[],int[],int,int Returns : void} swap{ Params : int[],int,int Returns : void} mergePass{ Params : int,boolean Returns : int} close{ Params :  Returns : void} run{ Params :  Returns : int} merge{ Params : String[],String Returns : void} close{ Params :  Returns : void} run{ Params :  Returns : void} next{ Params :  Returns : boolean} lessThan{ Params : Object,Object Returns : boolean} merge{ Params :  Returns : void} close{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.io,MergePass,3,2,0,0,0,false,0 ,0 ,Writer Reader BufferedRandomAccessFile Sorter SortPass MergePass MergeFiles MergeStream MergeQueue ,pass: int last: boolean queue: MergeQueue in: RandomAccessFile inName: String ,init{ Params : BufferedRandomAccessFile,Class,Class Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} close{ Params :  Returns : void} append{ Params : Writable,Writable Returns : void} append{ Params : byte[],int,int,int Returns : void} getLength{ Params :  Returns : long} init{ Params :  Returns : void} close{ Params :  Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} next{ Params : Writable Returns : boolean} next{ Params : Writable,Writable Returns : boolean} next{ Params : DataOutputBuffer Returns : int} seek{ Params : long Returns : void} getPosition{ Params :  Returns : long} toString{ Params :  Returns : String} read{ Params :  Returns : int} fill{ Params :  Returns : void} read{ Params : byte[],int,int Returns : int} read{ Params : byte[] Returns : int} write{ Params : int Returns : void} write{ Params : byte[],int,int Returns : void} write{ Params : byte[] Returns : void} flushBuffer{ Params :  Returns : void} seek{ Params : long Returns : void} getFilePointer{ Params :  Returns : long} close{ Params :  Returns : void} setFactor{ Params : int Returns : void} getFactor{ Params :  Returns : int} setMemory{ Params : int Returns : void} getMemory{ Params :  Returns : int} sort{ Params : String,String Returns : void} sortPass{ Params :  Returns : int} run{ Params :  Returns : int} close{ Params :  Returns : void} grow{ Params :  Returns : void} grow{ Params : int[],int Returns : int[]} flush{ Params : int,boolean Returns : void} sort{ Params : int Returns : void} compare{ Params : int,int Returns : int} mergeSort{ Params : int[],int[],int,int Returns : void} swap{ Params : int[],int,int Returns : void} mergePass{ Params : int,boolean Returns : int} close{ Params :  Returns : void} run{ Params :  Returns : int} merge{ Params : String[],String Returns : void} close{ Params :  Returns : void} run{ Params :  Returns : void} next{ Params :  Returns : boolean} lessThan{ Params : Object,Object Returns : boolean} merge{ Params :  Returns : void} close{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.io,MergeFiles,3,2,0,0,0,false,0 ,0 ,Writer Reader BufferedRandomAccessFile Sorter SortPass MergePass MergeFiles MergeStream MergeQueue ,queue: MergeQueue ,init{ Params : BufferedRandomAccessFile,Class,Class Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} close{ Params :  Returns : void} append{ Params : Writable,Writable Returns : void} append{ Params : byte[],int,int,int Returns : void} getLength{ Params :  Returns : long} init{ Params :  Returns : void} close{ Params :  Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} next{ Params : Writable Returns : boolean} next{ Params : Writable,Writable Returns : boolean} next{ Params : DataOutputBuffer Returns : int} seek{ Params : long Returns : void} getPosition{ Params :  Returns : long} toString{ Params :  Returns : String} read{ Params :  Returns : int} fill{ Params :  Returns : void} read{ Params : byte[],int,int Returns : int} read{ Params : byte[] Returns : int} write{ Params : int Returns : void} write{ Params : byte[],int,int Returns : void} write{ Params : byte[] Returns : void} flushBuffer{ Params :  Returns : void} seek{ Params : long Returns : void} getFilePointer{ Params :  Returns : long} close{ Params :  Returns : void} setFactor{ Params : int Returns : void} getFactor{ Params :  Returns : int} setMemory{ Params : int Returns : void} getMemory{ Params :  Returns : int} sort{ Params : String,String Returns : void} sortPass{ Params :  Returns : int} run{ Params :  Returns : int} close{ Params :  Returns : void} grow{ Params :  Returns : void} grow{ Params : int[],int Returns : int[]} flush{ Params : int,boolean Returns : void} sort{ Params : int Returns : void} compare{ Params : int,int Returns : int} mergeSort{ Params : int[],int[],int,int Returns : void} swap{ Params : int[],int,int Returns : void} mergePass{ Params : int,boolean Returns : int} close{ Params :  Returns : void} run{ Params :  Returns : int} merge{ Params : String[],String Returns : void} close{ Params :  Returns : void} run{ Params :  Returns : void} next{ Params :  Returns : boolean} lessThan{ Params : Object,Object Returns : boolean} merge{ Params :  Returns : void} close{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.io,MergeStream,3,2,0,0,0,false,0 ,0 ,Writer Reader BufferedRandomAccessFile Sorter SortPass MergePass MergeFiles MergeStream MergeQueue ,in: Reader buffer: DataOutputBuffer keyLength: int ,init{ Params : BufferedRandomAccessFile,Class,Class Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} close{ Params :  Returns : void} append{ Params : Writable,Writable Returns : void} append{ Params : byte[],int,int,int Returns : void} getLength{ Params :  Returns : long} init{ Params :  Returns : void} close{ Params :  Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} next{ Params : Writable Returns : boolean} next{ Params : Writable,Writable Returns : boolean} next{ Params : DataOutputBuffer Returns : int} seek{ Params : long Returns : void} getPosition{ Params :  Returns : long} toString{ Params :  Returns : String} read{ Params :  Returns : int} fill{ Params :  Returns : void} read{ Params : byte[],int,int Returns : int} read{ Params : byte[] Returns : int} write{ Params : int Returns : void} write{ Params : byte[],int,int Returns : void} write{ Params : byte[] Returns : void} flushBuffer{ Params :  Returns : void} seek{ Params : long Returns : void} getFilePointer{ Params :  Returns : long} close{ Params :  Returns : void} setFactor{ Params : int Returns : void} getFactor{ Params :  Returns : int} setMemory{ Params : int Returns : void} getMemory{ Params :  Returns : int} sort{ Params : String,String Returns : void} sortPass{ Params :  Returns : int} run{ Params :  Returns : int} close{ Params :  Returns : void} grow{ Params :  Returns : void} grow{ Params : int[],int Returns : int[]} flush{ Params : int,boolean Returns : void} sort{ Params : int Returns : void} compare{ Params : int,int Returns : int} mergeSort{ Params : int[],int[],int,int Returns : void} swap{ Params : int[],int,int Returns : void} mergePass{ Params : int,boolean Returns : int} close{ Params :  Returns : void} run{ Params :  Returns : int} merge{ Params : String[],String Returns : void} close{ Params :  Returns : void} run{ Params :  Returns : void} next{ Params :  Returns : boolean} lessThan{ Params : Object,Object Returns : boolean} merge{ Params :  Returns : void} close{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.io,MergeQueue,3,2,0,0,0,false,0 ,0 ,Writer Reader BufferedRandomAccessFile Sorter SortPass MergePass MergeFiles MergeStream MergeQueue ,out: BufferedRandomAccessFile ,init{ Params : BufferedRandomAccessFile,Class,Class Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} close{ Params :  Returns : void} append{ Params : Writable,Writable Returns : void} append{ Params : byte[],int,int,int Returns : void} getLength{ Params :  Returns : long} init{ Params :  Returns : void} close{ Params :  Returns : void} getKeyClass{ Params :  Returns : Class} getValueClass{ Params :  Returns : Class} next{ Params : Writable Returns : boolean} next{ Params : Writable,Writable Returns : boolean} next{ Params : DataOutputBuffer Returns : int} seek{ Params : long Returns : void} getPosition{ Params :  Returns : long} toString{ Params :  Returns : String} read{ Params :  Returns : int} fill{ Params :  Returns : void} read{ Params : byte[],int,int Returns : int} read{ Params : byte[] Returns : int} write{ Params : int Returns : void} write{ Params : byte[],int,int Returns : void} write{ Params : byte[] Returns : void} flushBuffer{ Params :  Returns : void} seek{ Params : long Returns : void} getFilePointer{ Params :  Returns : long} close{ Params :  Returns : void} setFactor{ Params : int Returns : void} getFactor{ Params :  Returns : int} setMemory{ Params : int Returns : void} getMemory{ Params :  Returns : int} sort{ Params : String,String Returns : void} sortPass{ Params :  Returns : int} run{ Params :  Returns : int} close{ Params :  Returns : void} grow{ Params :  Returns : void} grow{ Params : int[],int Returns : int[]} flush{ Params : int,boolean Returns : void} sort{ Params : int Returns : void} compare{ Params : int,int Returns : int} mergeSort{ Params : int[],int[],int,int Returns : void} swap{ Params : int[],int,int Returns : void} mergePass{ Params : int,boolean Returns : int} close{ Params :  Returns : void} run{ Params :  Returns : int} merge{ Params : String[],String Returns : void} close{ Params :  Returns : void} run{ Params :  Returns : void} next{ Params :  Returns : boolean} lessThan{ Params : Object,Object Returns : boolean} merge{ Params :  Returns : void} close{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.io,SetFile,1,1,0,0,0,false,MapFile ,0 ,Writer Reader ,,append{ Params : WritableComparable Returns : void} seek{ Params : WritableComparable Returns : boolean} next{ Params : WritableComparable Returns : boolean} get{ Params : WritableComparable Returns : WritableComparable} ,,,,
JHotDraw,net.nutch.io,Writer,3,1,0,1,0,false,MapFile ,0 ,Writer Reader ,,append{ Params : WritableComparable Returns : void} seek{ Params : WritableComparable Returns : boolean} next{ Params : WritableComparable Returns : boolean} get{ Params : WritableComparable Returns : WritableComparable} ,,,,
JHotDraw,net.nutch.io,Reader,3,1,0,1,0,false,MapFile ,0 ,Writer Reader ,,append{ Params : WritableComparable Returns : void} seek{ Params : WritableComparable Returns : boolean} next{ Params : WritableComparable Returns : boolean} get{ Params : WritableComparable Returns : WritableComparable} ,,,,
JHotDraw,net.nutch.io,UTF8,1,1,0,0,0,false,0 ,WritableComparable ,Comparator ,LOG: Logger OBUF: DataOutputBuffer IBUF: DataInputBuffer bytes: byte length: int ,getBytes{ Params :  Returns : byte[]} getLength{ Params :  Returns : int} set{ Params : String Returns : void} set{ Params : UTF8 Returns : void} readFields{ Params : DataInput Returns : void} skip{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} compareTo{ Params : Object Returns : int} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} compare{ Params : byte[],int,int,byte[],int,int Returns : int} getBytes{ Params : String Returns : byte[]} readString{ Params : DataInput Returns : String} readChars{ Params : DataInput,StringBuffer,int Returns : void} writeString{ Params : DataOutput,String Returns : int} utf8Length{ Params : String Returns : int} writeChars{ Params : DataOutput,String,int,int Returns : void} ,,skip getBytes readString readChars writeString utf8Length writeChars ,,
JHotDraw,net.nutch.io,Comparator,3,1,0,1,0,false,0 ,WritableComparable ,Comparator ,,getBytes{ Params :  Returns : byte[]} getLength{ Params :  Returns : int} set{ Params : String Returns : void} set{ Params : UTF8 Returns : void} readFields{ Params : DataInput Returns : void} skip{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} compareTo{ Params : Object Returns : int} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} compare{ Params : byte[],int,int,byte[],int,int Returns : int} getBytes{ Params : String Returns : byte[]} readString{ Params : DataInput Returns : String} readChars{ Params : DataInput,StringBuffer,int Returns : void} writeString{ Params : DataOutput,String Returns : int} utf8Length{ Params : String Returns : int} writeChars{ Params : DataOutput,String,int,int Returns : void} ,,skip getBytes readString readChars writeString utf8Length writeChars ,,
JHotDraw,net.nutch.io,VersionedWritable,1,1,1,0,0,false,0 ,Writable ,0 ,,getVersion{ Params :  Returns : byte} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} ,,,,getVersion 
JHotDraw,net.nutch.io,VersionMismatchException,1,1,0,0,0,false,IOException ,0 ,0 ,expectedVersion: byte foundVersion: byte ,toString{ Params :  Returns : String} ,,,,
JHotDraw,net.nutch.io,Writable,2,1,0,0,0,true,IOException ,0 ,0 ,,write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} ,,,,
JHotDraw,net.nutch.io,WritableComparable,2,1,0,0,0,true,IOException ,0 ,0 ,,,,,,
JHotDraw,net.nutch.io,WritableComparator,1,1,0,0,0,false,0 ,0 ,0 ,buffer: DataInputBuffer keyClass: Class key1: WritableComparable key2: WritableComparable ,getKeyClass{ Params :  Returns : Class} newKey{ Params :  Returns : WritableComparable} compare{ Params : byte[],int,int,byte[],int,int Returns : int} compare{ Params : WritableComparable,WritableComparable Returns : int} compareBytes{ Params : byte[],int,int,byte[],int,int Returns : int} readUnsignedShort{ Params : byte[],int Returns : int} readInt{ Params : byte[],int Returns : int} readFloat{ Params : byte[],int Returns : float} readLong{ Params : byte[],int Returns : long} ,,compareBytes readUnsignedShort readInt readFloat readLong ,,
JHotDraw,net.nutch.io,WritableName,1,1,0,0,0,false,0 ,0 ,0 ,NAME_TO_CLASS: HashMap CLASS_TO_NAME: HashMap ,setName{ Params : Class,String Returns : void} addName{ Params : Class,String Returns : void} getName{ Params : Class Returns : String} getClass{ Params : String Returns : Class} ,,setName addName getName getClass ,,
JHotDraw,net.nutch.io,WritableUtils,1,1,0,0,1,false,0 ,0 ,0 ,,readCompressedByteArray{ Params : DataInput Returns : byte[]} writeCompressedByteArray{ Params : DataOutput,byte[] Returns : int} readCompressedString{ Params : DataInput Returns : String} writeCompressedString{ Params : DataOutput,String Returns : int} writeString{ Params : DataOutput,String Returns : void} readString{ Params : DataInput Returns : String} writeStringArray{ Params : DataOutput,String[] Returns : void} readStringArray{ Params : DataInput Returns : String[]} displayByteArray{ Params : byte[] Returns : void} ,,readCompressedByteArray writeCompressedByteArray readCompressedString writeCompressedString writeString readString writeStringArray readStringArray displayByteArray ,,
JHotDraw,net.nutch.ipc,Client,1,1,0,0,0,false,0 ,0 ,Call Connection ParallelCall ParallelResults ,LOG: Logger connections: Hashtable valueClass: Class timeout: int counter: int running: boolean ,callComplete{ Params :  Returns : void} run{ Params :  Returns : void} sendParam{ Params : Call Returns : void} close{ Params :  Returns : void} callComplete{ Params :  Returns : void} callComplete{ Params : ParallelCall Returns : void} stop{ Params :  Returns : void} setTimeout{ Params : int Returns : void} call{ Params : Writable,InetSocketAddress Returns : Writable} call{ Params : Writable[],InetSocketAddress[] Returns : Writable[]} getConnection{ Params : InetSocketAddress Returns : Connection} makeValue{ Params :  Returns : Writable} ,,,,
JHotDraw,net.nutch.ipc,Call,3,2,0,0,0,false,0 ,0 ,Call Connection ParallelCall ParallelResults ,id: int param: Writable value: Writable error: String ,callComplete{ Params :  Returns : void} run{ Params :  Returns : void} sendParam{ Params : Call Returns : void} close{ Params :  Returns : void} callComplete{ Params :  Returns : void} callComplete{ Params : ParallelCall Returns : void} stop{ Params :  Returns : void} setTimeout{ Params : int Returns : void} call{ Params : Writable,InetSocketAddress Returns : Writable} call{ Params : Writable[],InetSocketAddress[] Returns : Writable[]} getConnection{ Params : InetSocketAddress Returns : Connection} makeValue{ Params :  Returns : Writable} ,,,,
JHotDraw,net.nutch.ipc,Connection,3,2,0,0,0,false,0 ,0 ,Call Connection ParallelCall ParallelResults ,address: InetSocketAddress socket: Socket in: DataInputStream out: DataOutputStream calls: Hashtable ,callComplete{ Params :  Returns : void} run{ Params :  Returns : void} sendParam{ Params : Call Returns : void} close{ Params :  Returns : void} callComplete{ Params :  Returns : void} callComplete{ Params : ParallelCall Returns : void} stop{ Params :  Returns : void} setTimeout{ Params : int Returns : void} call{ Params : Writable,InetSocketAddress Returns : Writable} call{ Params : Writable[],InetSocketAddress[] Returns : Writable[]} getConnection{ Params : InetSocketAddress Returns : Connection} makeValue{ Params :  Returns : Writable} ,,,,
JHotDraw,net.nutch.ipc,ParallelCall,3,2,0,0,0,false,0 ,0 ,Call Connection ParallelCall ParallelResults ,results: ParallelResults index: int ,callComplete{ Params :  Returns : void} run{ Params :  Returns : void} sendParam{ Params : Call Returns : void} close{ Params :  Returns : void} callComplete{ Params :  Returns : void} callComplete{ Params : ParallelCall Returns : void} stop{ Params :  Returns : void} setTimeout{ Params : int Returns : void} call{ Params : Writable,InetSocketAddress Returns : Writable} call{ Params : Writable[],InetSocketAddress[] Returns : Writable[]} getConnection{ Params : InetSocketAddress Returns : Connection} makeValue{ Params :  Returns : Writable} ,,,,
JHotDraw,net.nutch.ipc,ParallelResults,3,2,0,1,0,false,0 ,0 ,Call Connection ParallelCall ParallelResults ,values: Writable size: int count: int ,callComplete{ Params :  Returns : void} run{ Params :  Returns : void} sendParam{ Params : Call Returns : void} close{ Params :  Returns : void} callComplete{ Params :  Returns : void} callComplete{ Params : ParallelCall Returns : void} stop{ Params :  Returns : void} setTimeout{ Params : int Returns : void} call{ Params : Writable,InetSocketAddress Returns : Writable} call{ Params : Writable[],InetSocketAddress[] Returns : Writable[]} getConnection{ Params : InetSocketAddress Returns : Connection} makeValue{ Params :  Returns : Writable} ,,,,
JHotDraw,net.nutch.ipc,Server,1,1,1,0,0,false,0 ,0 ,Call Listener Connection Handler ,LOG: Logger port: int handlerCount: int maxQueuedCalls: int paramClass: Class timeout: int running: boolean callQueue: LinkedList callDequeued: Object ,run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} setTimeout{ Params : int Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} join{ Params :  Returns : void} call{ Params : Writable Returns : Writable} makeParam{ Params :  Returns : Writable} ,,,,call 
JHotDraw,net.nutch.ipc,Call,3,2,0,1,0,false,0 ,0 ,Call Listener Connection Handler ,id: int param: Writable connection: Connection ,run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} setTimeout{ Params : int Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} join{ Params :  Returns : void} call{ Params : Writable Returns : Writable} makeParam{ Params :  Returns : Writable} ,,,,call 
JHotDraw,net.nutch.ipc,Listener,3,2,0,0,0,false,0 ,0 ,Call Listener Connection Handler ,socket: ServerSocket ,run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} setTimeout{ Params : int Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} join{ Params :  Returns : void} call{ Params : Writable Returns : Writable} makeParam{ Params :  Returns : Writable} ,,,,call 
JHotDraw,net.nutch.ipc,Connection,3,2,0,0,0,false,0 ,0 ,Call Listener Connection Handler ,socket: Socket in: DataInputStream out: DataOutputStream ,run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} setTimeout{ Params : int Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} join{ Params :  Returns : void} call{ Params : Writable Returns : Writable} makeParam{ Params :  Returns : Writable} ,,,,call 
JHotDraw,net.nutch.ipc,Handler,3,2,0,0,0,false,0 ,0 ,Call Listener Connection Handler ,,run{ Params :  Returns : void} run{ Params :  Returns : void} run{ Params :  Returns : void} setTimeout{ Params : int Returns : void} start{ Params :  Returns : void} stop{ Params :  Returns : void} join{ Params :  Returns : void} call{ Params : Writable Returns : Writable} makeParam{ Params :  Returns : Writable} ,,,,call 
JHotDraw,net.nutch.linkdb,LinkAnalysisEntry,1,1,0,0,0,false,VersionedWritable ,0 ,0 ,VERSION: byte score: float ,getVersion{ Params :  Returns : byte} setScore{ Params : float Returns : void} readFields{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : LinkAnalysisEntry} getScore{ Params :  Returns : float} equals{ Params : Object Returns : boolean} ,,read ,,
JHotDraw,net.nutch.net,PrefixURLFilter,1,1,0,0,0,false,0 ,URLFilter ,0 ,LOG: Logger trie: TrieStringMatcher ,filter{ Params : String Returns : String} readConfigurationFile{ Params : Reader Returns : TrieStringMatcher} main{ Params : String[] Returns : void} ,,readConfigurationFile main ,,
JHotDraw,net.nutch.net.protocols.ftp,Client,1,1,0,0,0,false,FTP ,0 ,0 ,__dataTimeout: int __passivePort: int __passiveHost: String __fileType: int __remoteVerificationEnabled: boolean __entryParser: FTPFileEntryParser __systemName: String ,__initDefaults{ Params :  Returns : void} __parsePassiveModeReply{ Params : String Returns : void} __openPassiveDataConnection{ Params : int,String Returns : Socket} setDataTimeout{ Params : int Returns : void} disconnect{ Params :  Returns : void} setRemoteVerificationEnabled{ Params : boolean Returns : void} isRemoteVerificationEnabled{ Params :  Returns : boolean} login{ Params : String,String Returns : boolean} logout{ Params :  Returns : boolean} retrieveList{ Params : String,List,int,FTPFileEntryParser Returns : void} retrieveFile{ Params : String,OutputStream,int Returns : void} _notBadReply{ Params : int Returns : boolean} setFileType{ Params : int Returns : boolean} getSystemName{ Params :  Returns : String} sendNoOp{ Params :  Returns : boolean} ,,,,
JHotDraw,net.nutch.net.protocols.ftp,Ftp,1,1,0,0,0,false,0 ,0 ,0 ,LOG: Logger BUFFER_SIZE: int MAX_REDIRECTS: int timeout: int maxContentLength: int userName: String passWord: String serverTimeout: int renewalTime: long keepConnection: boolean followTalk: boolean client: Client parser: FTPFileEntryParser httpDateFormat: HttpDateFormat TYPE_MAP: MimetypesFileTypeMap ,setTimeout{ Params : int Returns : void} setMaxContentLength{ Params : int Returns : void} setFollowTalk{ Params : boolean Returns : void} setKeepConnection{ Params : boolean Returns : void} getRawResponse{ Params : URL Returns : Response} getRawResponse{ Params : URL,InetAddress,MiscHttpAccounting,int Returns : Response} getResponse{ Params : URL Returns : Response} finalize{ Params :  Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.net.protocols.ftp,FtpException,1,1,0,0,0,false,ProtocolException ,0 ,0 ,,,,,,
JHotDraw,net.nutch.net.protocols.ftp,FtpExceptionBadSystResponse,1,1,0,0,0,false,FtpException ,0 ,0 ,,,,,,
JHotDraw,net.nutch.net.protocols.ftp,FtpExceptionCanNotHaveDataConnection,1,1,0,0,0,false,FtpException ,0 ,0 ,,,,,,
JHotDraw,net.nutch.net.protocols.ftp,FtpExceptionControlClosedByForcedDataClose,1,1,0,0,0,false,FtpException ,0 ,0 ,,,,,,
JHotDraw,net.nutch.net.protocols.ftp,FtpExceptionUnknownForcedDataClose,1,1,0,0,0,false,FtpException ,0 ,0 ,,,,,,
JHotDraw,net.nutch.net.protocols.ftp,FtpResponse,1,1,0,0,0,false,0 ,Response ,0 ,url: URL ftp: Ftp code: int numContinues: int headers: Map content: byte compressedContent: byte httpAccounting: MiscHttpAccounting ,getUrl{ Params :  Returns : URL} getCode{ Params :  Returns : int} getHeader{ Params : String Returns : String} getContent{ Params :  Returns : byte[]} getCompressedContent{ Params :  Returns : byte[]} getNumContinues{ Params :  Returns : int} getFileAsHttpResponse{ Params : String Returns : void} getDirAsHttpResponse{ Params : String Returns : void} list2html{ Params : List,String,boolean Returns : byte[]} ,,,,
JHotDraw,net.nutch.net.protocols.ftp,PrintCommandListener,1,1,0,0,0,false,0 ,ProtocolCommandListener ,0 ,__logger: Logger ,protocolCommandSent{ Params : ProtocolCommandEvent Returns : void} protocolReplyReceived{ Params : ProtocolCommandEvent Returns : void} __logIt{ Params : ProtocolCommandEvent Returns : void} ,,,,
JHotDraw,net.nutch.net.protocols.http,BadHeaderLineException,1,1,0,0,0,false,HttpException ,0 ,0 ,,,,,,
JHotDraw,net.nutch.net.protocols.http,BadStatusLineException,1,1,0,0,0,false,HttpException ,0 ,0 ,,,,,,
JHotDraw,net.nutch.net.protocols.http,ChunkEOFException,1,1,0,0,0,false,HttpVersionException ,0 ,0 ,,,,,,
JHotDraw,net.nutch.net.protocols.http,ChunkLengthParseException,1,1,0,0,0,false,HttpVersionException ,0 ,0 ,,,,,,
JHotDraw,net.nutch.net.protocols.http,ContentLengthParseException,1,1,0,0,0,false,HttpException ,0 ,0 ,,,,,,
JHotDraw,net.nutch.net.protocols.http,DecompressionException,1,1,0,0,0,false,HttpVersionException ,0 ,0 ,,,,,,
JHotDraw,net.nutch.net.protocols.http,Http,1,1,0,0,0,false,0 ,0 ,0 ,LOG: Logger DEFAULT_PORT: int CODE_OK: int BUFFER_SIZE: int MAX_REDIRECTS: int HTTP_VER_NOTSET: int HTTP_VER_1_0: int HTTP_VER_1_1: int HTTP_VER_LATEST: int proxyHost: String proxyPort: int proxyenabled: boolean timeout: int maxContentLength: int agentString: String agentEmail: String ,minHttpVersion{ Params : int,int Returns : int} setTimeout{ Params : int Returns : void} setMaxContentLength{ Params : int Returns : void} setAgentString{ Params : String Returns : void} setAgentEmail{ Params : String Returns : void} getRawResponse{ Params : URL,InetAddress,MiscHttpAccounting,int Returns : Response} getResponse{ Params : URL Returns : Response} readLine{ Params : PushbackInputStream,StringBuffer,boolean Returns : int} peek{ Params : PushbackInputStream Returns : int} main{ Params : String[] Returns : void} ,,minHttpVersion readLine peek main ,,
JHotDraw,net.nutch.net.protocols.http,HttpError,1,1,0,0,0,false,HttpException ,0 ,0 ,code: int ,getCode{ Params : int Returns : int} ,,,,
JHotDraw,net.nutch.net.protocols.http,HttpException,1,1,0,0,0,false,ProtocolException ,0 ,0 ,,,,,,
JHotDraw,net.nutch.net.protocols.http,HttpResponse,1,1,0,0,0,false,0 ,Response ,0 ,url: URL http: Http code: int numContinues: int headers: Map content: byte compressedContent: byte httpAccounting: MiscHttpAccounting ,getUrl{ Params :  Returns : URL} getCode{ Params :  Returns : int} getHeader{ Params : String Returns : String} getContent{ Params :  Returns : byte[]} getCompressedContent{ Params :  Returns : byte[]} getNumContinues{ Params :  Returns : int} readPlainContent{ Params : InputStream Returns : void} readChunkedContent{ Params : PushbackInputStream,StringBuffer Returns : void} parseStatusLine{ Params : PushbackInputStream,StringBuffer Returns : int} processHeaderLine{ Params : StringBuffer,TreeMap Returns : void} parseHeaders{ Params : PushbackInputStream,StringBuffer Returns : Map} parseHeaders{ Params : PushbackInputStream,StringBuffer,TreeMap Returns : Map} ,,,,
JHotDraw,net.nutch.net.protocols.http,HttpVersionException,1,1,1,0,0,false,HttpException ,0 ,0 ,,,,,,
JHotDraw,net.nutch.net.protocols.http,MiscHttpAccounting,1,1,0,0,0,false,0 ,0 ,0 ,bytesRead: long bytesSent: long httpVersion: int addr: InetAddress ,getBytesRead{ Params :  Returns : long} incrementBytesRead{ Params : long Returns : void} getBytesSent{ Params :  Returns : long} incrementBytesSent{ Params : long Returns : void} getServHttpVersion{ Params :  Returns : int} setServHttpVersion{ Params : int Returns : void} getAddr{ Params :  Returns : InetAddress} setAddr{ Params : InetAddress Returns : void} reset{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.net.protocols,HttpDateFormat,1,1,0,0,0,false,0 ,0 ,0 ,format: SimpleDateFormat ,toString{ Params : Date Returns : String} toString{ Params : Calendar Returns : String} toString{ Params : long Returns : String} toDate{ Params : String Returns : Date} toLong{ Params : String Returns : long} main{ Params : String[] Returns : void} ,,toString toString toString toDate toLong main ,,
JHotDraw,net.nutch.net.protocols,ProtocolException,1,1,0,0,0,false,Exception ,Serializable ,0 ,,,,,,
JHotDraw,net.nutch.net.protocols,Response,2,1,0,0,0,true,Exception ,Serializable ,0 ,,getUrl{ Params :  Returns : URL} getCode{ Params :  Returns : int} getHeader{ Params : String Returns : String} getContent{ Params :  Returns : byte[]} getCompressedContent{ Params :  Returns : byte[]} getNumContinues{ Params :  Returns : int} ,,,,
JHotDraw,net.nutch.net,RegexURLFilter,1,1,0,0,0,false,0 ,URLFilter ,Rule ,LOG: Logger rules: List matcher: PatternMatcher ,filter{ Params : String Returns : String} readConfigurationFile{ Params : Reader Returns : List} main{ Params : String[] Returns : void} ,,readConfigurationFile main ,,
JHotDraw,net.nutch.net,Rule,3,2,0,1,0,false,0 ,URLFilter ,Rule ,pattern: Perl5Pattern sign: boolean regex: String ,filter{ Params : String Returns : String} readConfigurationFile{ Params : Reader Returns : List} main{ Params : String[] Returns : void} ,,readConfigurationFile main ,,
JHotDraw,net.nutch.net,URLFilter,2,1,0,0,0,true,0 ,URLFilter ,0 ,,filter{ Params : String Returns : String} ,,,,
JHotDraw,net.nutch.net,URLFilterFactory,1,1,0,0,0,false,0 ,0 ,0 ,LOG: Logger URLFILTER_CLASS: String filter: URLFilter ,getFilter{ Params :  Returns : URLFilter} ,,getFilter ,,
JHotDraw,net.nutch.net,UrlNormalizer,1,1,0,0,0,false,0 ,0 ,0 ,LOG: Logger ,normalize{ Params : String Returns : String} ,,normalize ,,
JHotDraw,net.nutch.pagedb,FetchListEntry,1,1,0,0,0,false,0 ,Writable Cloneable ,0 ,DIR_NAME: String CUR_VERSION: byte fetch: boolean page: Page anchors: String ,readFields{ Params : DataInput Returns : void} read{ Params : DataInput Returns : FetchListEntry} write{ Params : DataOutput Returns : void} getFetch{ Params :  Returns : boolean} getPage{ Params :  Returns : Page} getAnchors{ Params :  Returns : String[]} equals{ Params : Object Returns : boolean} clone{ Params :  Returns : Object} toString{ Params :  Returns : String} main{ Params : String[] Returns : void} ,,read main ,,
JHotDraw,net.nutch.plugin,CoreExtensionPoints,1,1,0,0,0,false,0 ,0 ,0 ,EXTRACTOR_X_POINT_ID: String ,getCoreExtensionPoints{ Params :  Returns : String[]} ,,getCoreExtensionPoints ,,
JHotDraw,net.nutch.plugin,Extension,1,1,0,0,0,false,0 ,0 ,0 ,fDescriptor: PluginDescriptor fId: String fTargetPoint: String fClazz: String fAttributes: HashMap ,setExtensionPoint{ Params : String Returns : void} getAttribute{ Params : String Returns : String} getClazz{ Params :  Returns : String} getId{ Params :  Returns : String} addAttribute{ Params : String,String Returns : void} setClazz{ Params : String Returns : void} setId{ Params : String Returns : void} getTargetPoint{ Params :  Returns : String} getExtensionInstance{ Params :  Returns : Object} getDiscriptor{ Params :  Returns : PluginDescriptor} setDiscriptor{ Params : PluginDescriptor Returns : void} ,,,,
JHotDraw,net.nutch.plugin,ExtensionPoint,1,1,0,0,0,false,0 ,0 ,0 ,ftId: String fName: String fSchema: String fExtensions: ArrayList ,getId{ Params :  Returns : String} getName{ Params :  Returns : String} getSchema{ Params :  Returns : String} setId{ Params : String Returns : void} setName{ Params : String Returns : void} setSchema{ Params : String Returns : void} addExtension{ Params : Extension Returns : void} getExtentens{ Params :  Returns : Extension[]} ,,,,
JHotDraw,net.nutch.plugin,Plugin,1,1,1,0,0,false,0 ,0 ,0 ,fDescriptor: PluginDescriptor ,startUp{ Params :  Returns : void} shutDown{ Params :  Returns : void} getDescriptor{ Params :  Returns : PluginDescriptor} setDescriptor{ Params : PluginDescriptor Returns : void} finalize{ Params :  Returns : void} ,,,,startUp shutDown 
JHotDraw,net.nutch.plugin,PluginClassLoader,1,1,0,0,0,false,URLClassLoader ,0 ,0 ,,,,,,
JHotDraw,net.nutch.plugin,PluginDescriptor,1,1,0,0,0,false,0 ,0 ,0 ,fPluginPath: String fPluginClass: String fPluginId: String fVersion: String fName: String fProviderName: String fMessages: HashMap fExtensionPoints: ArrayList fDependencies: ArrayList fExportedLibs: ArrayList fNotExportedLibs: ArrayList fExtensions: ArrayList fClassLoader: PluginClassLoader LOG: Logger ,setPath{ Params : String Returns : void} getName{ Params :  Returns : String} setProvidername{ Params : String Returns : void} setName{ Params : String Returns : void} setVersion{ Params : String Returns : void} getPluginClass{ Params :  Returns : String} getPluginId{ Params :  Returns : String} getExtensions{ Params :  Returns : Extension[]} addExtension{ Params : Extension Returns : void} setPluginClass{ Params : String Returns : void} setPluginId{ Params : String Returns : void} addExtensionPoint{ Params : ExtensionPoint Returns : void} getExtenstionPoints{ Params :  Returns : ExtensionPoint[]} getDependencies{ Params :  Returns : String[]} addDependency{ Params : String Returns : void} addExportedLibRelative{ Params : String Returns : void} getPluginPath{ Params :  Returns : String} getExportedLibUrls{ Params :  Returns : URL[]} addNotExportedLibRelative{ Params : String Returns : void} getNotExportedLibUrls{ Params :  Returns : URL[]} getClassLoader{ Params :  Returns : PluginClassLoader} getDependencyLibs{ Params :  Returns : ArrayList} collectLibs{ Params : ArrayList,PluginDescriptor Returns : void} getResourceString{ Params : String,Locale Returns : String} ,,,,
JHotDraw,net.nutch.plugin,PluginManifestParser,1,1,0,0,0,false,0 ,0 ,0 ,LOG: Logger ,parsePluginFolder{ Params :  Returns : ArrayList} parseManifestFile{ Params : String Returns : PluginDescriptor} parseXML{ Params : URL Returns : Document} parsePlugin{ Params : Document,String Returns : PluginDescriptor} parseLibraries{ Params : Element,PluginDescriptor Returns : void} parseExtensionPoints{ Params : Element,PluginDescriptor Returns : void} parseExtension{ Params : Element,PluginDescriptor Returns : void} ,,parsePluginFolder parseManifestFile parseXML parsePlugin parseLibraries parseExtensionPoints parseExtension ,,
JHotDraw,net.nutch.plugin,PluginRepository,1,1,0,0,0,false,0 ,0 ,0 ,fInstance: PluginRepository fRegisteredPlugins: ArrayList fExtensionPoints: HashMap fActivatedPlugins: HashMap LOG: Logger ,installCoreExtensionPoints{ Params :  Returns : void} installExtensions{ Params : ArrayList Returns : void} getDependencyCheckedPlugins{ Params : ArrayList Returns : ArrayList} dependencyIsAvailabel{ Params : String,ArrayList Returns : boolean} getInstance{ Params :  Returns : PluginRepository} getPluginDescriptors{ Params :  Returns : PluginDescriptor[]} getPluginDescriptor{ Params : String Returns : PluginDescriptor} getExtensionPoint{ Params : String Returns : ExtensionPoint} getPluginInstance{ Params : PluginDescriptor Returns : Plugin} finalize{ Params :  Returns : void} shotDownActivatedPlugins{ Params :  Returns : void} ,,getInstance ,,
JHotDraw,net.nutch.plugin,PluginRuntimeException,1,1,0,0,0,false,Exception ,0 ,0 ,,,,,,
JHotDraw,net.nutch.quality.dynamic,PageDescription,1,1,0,0,0,false,0 ,PageDescriptionConstants ,0 ,values: HashMap inputs: ArrayList interprets: ArrayList token_source: PageDescriptionTokenManager jj_input_stream: SimpleCharStream token: Token jj_ntk: int jj_gen: int jj_la1: int jj_la1_0: int jj_expentries: java.util.Vector jj_expentry: int jj_kind: int ,getValues{ Params :  Returns : HashMap} getInputs{ Params :  Returns : ArrayList} getInterprets{ Params :  Returns : ArrayList} main{ Params : String[] Returns : void} parse{ Params :  Returns : void} param{ Params :  Returns : void} element{ Params :  Returns : void} inputItem{ Params : HashMap Returns : void} matchItem{ Params : HashMap Returns : void} value{ Params :  Returns : String} ReInit{ Params : java.io.InputStream Returns : void} ReInit{ Params : java.io.Reader Returns : void} ReInit{ Params : PageDescriptionTokenManager Returns : void} jj_consume_token{ Params : int Returns : Token} getNextToken{ Params :  Returns : Token} getToken{ Params : int Returns : Token} jj_ntk{ Params :  Returns : int} generateParseException{ Params :  Returns : ParseException} enable_tracing{ Params :  Returns : void} disable_tracing{ Params :  Returns : void} ,,main ,parse param element inputItem matchItem value jj_consume_token getNextToken getToken jj_ntk generateParseException enable_tracing disable_tracing ,
JHotDraw,net.nutch.quality.dynamic,PageDescriptionConstants,2,1,0,0,0,true,0 ,PageDescriptionConstants ,0 ,EOF: int KEYWORD: int EQUALS: int QUOTED_VALUE: int UNQUOTED_VALUE: int DEFAULT: int AFTER_EQUALS: int tokenImage: String ,,,,,
JHotDraw,net.nutch.quality.dynamic,PageDescriptionTokenManager,1,1,0,0,0,false,0 ,PageDescriptionConstants ,0 ,debugStream: java.io.PrintStream jjbitVec0: long jjnextStates: int jjstrLiteralImages: String lexStateNames: String jjnewLexState: int jjtoToken: long jjtoSkip: long input_stream: SimpleCharStream jjrounds: int jjstateSet: int curChar: char curLexState: int defaultLexState: int jjnewStateCnt: int jjround: int jjmatchedPos: int jjmatchedKind: int ,setDebugStream{ Params : java.io.PrintStream Returns : void} jjStopStringLiteralDfa_0{ Params : int,long Returns : int} jjStartNfa_0{ Params : int,long Returns : int} jjStopAtPos{ Params : int,int Returns : int} jjStartNfaWithStates_0{ Params : int,int,int Returns : int} jjMoveStringLiteralDfa0_0{ Params :  Returns : int} jjMoveStringLiteralDfa1_0{ Params : long Returns : int} jjMoveStringLiteralDfa2_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa3_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa4_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa5_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa6_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa7_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa8_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa9_0{ Params : long,long Returns : int} jjCheckNAdd{ Params : int Returns : void} jjAddStates{ Params : int,int Returns : void} jjCheckNAddTwoStates{ Params : int,int Returns : void} jjCheckNAddStates{ Params : int,int Returns : void} jjCheckNAddStates{ Params : int Returns : void} jjMoveNfa_0{ Params : int,int Returns : int} jjStopStringLiteralDfa_1{ Params : int,long Returns : int} jjStartNfa_1{ Params : int,long Returns : int} jjStartNfaWithStates_1{ Params : int,int,int Returns : int} jjMoveStringLiteralDfa0_1{ Params :  Returns : int} jjMoveNfa_1{ Params : int,int Returns : int} ReInit{ Params : SimpleCharStream Returns : void} ReInitRounds{ Params :  Returns : void} ReInit{ Params : SimpleCharStream,int Returns : void} SwitchTo{ Params : int Returns : void} jjFillToken{ Params :  Returns : Token} getNextToken{ Params :  Returns : Token} ,,,jjStopStringLiteralDfa_0 jjStartNfa_0 jjStopAtPos jjStartNfaWithStates_0 jjMoveStringLiteralDfa0_0 jjMoveStringLiteralDfa1_0 jjMoveStringLiteralDfa2_0 jjMoveStringLiteralDfa3_0 jjMoveStringLiteralDfa4_0 jjMoveStringLiteralDfa5_0 jjMoveStringLiteralDfa6_0 jjMoveStringLiteralDfa7_0 jjMoveStringLiteralDfa8_0 jjMoveStringLiteralDfa9_0 jjCheckNAdd jjAddStates jjCheckNAddTwoStates jjCheckNAddStates jjCheckNAddStates jjMoveNfa_0 jjStopStringLiteralDfa_1 jjStartNfa_1 jjStartNfaWithStates_1 jjMoveStringLiteralDfa0_1 jjMoveNfa_1 ReInitRounds jjFillToken getNextToken ,
JHotDraw,net.nutch.quality.dynamic,ParseException,1,1,0,0,0,false,Exception ,0 ,0 ,specialConstructor: boolean currentToken: Token expectedTokenSequences: int tokenImage: String eol: String ,getMessage{ Params :  Returns : String} add_escapes{ Params : String Returns : String} ,,,,
JHotDraw,net.nutch.quality.dynamic,SimpleCharStream,1,1,0,0,1,false,0 ,0 ,0 ,staticFlag: boolean bufsize: int available: int tokenBegin: int bufpos: int bufline: int bufcolumn: int column: int line: int prevCharIsCR: boolean prevCharIsLF: boolean inputStream: java.io.Reader buffer: char maxNextCharInd: int inBuf: int ,ExpandBuff{ Params : boolean Returns : void} FillBuff{ Params :  Returns : void} BeginToken{ Params :  Returns : char} UpdateLineColumn{ Params : char Returns : void} readChar{ Params :  Returns : char} getColumn{ Params :  Returns : int} getLine{ Params :  Returns : int} getEndColumn{ Params :  Returns : int} getEndLine{ Params :  Returns : int} getBeginColumn{ Params :  Returns : int} getBeginLine{ Params :  Returns : int} backup{ Params : int Returns : void} ReInit{ Params : java.io.Reader,int,int,int Returns : void} ReInit{ Params : java.io.Reader,int,int Returns : void} ReInit{ Params : java.io.Reader Returns : void} ReInit{ Params : java.io.InputStream,int,int,int Returns : void} ReInit{ Params : java.io.InputStream Returns : void} ReInit{ Params : java.io.InputStream,int,int Returns : void} GetImage{ Params :  Returns : String} GetSuffix{ Params : int Returns : char[]} Done{ Params :  Returns : void} adjustBeginLineColumn{ Params : int,int Returns : void} ,,,ExpandBuff FillBuff BeginToken UpdateLineColumn readChar getColumn getLine getEndColumn getEndLine getBeginColumn getBeginLine backup GetImage GetSuffix ,
JHotDraw,net.nutch.quality.dynamic,Token,1,1,0,0,0,false,0 ,0 ,0 ,kind: int beginLine: int image: String next: Token specialToken: Token ,toString{ Params :  Returns : String} newToken{ Params : int Returns : Token} ,,newToken ,toString ,
JHotDraw,net.nutch.quality.dynamic,TokenMgrError,1,1,0,0,0,false,Error ,0 ,0 ,LEXICAL_ERROR: int STATIC_LEXER_ERROR: int INVALID_LEXICAL_STATE: int LOOP_DETECTED: int errorCode: int ,addEscapes{ Params : String Returns : String} LexicalError{ Params : boolean,int,int,int,String,char Returns : String} getMessage{ Params :  Returns : String} ,,addEscapes LexicalError ,,
JHotDraw,net.nutch.quality,MarkovRankSolver,1,1,0,0,0,false,0 ,0 ,0 ,orderings: Vector solved: boolean fullRanking: TreeMap ,addOrdering{ Params : Object[] Returns : void} solveRanking{ Params :  Returns : void} compare{ Params : Object,Object Returns : int} getPos{ Params : Object Returns : int} getNumStates{ Params :  Returns : int} getKendallTauDistance{ Params : Object[],boolean Returns : double} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.quality,PageExtractor,1,1,0,0,0,false,0 ,0 ,IExtractor RemotePageExtractor NutchExtractor ,debug: boolean userAgent: String desc: PageDescription http: Http url: URL ,applyQuery{ Params : String Returns : ArrayList} applyQuery{ Params : String Returns : ArrayList} applyQuery{ Params : String Returns : ArrayList} applyQuery{ Params : String Returns : ArrayList} getPage{ Params : String Returns : String} buildQueryString{ Params : String Returns : String} parseResultItem{ Params : String,HashMap Returns : HashMap} getItemSection{ Params : HashMap,String,String,HashMap,String,String Returns : void} getSection{ Params : String,HashMap,String,String Returns : String} indexOfIgnoreCase{ Params : String,String,int Returns : int} trimQuotes{ Params : String,char Returns : String} removeTags{ Params : String Returns : String} getResultList{ Params : String,HashMap Returns : String} emitStats{ Params :  Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.quality,IExtractor,3,1,0,1,0,true,0 ,0 ,IExtractor RemotePageExtractor NutchExtractor ,,applyQuery{ Params : String Returns : ArrayList} applyQuery{ Params : String Returns : ArrayList} applyQuery{ Params : String Returns : ArrayList} applyQuery{ Params : String Returns : ArrayList} getPage{ Params : String Returns : String} buildQueryString{ Params : String Returns : String} parseResultItem{ Params : String,HashMap Returns : HashMap} getItemSection{ Params : HashMap,String,String,HashMap,String,String Returns : void} getSection{ Params : String,HashMap,String,String Returns : String} indexOfIgnoreCase{ Params : String,String,int Returns : int} trimQuotes{ Params : String,char Returns : String} removeTags{ Params : String Returns : String} getResultList{ Params : String,HashMap Returns : String} emitStats{ Params :  Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.quality,RemotePageExtractor,3,1,0,1,0,false,0 ,0 ,IExtractor RemotePageExtractor NutchExtractor ,pageExtractor: PageExtractor ,applyQuery{ Params : String Returns : ArrayList} applyQuery{ Params : String Returns : ArrayList} applyQuery{ Params : String Returns : ArrayList} applyQuery{ Params : String Returns : ArrayList} getPage{ Params : String Returns : String} buildQueryString{ Params : String Returns : String} parseResultItem{ Params : String,HashMap Returns : HashMap} getItemSection{ Params : HashMap,String,String,HashMap,String,String Returns : void} getSection{ Params : String,HashMap,String,String Returns : String} indexOfIgnoreCase{ Params : String,String,int Returns : int} trimQuotes{ Params : String,char Returns : String} removeTags{ Params : String Returns : String} getResultList{ Params : String,HashMap Returns : String} emitStats{ Params :  Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.quality,NutchExtractor,3,1,0,1,0,false,0 ,0 ,IExtractor RemotePageExtractor NutchExtractor ,searcher: NutchBean ,applyQuery{ Params : String Returns : ArrayList} applyQuery{ Params : String Returns : ArrayList} applyQuery{ Params : String Returns : ArrayList} applyQuery{ Params : String Returns : ArrayList} getPage{ Params : String Returns : String} buildQueryString{ Params : String Returns : String} parseResultItem{ Params : String,HashMap Returns : HashMap} getItemSection{ Params : HashMap,String,String,HashMap,String,String Returns : void} getSection{ Params : String,HashMap,String,String Returns : String} indexOfIgnoreCase{ Params : String,String,int Returns : int} trimQuotes{ Params : String,char Returns : String} removeTags{ Params : String Returns : String} getResultList{ Params : String,HashMap Returns : String} emitStats{ Params :  Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.quality,QualityTestTool,1,1,0,0,0,false,0 ,0 ,0 ,UNIQUE_URLS: String QUERY_LIST: String URL_INSET_SUFFIX: String QUERY_RESULTS_SUFFIX: String ENGINE_DESC_SUFFIX: String NUTCH_LABEL: String LOG: Logger inputsDir: File engineInsetData: TreeMap ,createInputs{ Params : File,String,File,String[] Returns : void} runTests{ Params : boolean,boolean,double Returns : void} computeCoverageScore{ Params : double Returns : void} computeEccentricScore{ Params : double Returns : void} computeOrderingScore{ Params :  Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.quality,ResultSetGenerator,1,1,0,0,0,false,0 ,0 ,0 ,extractor: PageExtractor.IExtractor debug: boolean ,processQueries{ Params : File,File Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.quality,ResultTestTool,1,1,0,0,0,false,0 ,0 ,SearchEngine NutchEngine ResultsList QualityMetric PerfectPageMetric GoodEnoughMetric ,testEngine: SearchEngine verbose: boolean topChunk: int ,search{ Params : String,int Returns : Vector} search{ Params : String,int Returns : Vector} search{ Params : String,int Returns : Vector} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} testAllMetrics{ Params : File Returns : void} testQueries{ Params : File,QualityMetric[] Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.quality,SearchEngine,3,0,0,0,0,true,0 ,0 ,SearchEngine NutchEngine ResultsList QualityMetric PerfectPageMetric GoodEnoughMetric ,,search{ Params : String,int Returns : Vector} search{ Params : String,int Returns : Vector} search{ Params : String,int Returns : Vector} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} testAllMetrics{ Params : File Returns : void} testQueries{ Params : File,QualityMetric[] Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.quality,NutchEngine,3,0,0,0,0,false,0 ,0 ,SearchEngine NutchEngine ResultsList QualityMetric PerfectPageMetric GoodEnoughMetric ,searcher: NutchBean ,search{ Params : String,int Returns : Vector} search{ Params : String,int Returns : Vector} search{ Params : String,int Returns : Vector} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} testAllMetrics{ Params : File Returns : void} testQueries{ Params : File,QualityMetric[] Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.quality,ResultsList,3,0,0,0,0,false,0 ,0 ,SearchEngine NutchEngine ResultsList QualityMetric PerfectPageMetric GoodEnoughMetric ,resultTable: Hashtable ,search{ Params : String,int Returns : Vector} search{ Params : String,int Returns : Vector} search{ Params : String,int Returns : Vector} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} testAllMetrics{ Params : File Returns : void} testQueries{ Params : File,QualityMetric[] Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.quality,QualityMetric,3,0,0,0,0,true,0 ,0 ,SearchEngine NutchEngine ResultsList QualityMetric PerfectPageMetric GoodEnoughMetric ,,search{ Params : String,int Returns : Vector} search{ Params : String,int Returns : Vector} search{ Params : String,int Returns : Vector} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} testAllMetrics{ Params : File Returns : void} testQueries{ Params : File,QualityMetric[] Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.quality,PerfectPageMetric,3,0,0,0,0,false,0 ,0 ,SearchEngine NutchEngine ResultsList QualityMetric PerfectPageMetric GoodEnoughMetric ,points: long ,search{ Params : String,int Returns : Vector} search{ Params : String,int Returns : Vector} search{ Params : String,int Returns : Vector} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} testAllMetrics{ Params : File Returns : void} testQueries{ Params : File,QualityMetric[] Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.quality,GoodEnoughMetric,3,0,0,0,0,false,0 ,0 ,SearchEngine NutchEngine ResultsList QualityMetric PerfectPageMetric GoodEnoughMetric ,points: long ,search{ Params : String,int Returns : Vector} search{ Params : String,int Returns : Vector} search{ Params : String,int Returns : Vector} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} computeMetric{ Params : String,Vector,Vector Returns : void} getScore{ Params :  Returns : double} scoredPoints{ Params :  Returns : long} maxPoints{ Params :  Returns : long} getName{ Params :  Returns : String} testAllMetrics{ Params : File Returns : void} testQueries{ Params : File,QualityMetric[] Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.quality,SearchOptimizer,1,1,0,0,0,false,0 ,0 ,ParameterLocation ,LOG: Logger NUM_RESTARTS: int QUERY_LIST: String URL_INSET_SUFFIX: String QUERY_RESULTS_SUFFIX: String ENGINE_DESC_SUFFIX: String nutch: PageExtractor.NutchExtractor rand: Random queryTerms: Vector segmentsDir: File inputsDir: File remoteExtractors: TreeMap engineResults: TreeMap insetTables: TreeMap STEP_SIZE: float ,testNutch{ Params :  Returns : double} countStatements{ Params : String,String,String Returns : int} countVotes{ Params : String,String,String Returns : int} inset{ Params : String,String Returns : boolean} performInsetTest{ Params : String Returns : void} getScoreParam{ Params : float[] Returns : void} getPhraseParam{ Params :  Returns : float} getScore{ Params :  Returns : double} randomizePosition{ Params :  Returns : void} evaluate{ Params :  Returns : void} toString{ Params :  Returns : String} optimizeParams{ Params :  Returns : void} takeBestStep{ Params : ParameterLocation Returns : ParameterLocation} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.quality,ParameterLocation,3,0,0,0,0,false,0 ,0 ,ParameterLocation ,scoreParams: float phraseParam: float score: double ,testNutch{ Params :  Returns : double} countStatements{ Params : String,String,String Returns : int} countVotes{ Params : String,String,String Returns : int} inset{ Params : String,String Returns : boolean} performInsetTest{ Params : String Returns : void} getScoreParam{ Params : float[] Returns : void} getPhraseParam{ Params :  Returns : float} getScore{ Params :  Returns : double} randomizePosition{ Params :  Returns : void} evaluate{ Params :  Returns : void} toString{ Params :  Returns : String} optimizeParams{ Params :  Returns : void} takeBestStep{ Params : ParameterLocation Returns : ParameterLocation} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.quality,URLInsetTester,1,1,0,0,0,false,0 ,0 ,0 ,debug: boolean extractor: PageExtractor.IExtractor ,testURLs{ Params : File,TreeSet,File Returns : void} testURLs{ Params : Vector,TreeSet,File Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.searcher,DistributedSearch,1,1,0,0,0,false,0 ,0 ,Param Result Server Client ,LOG: Logger OP_SEGMENTS: byte OP_SEARCH: byte OP_EXPLAIN: byte OP_DETAILS: byte OP_SUMMARY: byte OP_CONTENT: byte OP_ANCHORS: byte OP_NAMES: String ,write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} call{ Params : Writable Returns : Writable} logRequest{ Params : Param Returns : void} main{ Params : String[] Returns : void} readConfig{ Params : File Returns : InetSocketAddress[]} getSegmentNames{ Params :  Returns : String[]} search{ Params : Query,int Returns : Hits} getExplanation{ Params : Query,Hit Returns : String} getDetails{ Params : Hit Returns : HitDetails} getDetails{ Params : Hit[] Returns : HitDetails[]} getSummary{ Params : HitDetails,Query Returns : String} getSummary{ Params : HitDetails[],Query Returns : String[]} getContent{ Params : HitDetails Returns : byte[]} getAnchors{ Params : HitDetails Returns : String[]} main{ Params : String[] Returns : void} ,,logRequest main readConfig main ,,
JHotDraw,net.nutch.searcher,Param,3,1,0,1,0,false,0 ,0 ,Param Result Server Client ,op: byte first: Writable second: Writable ,write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} call{ Params : Writable Returns : Writable} logRequest{ Params : Param Returns : void} main{ Params : String[] Returns : void} readConfig{ Params : File Returns : InetSocketAddress[]} getSegmentNames{ Params :  Returns : String[]} search{ Params : Query,int Returns : Hits} getExplanation{ Params : Query,Hit Returns : String} getDetails{ Params : Hit Returns : HitDetails} getDetails{ Params : Hit[] Returns : HitDetails[]} getSummary{ Params : HitDetails,Query Returns : String} getSummary{ Params : HitDetails[],Query Returns : String[]} getContent{ Params : HitDetails Returns : byte[]} getAnchors{ Params : HitDetails Returns : String[]} main{ Params : String[] Returns : void} ,,logRequest main readConfig main ,,
JHotDraw,net.nutch.searcher,Result,3,1,0,1,0,false,0 ,0 ,Param Result Server Client ,op: byte value: Writable ,write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} call{ Params : Writable Returns : Writable} logRequest{ Params : Param Returns : void} main{ Params : String[] Returns : void} readConfig{ Params : File Returns : InetSocketAddress[]} getSegmentNames{ Params :  Returns : String[]} search{ Params : Query,int Returns : Hits} getExplanation{ Params : Query,Hit Returns : String} getDetails{ Params : Hit Returns : HitDetails} getDetails{ Params : Hit[] Returns : HitDetails[]} getSummary{ Params : HitDetails,Query Returns : String} getSummary{ Params : HitDetails[],Query Returns : String[]} getContent{ Params : HitDetails Returns : byte[]} getAnchors{ Params : HitDetails Returns : String[]} main{ Params : String[] Returns : void} ,,logRequest main readConfig main ,,
JHotDraw,net.nutch.searcher,Server,3,1,0,1,0,false,0 ,0 ,Param Result Server Client ,bean: NutchBean ,write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} call{ Params : Writable Returns : Writable} logRequest{ Params : Param Returns : void} main{ Params : String[] Returns : void} readConfig{ Params : File Returns : InetSocketAddress[]} getSegmentNames{ Params :  Returns : String[]} search{ Params : Query,int Returns : Hits} getExplanation{ Params : Query,Hit Returns : String} getDetails{ Params : Hit Returns : HitDetails} getDetails{ Params : Hit[] Returns : HitDetails[]} getSummary{ Params : HitDetails,Query Returns : String} getSummary{ Params : HitDetails[],Query Returns : String[]} getContent{ Params : HitDetails Returns : byte[]} getAnchors{ Params : HitDetails Returns : String[]} main{ Params : String[] Returns : void} ,,logRequest main readConfig main ,,
JHotDraw,net.nutch.searcher,Client,3,1,0,1,0,false,0 ,0 ,Param Result Server Client ,addresses: InetSocketAddress segmentToAddress: HashMap ,write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} call{ Params : Writable Returns : Writable} logRequest{ Params : Param Returns : void} main{ Params : String[] Returns : void} readConfig{ Params : File Returns : InetSocketAddress[]} getSegmentNames{ Params :  Returns : String[]} search{ Params : Query,int Returns : Hits} getExplanation{ Params : Query,Hit Returns : String} getDetails{ Params : Hit Returns : HitDetails} getDetails{ Params : Hit[] Returns : HitDetails[]} getSummary{ Params : HitDetails,Query Returns : String} getSummary{ Params : HitDetails[],Query Returns : String[]} getContent{ Params : HitDetails Returns : byte[]} getAnchors{ Params : HitDetails Returns : String[]} main{ Params : String[] Returns : void} ,,logRequest main readConfig main ,,
JHotDraw,net.nutch.searcher,FetchedSegments,1,1,0,0,0,false,0 ,HitSummarizer HitContent ,Segment ,segments: HashMap ,getFetcherOutput{ Params : int Returns : FetcherOutput} getContent{ Params : int Returns : byte[]} getText{ Params : int Returns : String} getSegmentNames{ Params :  Returns : String[]} getContent{ Params : HitDetails Returns : byte[]} getAnchors{ Params : HitDetails Returns : String[]} getSummary{ Params : HitDetails,Query Returns : String} getSummary{ Params : HitDetails[],Query Returns : String[]} getSegment{ Params : HitDetails Returns : Segment} getDocNo{ Params : HitDetails Returns : int} ,,,,
JHotDraw,net.nutch.searcher,Segment,3,2,0,1,0,false,0 ,HitSummarizer HitContent ,Segment ,fetcher: ArrayFile.Reader content: ArrayFile.Reader text: ArrayFile.Reader ,getFetcherOutput{ Params : int Returns : FetcherOutput} getContent{ Params : int Returns : byte[]} getText{ Params : int Returns : String} getSegmentNames{ Params :  Returns : String[]} getContent{ Params : HitDetails Returns : byte[]} getAnchors{ Params : HitDetails Returns : String[]} getSummary{ Params : HitDetails,Query Returns : String} getSummary{ Params : HitDetails[],Query Returns : String[]} getSegment{ Params : HitDetails Returns : Segment} getDocNo{ Params : HitDetails Returns : int} ,,,,
JHotDraw,net.nutch.searcher,Hit,1,1,0,0,0,false,0 ,Writable Comparable ,0 ,LOG: Logger indexNo: int indexDocNo: int score: float ,getIndexNo{ Params :  Returns : int} setIndexNo{ Params : int Returns : void} getIndexDocNo{ Params :  Returns : int} getScore{ Params :  Returns : float} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} toString{ Params :  Returns : String} compareTo{ Params : Object Returns : int} ,,,,
JHotDraw,net.nutch.searcher,HitContent,2,1,0,0,0,true,0 ,Writable Comparable ,0 ,,getContent{ Params : HitDetails Returns : byte[]} getAnchors{ Params : HitDetails Returns : String[]} ,,,,
JHotDraw,net.nutch.searcher,HitDetailer,2,1,0,0,0,true,0 ,Writable Comparable ,0 ,,getDetails{ Params : Hit Returns : HitDetails} getDetails{ Params : Hit[] Returns : HitDetails[]} ,,,,
JHotDraw,net.nutch.searcher,HitDetails,1,1,0,0,1,false,0 ,Writable ,0 ,LOG: Logger length: int fields: String values: String ,getLength{ Params :  Returns : int} getField{ Params : int Returns : String} getValue{ Params : int Returns : String} getValue{ Params : String Returns : String} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : HitDetails} readFields{ Params : DataInput Returns : void} toString{ Params :  Returns : String} toHtml{ Params :  Returns : String} ,,read ,,
JHotDraw,net.nutch.searcher,Hits,1,1,0,0,1,false,0 ,Writable ,0 ,LOG: Logger total: long top: Hit ,getTotal{ Params :  Returns : long} getLength{ Params :  Returns : int} getHit{ Params : int Returns : Hit} getHits{ Params : int,int Returns : Hit[]} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} ,,,,
JHotDraw,net.nutch.searcher,HitSummarizer,2,1,0,0,0,true,0 ,Writable ,0 ,,getSummary{ Params : HitDetails,Query Returns : String} getSummary{ Params : HitDetails[],Query Returns : String[]} ,,,,
JHotDraw,net.nutch.searcher,IndexSearcher,1,1,0,0,0,false,0 ,Searcher HitDetailer ,0 ,luceneSearcher: org.apache.lucene.search.Searcher segmentNames: String ,search{ Params : Query,int Returns : Hits} getExplanation{ Params : Query,Hit Returns : String} getDetails{ Params : Hit Returns : HitDetails} getDetails{ Params : Hit[] Returns : HitDetails[]} translateHits{ Params : TopDocs Returns : Hits} ,,,,
JHotDraw,net.nutch.searcher,NutchBean,1,1,0,0,0,false,0 ,Searcher HitDetailer HitSummarizer HitContent ,0 ,LOG: Logger segmentNames: String searcher: Searcher detailer: HitDetailer summarizer: HitSummarizer content: HitContent ,get{ Params : ServletContext Returns : NutchBean} init{ Params : File,File Returns : void} init{ Params : DistributedSearch.Client Returns : void} getSegmentNames{ Params :  Returns : String[]} search{ Params : Query,int Returns : Hits} getExplanation{ Params : Query,Hit Returns : String} getDetails{ Params : Hit Returns : HitDetails} getDetails{ Params : Hit[] Returns : HitDetails[]} getSummary{ Params : HitDetails,Query Returns : String} getSummary{ Params : HitDetails[],Query Returns : String[]} getContent{ Params : HitDetails Returns : byte[]} getAnchors{ Params : HitDetails Returns : String[]} main{ Params : String[] Returns : void} ,,get main ,,
JHotDraw,net.nutch.searcher,Query,1,1,0,0,1,false,0 ,Writable ,Clause Term Phrase ,LOG: Logger clauses: ArrayList CLAUSES_PROTO: Clause ,isRequired{ Params :  Returns : boolean} isProhibited{ Params :  Returns : boolean} getField{ Params :  Returns : String} getWeight{ Params :  Returns : float} setWeight{ Params : float Returns : void} isPhrase{ Params :  Returns : boolean} getPhrase{ Params :  Returns : Phrase} getTerm{ Params :  Returns : Term} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Clause} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Term} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getTerms{ Params :  Returns : Term[]} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Phrase} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getClauses{ Params :  Returns : Clause[]} addRequiredTerm{ Params : String Returns : void} addProhibitedTerm{ Params : String Returns : void} addRequiredPhrase{ Params : String[] Returns : void} addProhibitedPhrase{ Params : String[] Returns : void} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Query} readFields{ Params : DataInput Returns : void} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getTerms{ Params :  Returns : String[]} parse{ Params : String Returns : Query} main{ Params : String[] Returns : void} ,,read read read read parse main ,,
JHotDraw,net.nutch.searcher,Clause,3,1,0,1,0,false,0 ,Writable ,Clause Term Phrase ,DEFAULT_FIELD: String REQUIRED_BIT: byte PROHIBITED_BIT: byte PHRASE_BIT: byte isRequired: boolean isProhibited: boolean field: String weight: float termOrPhrase: Object ,isRequired{ Params :  Returns : boolean} isProhibited{ Params :  Returns : boolean} getField{ Params :  Returns : String} getWeight{ Params :  Returns : float} setWeight{ Params : float Returns : void} isPhrase{ Params :  Returns : boolean} getPhrase{ Params :  Returns : Phrase} getTerm{ Params :  Returns : Term} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Clause} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Term} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getTerms{ Params :  Returns : Term[]} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Phrase} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getClauses{ Params :  Returns : Clause[]} addRequiredTerm{ Params : String Returns : void} addProhibitedTerm{ Params : String Returns : void} addRequiredPhrase{ Params : String[] Returns : void} addProhibitedPhrase{ Params : String[] Returns : void} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Query} readFields{ Params : DataInput Returns : void} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getTerms{ Params :  Returns : String[]} parse{ Params : String Returns : Query} main{ Params : String[] Returns : void} ,,read read read read parse main ,,
JHotDraw,net.nutch.searcher,Term,3,1,0,1,0,false,0 ,Writable ,Clause Term Phrase ,text: String ,isRequired{ Params :  Returns : boolean} isProhibited{ Params :  Returns : boolean} getField{ Params :  Returns : String} getWeight{ Params :  Returns : float} setWeight{ Params : float Returns : void} isPhrase{ Params :  Returns : boolean} getPhrase{ Params :  Returns : Phrase} getTerm{ Params :  Returns : Term} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Clause} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Term} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getTerms{ Params :  Returns : Term[]} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Phrase} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getClauses{ Params :  Returns : Clause[]} addRequiredTerm{ Params : String Returns : void} addProhibitedTerm{ Params : String Returns : void} addRequiredPhrase{ Params : String[] Returns : void} addProhibitedPhrase{ Params : String[] Returns : void} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Query} readFields{ Params : DataInput Returns : void} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getTerms{ Params :  Returns : String[]} parse{ Params : String Returns : Query} main{ Params : String[] Returns : void} ,,read read read read parse main ,,
JHotDraw,net.nutch.searcher,Phrase,3,1,0,1,0,false,0 ,Writable ,Clause Term Phrase ,terms: Term ,isRequired{ Params :  Returns : boolean} isProhibited{ Params :  Returns : boolean} getField{ Params :  Returns : String} getWeight{ Params :  Returns : float} setWeight{ Params : float Returns : void} isPhrase{ Params :  Returns : boolean} getPhrase{ Params :  Returns : Phrase} getTerm{ Params :  Returns : Term} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Clause} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Term} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getTerms{ Params :  Returns : Term[]} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Phrase} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getClauses{ Params :  Returns : Clause[]} addRequiredTerm{ Params : String Returns : void} addProhibitedTerm{ Params : String Returns : void} addRequiredPhrase{ Params : String[] Returns : void} addProhibitedPhrase{ Params : String[] Returns : void} write{ Params : DataOutput Returns : void} read{ Params : DataInput Returns : Query} readFields{ Params : DataInput Returns : void} toString{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getTerms{ Params :  Returns : String[]} parse{ Params : String Returns : Query} main{ Params : String[] Returns : void} ,,read read read read parse main ,,
JHotDraw,net.nutch.searcher,QueryTranslator,1,1,0,0,0,false,0 ,0 ,Interface Default ,URL_BOOST: float ANCHOR_BOOST: float SLOP: int PHRASE_BOOST: float DEFAULT_IMPL: Interface ,setUrlBoost{ Params : float Returns : void} setAnchorBoost{ Params : float Returns : void} setPhraseBoost{ Params : float Returns : void} setSlop{ Params : int Returns : void} setDefaultTranslator{ Params : Interface Returns : void} getDefaultTranslator{ Params :  Returns : Interface} translate{ Params : Query Returns : org.apache.lucene.search.Query} translate{ Params : Query Returns : org.apache.lucene.search.Query} translate{ Params : Query Returns : org.apache.lucene.search.Query} addClauses{ Params : Query,String,BooleanQuery,float,int Returns : void} termQuery{ Params : String,Term,float Returns : TermQuery} exactPhrase{ Params : Phrase,String,float Returns : PhraseQuery} luceneTerm{ Params : String,Term Returns : org.apache.lucene.index.Term} ,,setUrlBoost setAnchorBoost setPhraseBoost setSlop setDefaultTranslator getDefaultTranslator translate addClauses termQuery exactPhrase luceneTerm ,,
JHotDraw,net.nutch.searcher,Interface,3,1,0,0,0,true,0 ,0 ,Interface Default ,,setUrlBoost{ Params : float Returns : void} setAnchorBoost{ Params : float Returns : void} setPhraseBoost{ Params : float Returns : void} setSlop{ Params : int Returns : void} setDefaultTranslator{ Params : Interface Returns : void} getDefaultTranslator{ Params :  Returns : Interface} translate{ Params : Query Returns : org.apache.lucene.search.Query} translate{ Params : Query Returns : org.apache.lucene.search.Query} translate{ Params : Query Returns : org.apache.lucene.search.Query} addClauses{ Params : Query,String,BooleanQuery,float,int Returns : void} termQuery{ Params : String,Term,float Returns : TermQuery} exactPhrase{ Params : Phrase,String,float Returns : PhraseQuery} luceneTerm{ Params : String,Term Returns : org.apache.lucene.index.Term} ,,setUrlBoost setAnchorBoost setPhraseBoost setSlop setDefaultTranslator getDefaultTranslator translate addClauses termQuery exactPhrase luceneTerm ,,
JHotDraw,net.nutch.searcher,Default,3,1,0,1,0,false,0 ,0 ,Interface Default ,,setUrlBoost{ Params : float Returns : void} setAnchorBoost{ Params : float Returns : void} setPhraseBoost{ Params : float Returns : void} setSlop{ Params : int Returns : void} setDefaultTranslator{ Params : Interface Returns : void} getDefaultTranslator{ Params :  Returns : Interface} translate{ Params : Query Returns : org.apache.lucene.search.Query} translate{ Params : Query Returns : org.apache.lucene.search.Query} translate{ Params : Query Returns : org.apache.lucene.search.Query} addClauses{ Params : Query,String,BooleanQuery,float,int Returns : void} termQuery{ Params : String,Term,float Returns : TermQuery} exactPhrase{ Params : Phrase,String,float Returns : PhraseQuery} luceneTerm{ Params : String,Term Returns : org.apache.lucene.index.Term} ,,setUrlBoost setAnchorBoost setPhraseBoost setSlop setDefaultTranslator getDefaultTranslator translate addClauses termQuery exactPhrase luceneTerm ,,
JHotDraw,net.nutch.searcher,Searcher,2,1,0,0,0,true,0 ,0 ,0 ,,search{ Params : Query,int Returns : Hits} getExplanation{ Params : Query,Hit Returns : String} ,,,,
JHotDraw,net.nutch.searcher,Summarizer,1,1,0,0,0,false,0 ,0 ,Excerpt ,SUM_CONTEXT: int SUM_LENGTH: int ANALYZER: Analyzer ,addToken{ Params : String Returns : void} numUniqueTokens{ Params :  Returns : int} numFragments{ Params :  Returns : int} setNumTerms{ Params : int Returns : void} getNumTerms{ Params :  Returns : int} add{ Params : Fragment Returns : void} elements{ Params :  Returns : Enumeration} getSummary{ Params : String,Query Returns : Summary} compare{ Params : Object,Object Returns : int} getTokens{ Params : String Returns : Token[]} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.searcher,Excerpt,3,0,0,0,0,false,0 ,0 ,Excerpt ,passages: Vector tokenSet: SortedSet numTerms: int ,addToken{ Params : String Returns : void} numUniqueTokens{ Params :  Returns : int} numFragments{ Params :  Returns : int} setNumTerms{ Params : int Returns : void} getNumTerms{ Params :  Returns : int} add{ Params : Fragment Returns : void} elements{ Params :  Returns : Enumeration} getSummary{ Params : String,Query Returns : Summary} compare{ Params : Object,Object Returns : int} getTokens{ Params : String Returns : Token[]} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.searcher,Summary,1,1,0,0,0,false,0 ,0 ,Fragment Highlight Ellipsis ,fragments: ArrayList FRAGMENT_PROTO: Fragment ,getText{ Params :  Returns : String} isHighlight{ Params :  Returns : boolean} isEllipsis{ Params :  Returns : boolean} toString{ Params :  Returns : String} isHighlight{ Params :  Returns : boolean} toString{ Params :  Returns : String} isEllipsis{ Params :  Returns : boolean} toString{ Params :  Returns : String} add{ Params : Fragment Returns : void} getFragments{ Params :  Returns : Fragment[]} toString{ Params :  Returns : String} ,,,,
JHotDraw,net.nutch.searcher,Fragment,3,1,0,1,0,false,0 ,0 ,Fragment Highlight Ellipsis ,text: String ,getText{ Params :  Returns : String} isHighlight{ Params :  Returns : boolean} isEllipsis{ Params :  Returns : boolean} toString{ Params :  Returns : String} isHighlight{ Params :  Returns : boolean} toString{ Params :  Returns : String} isEllipsis{ Params :  Returns : boolean} toString{ Params :  Returns : String} add{ Params : Fragment Returns : void} getFragments{ Params :  Returns : Fragment[]} toString{ Params :  Returns : String} ,,,,
JHotDraw,net.nutch.searcher,Highlight,3,1,0,1,0,false,0 ,0 ,Fragment Highlight Ellipsis ,,getText{ Params :  Returns : String} isHighlight{ Params :  Returns : boolean} isEllipsis{ Params :  Returns : boolean} toString{ Params :  Returns : String} isHighlight{ Params :  Returns : boolean} toString{ Params :  Returns : String} isEllipsis{ Params :  Returns : boolean} toString{ Params :  Returns : String} add{ Params : Fragment Returns : void} getFragments{ Params :  Returns : Fragment[]} toString{ Params :  Returns : String} ,,,,
JHotDraw,net.nutch.searcher,Ellipsis,3,1,0,1,0,false,0 ,0 ,Fragment Highlight Ellipsis ,,getText{ Params :  Returns : String} isHighlight{ Params :  Returns : boolean} isEllipsis{ Params :  Returns : boolean} toString{ Params :  Returns : String} isHighlight{ Params :  Returns : boolean} toString{ Params :  Returns : String} isEllipsis{ Params :  Returns : boolean} toString{ Params :  Returns : String} add{ Params : Fragment Returns : void} getFragments{ Params :  Returns : Fragment[]} toString{ Params :  Returns : String} ,,,,
JHotDraw,net.nutch.tools,CrawlTool,1,1,0,0,0,false,0 ,0 ,0 ,LOG: Logger ,getDate{ Params :  Returns : String} getLatestSegment{ Params : String Returns : String} main{ Params : String[] Returns : void} ,,getDate getLatestSegment main ,,
JHotDraw,net.nutch.tools,DistributedAnalysisTool,1,1,0,0,0,false,0 ,0 ,EditSet ScoreValue ,ASSIGN_FILE_PREFIX: String SCORE_EDITS_FILE_PREFIX: String ASSIGN_COMPLETE: String DEFAULT_SCORE: float DECAY_VALUE: float LOG: Logger dbDir: File ,next{ Params : Writable,Writable Returns : boolean} getNextReader{ Params :  Returns : void} close{ Params :  Returns : void} setScore{ Params : float Returns : void} setNextScore{ Params : float Returns : void} score{ Params :  Returns : float} nextScore{ Params :  Returns : float} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} initRound{ Params : int,File Returns : boolean} computeRound{ Params : int,File Returns : void} completeRound{ Params : File,File Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.tools,EditSet,3,0,0,0,0,false,0 ,0 ,EditSet ScoreValue ,distDir: File numEditFiles: int curEditFile: int curReader: SequenceFile.Reader ,next{ Params : Writable,Writable Returns : boolean} getNextReader{ Params :  Returns : void} close{ Params :  Returns : void} setScore{ Params : float Returns : void} setNextScore{ Params : float Returns : void} score{ Params :  Returns : float} nextScore{ Params :  Returns : float} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} initRound{ Params : int,File Returns : boolean} computeRound{ Params : int,File Returns : void} completeRound{ Params : File,File Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.tools,ScoreValue,3,0,0,0,0,false,0 ,0 ,EditSet ScoreValue ,score: float nextScore: float ,next{ Params : Writable,Writable Returns : boolean} getNextReader{ Params :  Returns : void} close{ Params :  Returns : void} setScore{ Params : float Returns : void} setNextScore{ Params : float Returns : void} score{ Params :  Returns : float} nextScore{ Params :  Returns : float} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} initRound{ Params : int,File Returns : boolean} computeRound{ Params : int,File Returns : void} completeRound{ Params : File,File Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.tools,FetchListTool,1,1,0,0,0,false,0 ,0 ,TableSet SortableScore ,LOG: Logger TOP_N_SORTER: String FETCH_GENERATION_DELAY_MS: long dbDir: File refetchOnly: boolean cutoffScore: float seed: int ,add{ Params : String Returns : boolean} append{ Params : FetchListEntry Returns : boolean} close{ Params :  Returns : void} set{ Params : float Returns : void} getFloat{ Params :  Returns : float} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} emitMultipleLists{ Params : File,int,long,long Returns : void} emitFetchList{ Params : File,long,long Returns : void} getDate{ Params :  Returns : String} emitFetchList{ Params : TableSet,File,long,long Returns : void} compare{ Params : Object,Object Returns : int} main{ Params : String[] Returns : void} ,,getDate main ,,
JHotDraw,net.nutch.tools,TableSet,3,0,0,0,0,false,0 ,0 ,TableSet SortableScore ,outputPaths: Vector tables: Vector appendCounts: long hasAppended: boolean ,add{ Params : String Returns : boolean} append{ Params : FetchListEntry Returns : boolean} close{ Params :  Returns : void} set{ Params : float Returns : void} getFloat{ Params :  Returns : float} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} emitMultipleLists{ Params : File,int,long,long Returns : void} emitFetchList{ Params : File,long,long Returns : void} getDate{ Params :  Returns : String} emitFetchList{ Params : TableSet,File,long,long Returns : void} compare{ Params : Object,Object Returns : int} main{ Params : String[] Returns : void} ,,getDate main ,,
JHotDraw,net.nutch.tools,SortableScore,3,1,0,1,0,false,0 ,0 ,TableSet SortableScore ,score: float ,add{ Params : String Returns : boolean} append{ Params : FetchListEntry Returns : boolean} close{ Params :  Returns : void} set{ Params : float Returns : void} getFloat{ Params :  Returns : float} compareTo{ Params : Object Returns : int} write{ Params : DataOutput Returns : void} readFields{ Params : DataInput Returns : void} emitMultipleLists{ Params : File,int,long,long Returns : void} emitFetchList{ Params : File,long,long Returns : void} getDate{ Params :  Returns : String} emitFetchList{ Params : TableSet,File,long,long Returns : void} compare{ Params : Object,Object Returns : int} main{ Params : String[] Returns : void} ,,getDate main ,,
JHotDraw,net.nutch.tools,LinkAnalysisTool,1,1,0,0,0,false,0 ,0 ,0 ,dbDir: File dat: DistributedAnalysisTool ,iterate{ Params : int,File Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.tools,UpdateDatabaseTool,1,1,0,0,0,false,0 ,0 ,FetcherOutputReader ,NEW_INTERNAL_LINK_FACTOR: float NEW_EXTERNAL_LINK_FACTOR: float MAX_OUTLINKS_PER_PAGE: int IGNORE_INTERNAL_LINKS: boolean LOG: Logger MAX_RETRIES: int MILLISECONDS_PER_DAY: long webdb: IWebDBWriter maxCount: int additionsAllowed: boolean outlinkSet: Set ,next{ Params : Writable Returns : Writable} get{ Params : long,Writable Returns : Writable} checkFetchDate{ Params : FetcherOutput Returns : FetcherOutput} updateForSegment{ Params : String Returns : void} pageContentsUnchanged{ Params : FetcherOutput Returns : void} pageContentsChanged{ Params : FetcherOutput Returns : void} pageGone{ Params : FetcherOutput Returns : void} pageRetry{ Params : FetcherOutput Returns : void} nextFetch{ Params : FetcherOutput Returns : long} nextFetch{ Params : FetcherOutput,int Returns : long} getHost{ Params : String Returns : String} close{ Params :  Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.tools,FetcherOutputReader,3,1,0,1,0,false,0 ,0 ,FetcherOutputReader ,lastModified: long ,next{ Params : Writable Returns : Writable} get{ Params : long,Writable Returns : Writable} checkFetchDate{ Params : FetcherOutput Returns : FetcherOutput} updateForSegment{ Params : String Returns : void} pageContentsUnchanged{ Params : FetcherOutput Returns : void} pageContentsChanged{ Params : FetcherOutput Returns : void} pageGone{ Params : FetcherOutput Returns : void} pageRetry{ Params : FetcherOutput Returns : void} nextFetch{ Params : FetcherOutput Returns : long} nextFetch{ Params : FetcherOutput,int Returns : long} getHost{ Params : String Returns : String} close{ Params :  Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.tools,WebDBAdminTool,1,1,0,0,0,false,0 ,0 ,0 ,LOG: Logger reader: IWebDBReader ,textDump{ Params : String Returns : void} emitTopK{ Params : int Returns : void} compare{ Params : Object,Object Returns : int} scoreDump{ Params :  Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.util,DOMContentUtils,1,1,0,0,0,false,0 ,0 ,0 ,,getText{ Params : StringBuffer,Node,boolean Returns : boolean} getText{ Params : StringBuffer,Node Returns : void} getTextHelper{ Params : StringBuffer,Node,boolean,int Returns : boolean} getTitle{ Params : StringBuffer,Node Returns : boolean} hasOnlyWhiteSpace{ Params : Node Returns : boolean} shouldThrowAwayLink{ Params : Node,NodeList,int Returns : boolean} getOutlinks{ Params : URL,ArrayList,Node Returns : void} ,,getText getText getTextHelper getTitle hasOnlyWhiteSpace shouldThrowAwayLink getOutlinks ,,
JHotDraw,net.nutch.util,FibonacciHeap,1,1,0,0,0,false,0 ,0 ,FibonacciHeapNode ,min: FibonacciHeapNode itemsToNodes: HashMap ,toString{ Params :  Returns : String} add{ Params : Object,int Returns : void} contains{ Params : Object Returns : boolean} removeFromSiblings{ Params : FibonacciHeapNode Returns : void} concatenateSiblings{ Params : FibonacciHeapNode,FibonacciHeapNode Returns : void} peekMin{ Params :  Returns : Object} size{ Params :  Returns : int} popMin{ Params :  Returns : Object} consolidate{ Params :  Returns : void} link{ Params : FibonacciHeapNode,FibonacciHeapNode Returns : void} decreaseKey{ Params : Object,int Returns : void} cut{ Params : FibonacciHeapNode,FibonacciHeapNode Returns : void} cascadingCut{ Params : FibonacciHeapNode Returns : void} ,,,,
JHotDraw,net.nutch.util,FibonacciHeapNode,3,2,0,1,0,false,0 ,0 ,FibonacciHeapNode ,userObject: Object priority: int parent: FibonacciHeapNode prevSibling: FibonacciHeapNode nextSibling: FibonacciHeapNode child: FibonacciHeapNode degree: int mark: boolean ,toString{ Params :  Returns : String} add{ Params : Object,int Returns : void} contains{ Params : Object Returns : boolean} removeFromSiblings{ Params : FibonacciHeapNode Returns : void} concatenateSiblings{ Params : FibonacciHeapNode,FibonacciHeapNode Returns : void} peekMin{ Params :  Returns : Object} size{ Params :  Returns : int} popMin{ Params :  Returns : Object} consolidate{ Params :  Returns : void} link{ Params : FibonacciHeapNode,FibonacciHeapNode Returns : void} decreaseKey{ Params : Object,int Returns : void} cut{ Params : FibonacciHeapNode,FibonacciHeapNode Returns : void} cascadingCut{ Params : FibonacciHeapNode Returns : void} ,,,,
JHotDraw,net.nutch.util,FileUtil,1,1,0,0,0,false,0 ,0 ,0 ,,fullyDelete{ Params : File Returns : boolean} copyContents{ Params : File,File,boolean Returns : boolean} recursiveCopy{ Params : File,File Returns : void} ,,fullyDelete copyContents recursiveCopy ,,
JHotDraw,net.nutch.util,GZIPUtils,1,1,0,0,0,false,0 ,0 ,0 ,EXPECTED_COMPRESSION_RATIO: int BUF_SIZE: int ,unzipBestEffort{ Params : byte[] Returns : byte[]} unzipBestEffort{ Params : byte[],int Returns : byte[]} unzip{ Params : byte[] Returns : byte[]} zip{ Params : byte[] Returns : byte[]} ,,unzipBestEffort unzipBestEffort unzip zip ,,
JHotDraw,net.nutch.util,LogFormatter,1,1,0,0,0,false,Formatter ,0 ,0 ,FORMAT: String NEWLINE: String date: Date formatter: SimpleDateFormat loggedSevere: boolean showThreadIDs: boolean ,getLogger{ Params : String Returns : Logger} setShowThreadIDs{ Params : boolean Returns : void} format{ Params : LogRecord Returns : String} hasLoggedSevere{ Params :  Returns : boolean} getLogStream{ Params : Logger,Level Returns : PrintStream} hasNewline{ Params :  Returns : boolean} flush{ Params :  Returns : void} ,,getLogger setShowThreadIDs hasLoggedSevere getLogStream ,,
JHotDraw,net.nutch.util,NutchConf,1,1,0,0,0,false,0 ,0 ,0 ,LOG: Logger resourceNames: List properties: Properties ,addConfResource{ Params : String Returns : void} getProps{ Params :  Returns : Properties} get{ Params : String Returns : String} get{ Params : String,String Returns : String} getInt{ Params : String,int Returns : int} getLong{ Params : String,long Returns : long} getFloat{ Params : String,float Returns : float} getConfResourceAsInputStream{ Params : String Returns : InputStream} getConfResourceAsReader{ Params : String Returns : Reader} getBoolean{ Params : String,boolean Returns : boolean} loadResource{ Params : String,boolean Returns : void} main{ Params : String[] Returns : void} ,,addConfResource getProps get get getInt getLong getFloat getConfResourceAsInputStream getConfResourceAsReader getBoolean loadResource main ,,
JHotDraw,net.nutch.util,NutchFile,1,1,0,0,0,false,0 ,0 ,0 ,dbName: String shareGroupName: String name: File nfs: NutchFileSystem ,getDBName{ Params :  Returns : String} getShareGroupName{ Params :  Returns : String} getName{ Params :  Returns : File} getFS{ Params :  Returns : NutchFileSystem} getFilename{ Params :  Returns : String} getCompleteFlagName{ Params :  Returns : String} toString{ Params :  Returns : String} ,,,,
JHotDraw,net.nutch.util,NutchFileSystem,2,1,0,0,0,true,0 ,0 ,0 ,,getWorkingFile{ Params :  Returns : File} put{ Params : NutchFile,File,boolean Returns : void} completeDir{ Params : NutchFile Returns : void} get{ Params : NutchFile Returns : File} get{ Params : NutchFile,long Returns : File} lock{ Params : NutchFile,boolean Returns : void} release{ Params : NutchFile Returns : void} delete{ Params : NutchFile Returns : void} renameTo{ Params : NutchFile,NutchFile Returns : void} close{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.util,NutchGenericFileSystem,1,1,1,0,0,false,0 ,NutchFileSystem ,0 ,dbRoot: File lockData: FileInputStream lock: FileLock shareSet: ShareSet destructivePut: boolean ,getWorkingFile{ Params :  Returns : File} get{ Params : NutchFile Returns : File} get{ Params : NutchFile,long Returns : File} lock{ Params : NutchFile,boolean Returns : void} release{ Params : NutchFile Returns : void} put{ Params : NutchFile,File,boolean Returns : void} putDir{ Params : NutchFile,File,boolean Returns : void} putFile{ Params : NutchFile,File,boolean Returns : void} completeDir{ Params : NutchFile Returns : void} delete{ Params : NutchFile Returns : void} renameTo{ Params : NutchFile,NutchFile Returns : void} close{ Params :  Returns : void} copyFile{ Params : File,String,String,String,boolean Returns : void} deleteFile{ Params : String,String,String Returns : void} renameFile{ Params : File,String,String,String,boolean Returns : void} lockFile{ Params : String,String,String,boolean Returns : void} release{ Params : String,String,String Returns : void} extractMachine{ Params : String Returns : String} extractPath{ Params : String Returns : String} ,,,,copyFile deleteFile renameFile lockFile release 
JHotDraw,net.nutch.util,NutchNFSFileSystem,1,1,0,0,0,false,NutchGenericFileSystem ,0 ,0 ,lockDataSet: TreeMap ,lockFile{ Params : String,String,String,boolean Returns : void} release{ Params : String,String,String Returns : void} copyFile{ Params : File,String,String,String,boolean Returns : void} deleteFile{ Params : String,String,String Returns : void} renameFile{ Params : File,String,String,String,boolean Returns : void} ,,,,
JHotDraw,net.nutch.util,NutchRemoteFileSystem,1,1,0,0,0,false,NutchGenericFileSystem ,0 ,0 ,SRCPATH_SYMBOL: String DSTPATH_SYMBOL: String DSTMACH_SYMBOL: String cpTemplate: String ,copyFile{ Params : File,String,String,String,boolean Returns : void} deleteFile{ Params : String,String,String Returns : void} lockFile{ Params : String,String,String,boolean Returns : void} release{ Params : String,String,String Returns : void} renameFile{ Params : File,String,String,String,boolean Returns : void} invoke{ Params : String Returns : void} ,,,,
JHotDraw,net.nutch.util,PrefixStringMatcher,1,1,0,0,0,false,TrieStringMatcher ,0 ,0 ,,matches{ Params : String Returns : boolean} shortestMatch{ Params : String Returns : String} longestMatch{ Params : String Returns : String} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.util,RobotsMetaProcessor,1,1,0,0,0,false,0 ,0 ,RobotsMetaIndicator ,,reset{ Params :  Returns : void} setNoFollow{ Params :  Returns : void} setNoIndex{ Params :  Returns : void} setNoCache{ Params :  Returns : void} setBaseHref{ Params : URL Returns : void} getNoIndex{ Params :  Returns : boolean} getNoFollow{ Params :  Returns : boolean} getNoCache{ Params :  Returns : boolean} getBaseHref{ Params :  Returns : URL} getRobotsMetaDirectives{ Params : RobotsMetaIndicator,Node,URL Returns : void} getRobotsMetaDirectivesHelper{ Params : RobotsMetaIndicator,Node,URL Returns : void} ,,getRobotsMetaDirectives getRobotsMetaDirectivesHelper ,,
JHotDraw,net.nutch.util,RobotsMetaIndicator,3,1,0,1,0,false,0 ,0 ,RobotsMetaIndicator ,noIndex: boolean noFollow: boolean noCache: boolean baseHref: URL ,reset{ Params :  Returns : void} setNoFollow{ Params :  Returns : void} setNoIndex{ Params :  Returns : void} setNoCache{ Params :  Returns : void} setBaseHref{ Params : URL Returns : void} getNoIndex{ Params :  Returns : boolean} getNoFollow{ Params :  Returns : boolean} getNoCache{ Params :  Returns : boolean} getBaseHref{ Params :  Returns : URL} getRobotsMetaDirectives{ Params : RobotsMetaIndicator,Node,URL Returns : void} getRobotsMetaDirectivesHelper{ Params : RobotsMetaIndicator,Node,URL Returns : void} ,,getRobotsMetaDirectives getRobotsMetaDirectivesHelper ,,
JHotDraw,net.nutch.util,ScoreStats,1,1,0,0,0,false,0 ,0 ,0 ,INVERTED_LOG_BASE_TEN: double EXP_127_MODIFIER: double RANGE_COMPRESSOR: double totalScores: long buckets: long ,addScore{ Params : float Returns : void} emitDistribution{ Params : PrintStream Returns : void} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.util,ShareGroup,1,1,0,0,0,false,0 ,0 ,0 ,name: String locations: String ,getName{ Params :  Returns : String} getLocations{ Params :  Returns : String[]} ,,,,
JHotDraw,net.nutch.util,ShareSet,1,1,0,0,0,false,0 ,0 ,0 ,shareGroups: TreeMap ,buildDefault{ Params : File Returns : void} getShareGroup{ Params : NutchFile Returns : ShareGroup} getShareGroups{ Params :  Returns : TreeMap} ,,,,
JHotDraw,net.nutch.util,SoftHashMap,1,1,0,0,0,false,AbstractMap ,Map ,FinalizationListener FinalizationNotifier MyFinalizationListener ,hashMap: Map keysToDelete: ArrayList ,finalizationOccurring{ Params :  Returns : void} addFinalizationListener{ Params : FinalizationListener Returns : void} finalizationOccurring{ Params :  Returns : void} clear{ Params :  Returns : void} queueKeyForDeletion{ Params : Object Returns : void} purgeQueuedKeys{ Params :  Returns : void} containsKey{ Params : Object Returns : boolean} containsValue{ Params : Object Returns : boolean} entrySet{ Params :  Returns : Set} get{ Params : Object Returns : Object} isEmpty{ Params :  Returns : boolean} keySet{ Params :  Returns : Set} put{ Params : Object,Object Returns : Object} remove{ Params : Object Returns : Object} size{ Params :  Returns : int} values{ Params :  Returns : Collection} ,,,,
JHotDraw,net.nutch.util,FinalizationListener,3,1,0,0,0,true,AbstractMap ,Map ,FinalizationListener FinalizationNotifier MyFinalizationListener ,,finalizationOccurring{ Params :  Returns : void} addFinalizationListener{ Params : FinalizationListener Returns : void} finalizationOccurring{ Params :  Returns : void} clear{ Params :  Returns : void} queueKeyForDeletion{ Params : Object Returns : void} purgeQueuedKeys{ Params :  Returns : void} containsKey{ Params : Object Returns : boolean} containsValue{ Params : Object Returns : boolean} entrySet{ Params :  Returns : Set} get{ Params : Object Returns : Object} isEmpty{ Params :  Returns : boolean} keySet{ Params :  Returns : Set} put{ Params : Object,Object Returns : Object} remove{ Params : Object Returns : Object} size{ Params :  Returns : int} values{ Params :  Returns : Collection} ,,,,
JHotDraw,net.nutch.util,FinalizationNotifier,3,1,0,0,0,true,AbstractMap ,Map ,FinalizationListener FinalizationNotifier MyFinalizationListener ,,finalizationOccurring{ Params :  Returns : void} addFinalizationListener{ Params : FinalizationListener Returns : void} finalizationOccurring{ Params :  Returns : void} clear{ Params :  Returns : void} queueKeyForDeletion{ Params : Object Returns : void} purgeQueuedKeys{ Params :  Returns : void} containsKey{ Params : Object Returns : boolean} containsValue{ Params : Object Returns : boolean} entrySet{ Params :  Returns : Set} get{ Params : Object Returns : Object} isEmpty{ Params :  Returns : boolean} keySet{ Params :  Returns : Set} put{ Params : Object,Object Returns : Object} remove{ Params : Object Returns : Object} size{ Params :  Returns : int} values{ Params :  Returns : Collection} ,,,,
JHotDraw,net.nutch.util,MyFinalizationListener,3,2,0,0,0,false,AbstractMap ,Map ,FinalizationListener FinalizationNotifier MyFinalizationListener ,key: Object ,finalizationOccurring{ Params :  Returns : void} addFinalizationListener{ Params : FinalizationListener Returns : void} finalizationOccurring{ Params :  Returns : void} clear{ Params :  Returns : void} queueKeyForDeletion{ Params : Object Returns : void} purgeQueuedKeys{ Params :  Returns : void} containsKey{ Params : Object Returns : boolean} containsValue{ Params : Object Returns : boolean} entrySet{ Params :  Returns : Set} get{ Params : Object Returns : Object} isEmpty{ Params :  Returns : boolean} keySet{ Params :  Returns : Set} put{ Params : Object,Object Returns : Object} remove{ Params : Object Returns : Object} size{ Params :  Returns : int} values{ Params :  Returns : Collection} ,,,,
JHotDraw,net.nutch.util,StringUtil,1,1,0,0,0,false,0 ,0 ,0 ,,rightPad{ Params : String,int Returns : String} leftPad{ Params : String,int Returns : String} ,,rightPad leftPad ,,
JHotDraw,net.nutch.util,SuffixStringMatcher,1,1,0,0,0,false,TrieStringMatcher ,0 ,0 ,,matches{ Params : String Returns : boolean} shortestMatch{ Params : String Returns : String} longestMatch{ Params : String Returns : String} main{ Params : String[] Returns : void} ,,main ,,
JHotDraw,net.nutch.util,ThreadPool,1,1,0,0,0,false,0 ,0 ,TaskThread ,numThreads: int running: boolean jobs: Vector ,run{ Params :  Returns : void} obtainJob{ Params :  Returns : Runnable} addJob{ Params : Runnable Returns : void} shutdown{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.util,TaskThread,3,0,0,0,0,false,0 ,0 ,TaskThread ,,run{ Params :  Returns : void} obtainJob{ Params :  Returns : Runnable} addJob{ Params : Runnable Returns : void} shutdown{ Params :  Returns : void} ,,,,
JHotDraw,net.nutch.util,TrieStringMatcher,1,1,1,0,0,false,0 ,0 ,TrieNode ,root: TrieNode ,isTerminal{ Params :  Returns : boolean} getChildAddIfNotPresent{ Params : char,boolean Returns : TrieNode} getChild{ Params : char Returns : TrieNode} compareTo{ Params : Object Returns : int} matchChar{ Params : TrieNode,String,int Returns : TrieNode} addPatternForward{ Params : String Returns : void} addPatternBackward{ Params : String Returns : void} matches{ Params : String Returns : boolean} shortestMatch{ Params : String Returns : String} longestMatch{ Params : String Returns : String} ,,,matchChar addPatternForward addPatternBackward ,matches shortestMatch longestMatch 
JHotDraw,net.nutch.util,TrieNode,3,3,0,0,0,false,0 ,0 ,TrieNode ,children: TrieNode childrenList: LinkedList nodeChar: char terminal: boolean ,isTerminal{ Params :  Returns : boolean} getChildAddIfNotPresent{ Params : char,boolean Returns : TrieNode} getChild{ Params : char Returns : TrieNode} compareTo{ Params : Object Returns : int} matchChar{ Params : TrieNode,String,int Returns : TrieNode} addPatternForward{ Params : String Returns : void} addPatternBackward{ Params : String Returns : void} matches{ Params : String Returns : boolean} shortestMatch{ Params : String Returns : String} longestMatch{ Params : String Returns : String} ,,,matchChar addPatternForward addPatternBackward ,matches shortestMatch longestMatch 
