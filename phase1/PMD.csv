Project Name,Package Name,Class Name,Class Type,Class Visibilty,Is Abstract,Is Static,Is Final,Is Interface,Extends,Implements,Children,Fields,Methods,Overrides,Static Methods,final Methods , Abstract Methods
PMD,net.sourceforge.pmd,AbstractRule,1,1,1,0,0,false,JavaParserVisitorAdapter ,Rule ,0 ,name: String properties: Properties message: String description: String example: String m_include: boolean m_priority: int ,getDescription{ Params :  Returns : String} setDescription{ Params : String Returns : void} getExample{ Params :  Returns : String} setExample{ Params : String Returns : void} hasProperty{ Params : String Returns : boolean} addProperty{ Params : String,String Returns : void} getDoubleProperty{ Params : String Returns : double} getIntProperty{ Params : String Returns : int} getBooleanProperty{ Params : String Returns : boolean} getStringProperty{ Params : String Returns : String} getName{ Params :  Returns : String} setName{ Params : String Returns : void} getMessage{ Params :  Returns : String} setMessage{ Params : String Returns : void} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} visitAll{ Params : List,RuleContext Returns : void} apply{ Params : List,RuleContext Returns : void} createRuleViolation{ Params : RuleContext,int Returns : RuleViolation} createRuleViolation{ Params : RuleContext,int,String Returns : RuleViolation} getProperties{ Params :  Returns : Properties} include{ Params :  Returns : boolean} setInclude{ Params : boolean Returns : void} getPriority{ Params :  Returns : int} getPriorityName{ Params :  Returns : String} setPriority{ Params : int Returns : void} ,,,,
PMD,net.sourceforge.pmd.ant,Formatter,1,1,0,0,0,false,0 ,0 ,0 ,renderer: Renderer toFile: File ,setType{ Params : String Returns : void} setToFile{ Params : File Returns : void} getRenderer{ Params :  Returns : Renderer} isToFileNull{ Params :  Returns : boolean} getToFileWriter{ Params : String Returns : Writer} toString{ Params :  Returns : String} ,,,,
PMD,net.sourceforge.pmd.ant,PMDTask,1,1,0,0,0,false,Task ,0 ,0 ,classpath: Path formatters: List filesets: List shortFilenames: boolean printToConsole: boolean ruleSetFiles: String encoding: String failOnError: boolean failOnRuleViolation: boolean targetJDK13: boolean failuresPropertyName: String EOL: String ,setShortFilenames{ Params : boolean Returns : void} setTargetJDK13{ Params : boolean Returns : void} setFailOnError{ Params : boolean Returns : void} setFailOnRuleViolation{ Params : boolean Returns : void} setPrintToConsole{ Params : boolean Returns : void} setRuleSetFiles{ Params : String Returns : void} setEncoding{ Params : String Returns : void} setFailuresPropertyName{ Params : String Returns : void} addFileset{ Params : FileSet Returns : void} addFormatter{ Params : Formatter Returns : void} setClasspath{ Params : Path Returns : void} getClasspath{ Params :  Returns : Path} createClasspath{ Params :  Returns : Path} setClasspathRef{ Params : Reference Returns : void} execute{ Params :  Returns : void} logRulesUsed{ Params : RuleSet Returns : void} validate{ Params :  Returns : void} createLongClasspath{ Params :  Returns : Path} ,,,,
PMD,net.sourceforge.pmd.ast,AccessFlags,2,1,0,0,0,true,Task ,0 ,0 ,ACC_PUBLIC: short ACC_PRIVATE: short ACC_PROTECTED: short ACC_STATIC: short ACC_FINAL: short ACC_SYNCHRONIZED: short ACC_VOLATILE: short ACC_TRANSIENT: short ACC_NATIVE: short ACC_INTERFACE: short ACC_ABSTRACT: short ACC_STRICT: short ACC_SUPER: short ,,,,,
PMD,net.sourceforge.pmd.ast,AccessNode,1,1,0,0,0,false,SimpleNode ,AccessFlags ,0 ,accessFlags: short ,setPublic{ Params :  Returns : void} isPublic{ Params :  Returns : boolean} setPrivate{ Params :  Returns : void} isPrivate{ Params :  Returns : boolean} setProtected{ Params :  Returns : void} isProtected{ Params :  Returns : boolean} setStatic{ Params :  Returns : void} isStatic{ Params :  Returns : boolean} setFinal{ Params :  Returns : void} isFinal{ Params :  Returns : boolean} setSynchronized{ Params :  Returns : void} isSynchronized{ Params :  Returns : boolean} setVolatile{ Params :  Returns : void} isVolatile{ Params :  Returns : boolean} setTransient{ Params :  Returns : void} isTransient{ Params :  Returns : boolean} setNative{ Params :  Returns : void} isNative{ Params :  Returns : boolean} setInterface{ Params :  Returns : void} isInterface{ Params :  Returns : boolean} setAbstract{ Params :  Returns : void} isAbstract{ Params :  Returns : boolean} setStrict{ Params :  Returns : void} isStrict{ Params :  Returns : boolean} setSuper{ Params :  Returns : void} isSuper{ Params :  Returns : boolean} isPackagePrivate{ Params :  Returns : boolean} collectDumpedModifiers{ Params : String Returns : String} ,,,,
PMD,net.sourceforge.pmd.ast,ASTAdditiveExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTAllocationExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTAndExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTArgumentList,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTArguments,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,getArgumentCount{ Params :  Returns : int} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTArrayDimsAndInits,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTArrayInitializer,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTAssertStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTAssignmentOperator,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTBlock,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTBlockStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTBooleanLiteral,1,1,0,0,0,false,SimpleNode ,0 ,0 ,isTrue: boolean ,setTrue{ Params :  Returns : void} isTrue{ Params :  Returns : boolean} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTBreakStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTCastExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTCastLookahead,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTCatch,1,1,0,0,0,false,0 ,0 ,0 ,parameter: ASTFormalParameter block: ASTBlock ,getFormalParameter{ Params :  Returns : ASTFormalParameter} getBlock{ Params :  Returns : ASTBlock} ,,,,
PMD,net.sourceforge.pmd.ast,ASTClassBody,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTClassBodyDeclaration,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} isAnonymousInnerClass{ Params :  Returns : boolean} ,,,,
PMD,net.sourceforge.pmd.ast,ASTClassDeclaration,1,1,0,0,0,false,AccessNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTCompilationUnit,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTConditionalAndExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTConditionalExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTConditionalOrExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTConstructorDeclaration,1,1,0,0,0,false,AccessNode ,0 ,0 ,,getParameterCount{ Params :  Returns : int} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTContinueStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTDoStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTEmptyStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTEnumDeclaration,1,1,0,0,0,false,AccessNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTEnumElement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTEqualityExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTExclusiveOrExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTExplicitConstructorInvocation,1,1,0,0,0,false,SimpleNode ,0 ,0 ,thisOrSuper: String ,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} getArgumentCount{ Params :  Returns : int} setIsThis{ Params :  Returns : void} setIsSuper{ Params :  Returns : void} isThis{ Params :  Returns : boolean} isSuper{ Params :  Returns : boolean} ,,,,
PMD,net.sourceforge.pmd.ast,ASTExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTFieldDeclaration,1,1,0,0,0,false,AccessNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTForInit,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTFormalParameter,1,1,0,0,0,false,AccessNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTFormalParameters,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,getParameterCount{ Params :  Returns : int} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTForStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTForUpdate,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTIfStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,hasElse: boolean ,setHasElse{ Params :  Returns : void} hasElse{ Params :  Returns : boolean} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTImportDeclaration,1,1,0,0,0,false,SimpleNode ,0 ,0 ,isImportOnDemand: boolean ,setImportOnDemand{ Params :  Returns : void} isImportOnDemand{ Params :  Returns : boolean} getImportedNameNode{ Params :  Returns : ASTName} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTInclusiveOrExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTInitializer,1,1,0,0,0,false,SimpleNode ,0 ,0 ,isStatic: boolean ,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} isStatic{ Params :  Returns : boolean} setStatic{ Params :  Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTInstanceOfExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTInterfaceDeclaration,1,1,0,0,0,false,AccessNode ,0 ,0 ,,getUnmodifedInterfaceDeclaration{ Params :  Returns : ASTUnmodifiedInterfaceDeclaration} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTInterfaceMemberDeclaration,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTLabeledStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTLiteral,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTLocalVariableDeclaration,1,1,0,0,0,false,AccessNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTMethodDeclaration,1,1,0,0,0,false,AccessNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTMethodDeclarationLookahead,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTMethodDeclarator,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,getParameterCount{ Params :  Returns : int} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTMultiplicativeExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTName,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTNameList,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTNestedClassDeclaration,1,1,0,0,0,false,AccessNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTNestedInterfaceDeclaration,1,1,0,0,0,false,AccessNode ,0 ,0 ,,getUnmodifedInterfaceDeclaration{ Params :  Returns : ASTUnmodifiedInterfaceDeclaration} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTNullLiteral,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTPackageDeclaration,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTPostfixExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTPreDecrementExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTPreIncrementExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTPrimaryExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTPrimaryPrefix,1,1,0,0,0,false,SimpleNode ,0 ,0 ,usesThisModifier: boolean usesSuperModifier: boolean ,setUsesThisModifier{ Params :  Returns : void} usesThisModifier{ Params :  Returns : boolean} setUsesSuperModifier{ Params :  Returns : void} usesSuperModifier{ Params :  Returns : boolean} dump{ Params : String Returns : void} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTPrimarySuffix,1,1,0,0,0,false,SimpleNode ,0 ,0 ,isArguments: boolean ,setIsArguments{ Params :  Returns : void} isArguments{ Params :  Returns : boolean} dump{ Params : String Returns : void} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTPrimitiveType,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTRelationalExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTResultType,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,isVoid{ Params :  Returns : boolean} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTReturnStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTShiftExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTStatementExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTStatementExpressionList,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTSwitchLabel,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTSwitchStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTSynchronizedStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTThrowStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTTryStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,hasCatch: boolean hasFinally: boolean ,setHasCatch{ Params :  Returns : void} setHasFinally{ Params :  Returns : void} hasCatch{ Params :  Returns : boolean} hasFinally{ Params :  Returns : boolean} getFinallyBlock{ Params :  Returns : ASTBlock} getCatchBlocks{ Params :  Returns : List} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTType,1,1,0,0,0,false,SimpleNode ,0 ,0 ,isArray: boolean dimensions: int ,isArray{ Params :  Returns : boolean} setIsArray{ Params :  Returns : void} addDimension{ Params :  Returns : void} getDimensions{ Params :  Returns : int} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTTypeDeclaration,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTUnaryExpression,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTUnaryExpressionNotPlusMinus,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTUnmodifiedClassDeclaration,1,1,0,0,0,false,SimpleNode ,0 ,0 ,hasExplicitExtends: boolean hasExplicitImplements: boolean ,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} setHasExplicitExtends{ Params :  Returns : void} hasExplicitExtends{ Params :  Returns : boolean} setHasExplicitImplements{ Params :  Returns : void} hasExplicitImplements{ Params :  Returns : boolean} dump{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,ASTUnmodifiedInterfaceDeclaration,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTVariableDeclarator,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTVariableDeclaratorId,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} isExceptionBlockParameter{ Params :  Returns : boolean} getTypeNameNode{ Params :  Returns : SimpleNode} getTypeNode{ Params :  Returns : ASTType} dump{ Params : String Returns : void} findTypeNameNode{ Params : Node Returns : SimpleNode} ,,,,
PMD,net.sourceforge.pmd.ast,ASTVariableInitializer,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ASTWhileStatement,1,1,0,0,0,false,SimpleNode ,0 ,0 ,,jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,CharStream,2,1,0,0,0,true,SimpleNode ,0 ,0 ,,readChar{ Params :  Returns : char} getColumn{ Params :  Returns : int} getLine{ Params :  Returns : int} getEndColumn{ Params :  Returns : int} getEndLine{ Params :  Returns : int} getBeginColumn{ Params :  Returns : int} getBeginLine{ Params :  Returns : int} backup{ Params : int Returns : void} BeginToken{ Params :  Returns : char} GetImage{ Params :  Returns : String} GetSuffix{ Params : int Returns : char[]} Done{ Params :  Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,DiscardableNodeCleaner,1,1,0,0,0,false,0 ,0 ,0 ,clazzes: Class ,clean{ Params : ASTCompilationUnit Returns : void} clean{ Params : ASTCompilationUnit,Class Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,JavaCharStream,1,1,0,0,0,false,0 ,CharStream ,0 ,staticFlag: boolean bufpos: int bufsize: int available: int tokenBegin: int bufline: int bufcolumn: int column: int line: int prevCharIsCR: boolean prevCharIsLF: boolean inputStream: java.io.Reader nextCharBuf: char buffer: char maxNextCharInd: int nextCharInd: int inBuf: int ,hexval{ Params : char Returns : int} ExpandBuff{ Params : boolean Returns : void} FillBuff{ Params :  Returns : void} ReadByte{ Params :  Returns : char} BeginToken{ Params :  Returns : char} AdjustBuffSize{ Params :  Returns : void} UpdateLineColumn{ Params : char Returns : void} readChar{ Params :  Returns : char} getColumn{ Params :  Returns : int} getLine{ Params :  Returns : int} getEndColumn{ Params :  Returns : int} getEndLine{ Params :  Returns : int} getBeginColumn{ Params :  Returns : int} getBeginLine{ Params :  Returns : int} backup{ Params : int Returns : void} ReInit{ Params : java.io.Reader,int,int,int Returns : void} ReInit{ Params : java.io.Reader,int,int Returns : void} ReInit{ Params : java.io.Reader Returns : void} ReInit{ Params : java.io.InputStream,int,int,int Returns : void} ReInit{ Params : java.io.InputStream,int,int Returns : void} ReInit{ Params : java.io.InputStream Returns : void} GetImage{ Params :  Returns : String} GetSuffix{ Params : int Returns : char[]} Done{ Params :  Returns : void} adjustBeginLineColumn{ Params : int,int Returns : void} ,,hexval ,,
PMD,net.sourceforge.pmd.ast,JavaParser,1,1,0,0,0,false,0 ,JavaParserTreeConstants JavaParserConstants ,LookaheadSuccess JJCalls ,jjtree: JJTJavaParserState usingAssertAsIdentifier: boolean isJDK15: boolean token_source: JavaParserTokenManager token: Token jj_ntk: int jj_scanpos: Token jj_la: int lookingAhead: boolean jj_semLA: boolean jj_gen: int jj_la1: int jj_la1_0: int jj_la1_1: int jj_la1_2: int jj_la1_3: int jj_2_rtns: JJCalls jj_rescan: boolean jj_gc: int jj_ls: LookaheadSuccess jj_expentries: java.util.Vector jj_expentry: int jj_kind: int jj_lasttokens: int jj_endpos: int ,setAssertAsIdentifier{ Params :  Returns : void} setJDK15{ Params :  Returns : void} checkForBadAssertUsage{ Params : String,String Returns : void} checkForBadEnumUsage{ Params : String,String Returns : void} isNextTokenAnAssert{ Params :  Returns : boolean} enumLookahead{ Params :  Returns : boolean} checkForDiscard{ Params : SimpleNode Returns : void} discardNodes{ Params : ASTCompilationUnit Returns : void} CompilationUnit{ Params :  Returns : ASTCompilationUnit} PackageDeclaration{ Params :  Returns : void} ImportDeclaration{ Params :  Returns : void} TypeDeclaration{ Params :  Returns : void} ClassDeclaration{ Params :  Returns : void} UnmodifiedClassDeclaration{ Params :  Returns : void} ClassBody{ Params :  Returns : void} NestedClassDeclaration{ Params :  Returns : void} ClassBodyDeclaration{ Params :  Returns : void} EnumDeclaration{ Params :  Returns : void} EnumElement{ Params :  Returns : void} MethodDeclarationLookahead{ Params :  Returns : void} InterfaceDeclaration{ Params :  Returns : void} NestedInterfaceDeclaration{ Params :  Returns : void} UnmodifiedInterfaceDeclaration{ Params :  Returns : void} InterfaceMemberDeclaration{ Params :  Returns : void} FieldDeclaration{ Params :  Returns : void} VariableDeclarator{ Params :  Returns : void} VariableDeclaratorId{ Params :  Returns : void} VariableInitializer{ Params :  Returns : void} ArrayInitializer{ Params :  Returns : void} MethodDeclaration{ Params :  Returns : void} MethodDeclarator{ Params :  Returns : void} FormalParameters{ Params :  Returns : void} FormalParameter{ Params :  Returns : void} ConstructorDeclaration{ Params :  Returns : void} ExplicitConstructorInvocation{ Params :  Returns : void} Initializer{ Params :  Returns : void} Type{ Params :  Returns : void} PrimitiveType{ Params :  Returns : void} ResultType{ Params :  Returns : void} Name{ Params :  Returns : void} NameList{ Params :  Returns : void} Expression{ Params :  Returns : void} AssignmentOperator{ Params :  Returns : void} ConditionalExpression{ Params :  Returns : void} ConditionalOrExpression{ Params :  Returns : void} ConditionalAndExpression{ Params :  Returns : void} InclusiveOrExpression{ Params :  Returns : void} ExclusiveOrExpression{ Params :  Returns : void} AndExpression{ Params :  Returns : void} EqualityExpression{ Params :  Returns : void} InstanceOfExpression{ Params :  Returns : void} RelationalExpression{ Params :  Returns : void} ShiftExpression{ Params :  Returns : void} AdditiveExpression{ Params :  Returns : void} MultiplicativeExpression{ Params :  Returns : void} UnaryExpression{ Params :  Returns : void} PreIncrementExpression{ Params :  Returns : void} PreDecrementExpression{ Params :  Returns : void} UnaryExpressionNotPlusMinus{ Params :  Returns : void} CastLookahead{ Params :  Returns : void} PostfixExpression{ Params :  Returns : void} CastExpression{ Params :  Returns : void} PrimaryExpression{ Params :  Returns : void} PrimaryPrefix{ Params :  Returns : void} PrimarySuffix{ Params :  Returns : void} Literal{ Params :  Returns : void} BooleanLiteral{ Params :  Returns : void} NullLiteral{ Params :  Returns : void} Arguments{ Params :  Returns : void} ArgumentList{ Params :  Returns : void} AllocationExpression{ Params :  Returns : void} ArrayDimsAndInits{ Params :  Returns : void} Statement{ Params :  Returns : void} LabeledStatement{ Params :  Returns : void} Block{ Params :  Returns : void} BlockStatement{ Params :  Returns : void} LocalVariableDeclaration{ Params :  Returns : void} EmptyStatement{ Params :  Returns : void} StatementExpression{ Params :  Returns : void} SwitchStatement{ Params :  Returns : void} SwitchLabel{ Params :  Returns : void} IfStatement{ Params :  Returns : void} WhileStatement{ Params :  Returns : void} DoStatement{ Params :  Returns : void} ForStatement{ Params :  Returns : void} ForInit{ Params :  Returns : void} StatementExpressionList{ Params :  Returns : void} ForUpdate{ Params :  Returns : void} BreakStatement{ Params :  Returns : void} ContinueStatement{ Params :  Returns : void} ReturnStatement{ Params :  Returns : void} ThrowStatement{ Params :  Returns : void} SynchronizedStatement{ Params :  Returns : void} TryStatement{ Params :  Returns : void} AssertStatement{ Params :  Returns : void} jj_2_1{ Params : int Returns : boolean} jj_2_2{ Params : int Returns : boolean} jj_2_3{ Params : int Returns : boolean} jj_2_4{ Params : int Returns : boolean} jj_2_5{ Params : int Returns : boolean} jj_2_6{ Params : int Returns : boolean} jj_2_7{ Params : int Returns : boolean} jj_2_8{ Params : int Returns : boolean} jj_2_9{ Params : int Returns : boolean} jj_2_10{ Params : int Returns : boolean} jj_2_11{ Params : int Returns : boolean} jj_2_12{ Params : int Returns : boolean} jj_2_13{ Params : int Returns : boolean} jj_2_14{ Params : int Returns : boolean} jj_2_15{ Params : int Returns : boolean} jj_2_16{ Params : int Returns : boolean} jj_2_17{ Params : int Returns : boolean} jj_2_18{ Params : int Returns : boolean} jj_2_19{ Params : int Returns : boolean} jj_2_20{ Params : int Returns : boolean} jj_2_21{ Params : int Returns : boolean} jj_2_22{ Params : int Returns : boolean} jj_2_23{ Params : int Returns : boolean} jj_2_24{ Params : int Returns : boolean} jj_2_25{ Params : int Returns : boolean} jj_2_26{ Params : int Returns : boolean} jj_2_27{ Params : int Returns : boolean} jj_2_28{ Params : int Returns : boolean} jj_2_29{ Params : int Returns : boolean} jj_2_30{ Params : int Returns : boolean} jj_2_31{ Params : int Returns : boolean} jj_2_32{ Params : int Returns : boolean} jj_2_33{ Params : int Returns : boolean} jj_2_34{ Params : int Returns : boolean} jj_2_35{ Params : int Returns : boolean} jj_2_36{ Params : int Returns : boolean} jj_3R_110{ Params :  Returns : boolean} jj_3R_105{ Params :  Returns : boolean} jj_3R_63{ Params :  Returns : boolean} jj_3R_109{ Params :  Returns : boolean} jj_3R_101{ Params :  Returns : boolean} jj_3R_100{ Params :  Returns : boolean} jj_3R_99{ Params :  Returns : boolean} jj_3R_98{ Params :  Returns : boolean} jj_3R_97{ Params :  Returns : boolean} jj_3R_96{ Params :  Returns : boolean} jj_3R_95{ Params :  Returns : boolean} jj_3R_94{ Params :  Returns : boolean} jj_3R_61{ Params :  Returns : boolean} jj_3R_286{ Params :  Returns : boolean} jj_3R_108{ Params :  Returns : boolean} jj_3R_67{ Params :  Returns : boolean} jj_3_16{ Params :  Returns : boolean} jj_3R_78{ Params :  Returns : boolean} jj_3R_47{ Params :  Returns : boolean} jj_3_13{ Params :  Returns : boolean} jj_3_15{ Params :  Returns : boolean} jj_3R_84{ Params :  Returns : boolean} jj_3R_83{ Params :  Returns : boolean} jj_3R_56{ Params :  Returns : boolean} jj_3R_322{ Params :  Returns : boolean} jj_3_14{ Params :  Returns : boolean} jj_3R_287{ Params :  Returns : boolean} jj_3R_205{ Params :  Returns : boolean} jj_3R_204{ Params :  Returns : boolean} jj_3R_309{ Params :  Returns : boolean} jj_3R_167{ Params :  Returns : boolean} jj_3R_203{ Params :  Returns : boolean} jj_3R_131{ Params :  Returns : boolean} jj_3R_289{ Params :  Returns : boolean} jj_3R_336{ Params :  Returns : boolean} jj_3R_321{ Params :  Returns : boolean} jj_3R_307{ Params :  Returns : boolean} jj_3R_285{ Params :  Returns : boolean} jj_3_12{ Params :  Returns : boolean} jj_3R_288{ Params :  Returns : boolean} jj_3R_290{ Params :  Returns : boolean} jj_3R_214{ Params :  Returns : boolean} jj_3R_213{ Params :  Returns : boolean} jj_3R_212{ Params :  Returns : boolean} jj_3R_211{ Params :  Returns : boolean} jj_3R_210{ Params :  Returns : boolean} jj_3R_209{ Params :  Returns : boolean} jj_3R_208{ Params :  Returns : boolean} jj_3R_207{ Params :  Returns : boolean} jj_3R_168{ Params :  Returns : boolean} jj_3R_206{ Params :  Returns : boolean} jj_3R_132{ Params :  Returns : boolean} jj_3R_267{ Params :  Returns : boolean} jj_3R_134{ Params :  Returns : boolean} jj_3R_313{ Params :  Returns : boolean} jj_3R_82{ Params :  Returns : boolean} jj_3R_295{ Params :  Returns : boolean} jj_3R_81{ Params :  Returns : boolean} jj_3R_55{ Params :  Returns : boolean} jj_3R_324{ Params :  Returns : boolean} jj_3R_312{ Params :  Returns : boolean} jj_3R_294{ Params :  Returns : boolean} jj_3R_221{ Params :  Returns : boolean} jj_3R_220{ Params :  Returns : boolean} jj_3R_219{ Params :  Returns : boolean} jj_3R_218{ Params :  Returns : boolean} jj_3R_217{ Params :  Returns : boolean} jj_3R_216{ Params :  Returns : boolean} jj_3R_169{ Params :  Returns : boolean} jj_3R_215{ Params :  Returns : boolean} jj_3R_133{ Params :  Returns : boolean} jj_3_11{ Params :  Returns : boolean} jj_3R_54{ Params :  Returns : boolean} jj_3_10{ Params :  Returns : boolean} jj_3R_53{ Params :  Returns : boolean} jj_3_9{ Params :  Returns : boolean} jj_3R_335{ Params :  Returns : boolean} jj_3R_334{ Params :  Returns : boolean} jj_3R_333{ Params :  Returns : boolean} jj_3R_332{ Params :  Returns : boolean} jj_3R_320{ Params :  Returns : boolean} jj_3R_306{ Params :  Returns : boolean} jj_3R_305{ Params :  Returns : boolean} jj_3R_137{ Params :  Returns : boolean} jj_3R_202{ Params :  Returns : boolean} jj_3R_201{ Params :  Returns : boolean} jj_3R_200{ Params :  Returns : boolean} jj_3R_199{ Params :  Returns : boolean} jj_3R_198{ Params :  Returns : boolean} jj_3R_197{ Params :  Returns : boolean} jj_3R_166{ Params :  Returns : boolean} jj_3R_196{ Params :  Returns : boolean} jj_3R_130{ Params :  Returns : boolean} jj_3R_311{ Params :  Returns : boolean} jj_3R_188{ Params :  Returns : boolean} jj_3R_187{ Params :  Returns : boolean} jj_3R_164{ Params :  Returns : boolean} jj_3R_186{ Params :  Returns : boolean} jj_3R_128{ Params :  Returns : boolean} jj_3R_80{ Params :  Returns : boolean} jj_3R_52{ Params :  Returns : boolean} jj_3R_310{ Params :  Returns : boolean} jj_3R_292{ Params :  Returns : boolean} jj_3R_293{ Params :  Returns : boolean} jj_3R_291{ Params :  Returns : boolean} jj_3R_185{ Params :  Returns : boolean} jj_3R_184{ Params :  Returns : boolean} jj_3R_183{ Params :  Returns : boolean} jj_3R_182{ Params :  Returns : boolean} jj_3R_163{ Params :  Returns : boolean} jj_3R_181{ Params :  Returns : boolean} jj_3R_340{ Params :  Returns : boolean} jj_3R_127{ Params :  Returns : boolean} jj_3_8{ Params :  Returns : boolean} jj_3R_50{ Params :  Returns : boolean} jj_3_7{ Params :  Returns : boolean} jj_3R_49{ Params :  Returns : boolean} jj_3R_77{ Params :  Returns : boolean} jj_3_6{ Params :  Returns : boolean} jj_3R_48{ Params :  Returns : boolean} jj_3R_76{ Params :  Returns : boolean} jj_3_5{ Params :  Returns : boolean} jj_3R_75{ Params :  Returns : boolean} jj_3R_148{ Params :  Returns : boolean} jj_3R_74{ Params :  Returns : boolean} jj_3R_73{ Params :  Returns : boolean} jj_3R_72{ Params :  Returns : boolean} jj_3R_348{ Params :  Returns : boolean} jj_3R_347{ Params :  Returns : boolean} jj_3_4{ Params :  Returns : boolean} jj_3R_46{ Params :  Returns : boolean} jj_3R_161{ Params :  Returns : boolean} jj_3R_195{ Params :  Returns : boolean} jj_3R_194{ Params :  Returns : boolean} jj_3R_193{ Params :  Returns : boolean} jj_3R_192{ Params :  Returns : boolean} jj_3R_191{ Params :  Returns : boolean} jj_3R_190{ Params :  Returns : boolean} jj_3R_165{ Params :  Returns : boolean} jj_3R_189{ Params :  Returns : boolean} jj_3R_345{ Params :  Returns : boolean} jj_3R_160{ Params :  Returns : boolean} jj_3R_346{ Params :  Returns : boolean} jj_3R_129{ Params :  Returns : boolean} jj_3_3{ Params :  Returns : boolean} jj_3R_159{ Params :  Returns : boolean} jj_3R_264{ Params :  Returns : boolean} jj_3R_362{ Params :  Returns : boolean} jj_3R_304{ Params :  Returns : boolean} jj_3R_158{ Params :  Returns : boolean} jj_3R_303{ Params :  Returns : boolean} jj_3R_136{ Params :  Returns : boolean} jj_3R_157{ Params :  Returns : boolean} jj_3R_344{ Params :  Returns : boolean} jj_3R_180{ Params :  Returns : boolean} jj_3R_179{ Params :  Returns : boolean} jj_3R_156{ Params :  Returns : boolean} jj_3R_178{ Params :  Returns : boolean} jj_3R_162{ Params :  Returns : boolean} jj_3R_177{ Params :  Returns : boolean} jj_3R_126{ Params :  Returns : boolean} jj_3R_353{ Params :  Returns : boolean} jj_3R_342{ Params :  Returns : boolean} jj_3R_45{ Params :  Returns : boolean} jj_3_36{ Params :  Returns : boolean} jj_3R_361{ Params :  Returns : boolean} jj_3_2{ Params :  Returns : boolean} jj_3R_343{ Params :  Returns : boolean} jj_3R_71{ Params :  Returns : boolean} jj_3R_360{ Params :  Returns : boolean} jj_3R_70{ Params :  Returns : boolean} jj_3R_359{ Params :  Returns : boolean} jj_3R_352{ Params :  Returns : boolean} jj_3R_44{ Params :  Returns : boolean} jj_3R_69{ Params :  Returns : boolean} jj_3R_155{ Params :  Returns : boolean} jj_3R_154{ Params :  Returns : boolean} jj_3R_153{ Params :  Returns : boolean} jj_3R_339{ Params :  Returns : boolean} jj_3_1{ Params :  Returns : boolean} jj_3R_152{ Params :  Returns : boolean} jj_3_35{ Params :  Returns : boolean} jj_3R_358{ Params :  Returns : boolean} jj_3R_357{ Params :  Returns : boolean} jj_3R_351{ Params :  Returns : boolean} jj_3R_341{ Params :  Returns : boolean} jj_3R_151{ Params :  Returns : boolean} jj_3R_356{ Params :  Returns : boolean} jj_3R_350{ Params :  Returns : boolean} jj_3R_176{ Params :  Returns : boolean} jj_3R_175{ Params :  Returns : boolean} jj_3R_150{ Params :  Returns : boolean} jj_3R_174{ Params :  Returns : boolean} jj_3R_149{ Params :  Returns : boolean} jj_3R_280{ Params :  Returns : boolean} jj_3R_170{ Params :  Returns : boolean} jj_3R_135{ Params :  Returns : boolean} jj_3_33{ Params :  Returns : boolean} jj_3R_284{ Params :  Returns : boolean} jj_3R_89{ Params :  Returns : boolean} jj_3R_88{ Params :  Returns : boolean} jj_3_34{ Params :  Returns : boolean} jj_3R_87{ Params :  Returns : boolean} jj_3R_86{ Params :  Returns : boolean} jj_3R_85{ Params :  Returns : boolean} jj_3_32{ Params :  Returns : boolean} jj_3R_57{ Params :  Returns : boolean} jj_3_29{ Params :  Returns : boolean} jj_3R_79{ Params :  Returns : boolean} jj_3R_66{ Params :  Returns : boolean} jj_3R_125{ Params :  Returns : boolean} jj_3R_124{ Params :  Returns : boolean} jj_3R_123{ Params :  Returns : boolean} jj_3R_283{ Params :  Returns : boolean} jj_3R_122{ Params :  Returns : boolean} jj_3R_121{ Params :  Returns : boolean} jj_3R_120{ Params :  Returns : boolean} jj_3R_119{ Params :  Returns : boolean} jj_3R_327{ Params :  Returns : boolean} jj_3R_118{ Params :  Returns : boolean} jj_3R_117{ Params :  Returns : boolean} jj_3R_116{ Params :  Returns : boolean} jj_3R_115{ Params :  Returns : boolean} jj_3R_114{ Params :  Returns : boolean} jj_3R_299{ Params :  Returns : boolean} jj_3R_113{ Params :  Returns : boolean} jj_3R_112{ Params :  Returns : boolean} jj_3_31{ Params :  Returns : boolean} jj_3R_111{ Params :  Returns : boolean} jj_3R_68{ Params :  Returns : boolean} jj_3R_260{ Params :  Returns : boolean} jj_3R_263{ Params :  Returns : boolean} jj_3R_279{ Params :  Returns : boolean} jj_3_28{ Params :  Returns : boolean} jj_3R_259{ Params :  Returns : boolean} jj_3_30{ Params :  Returns : boolean} jj_3R_254{ Params :  Returns : boolean} jj_3R_282{ Params :  Returns : boolean} jj_3R_256{ Params :  Returns : boolean} jj_3R_172{ Params :  Returns : boolean} jj_3R_255{ Params :  Returns : boolean} jj_3R_106{ Params :  Returns : boolean} jj_3R_355{ Params :  Returns : boolean} jj_3_27{ Params :  Returns : boolean} jj_3R_64{ Params :  Returns : boolean} jj_3R_145{ Params :  Returns : boolean} jj_3R_91{ Params :  Returns : boolean} jj_3R_146{ Params :  Returns : boolean} jj_3R_59{ Params :  Returns : boolean} jj_3R_316{ Params :  Returns : boolean} jj_3R_233{ Params :  Returns : boolean} jj_3R_326{ Params :  Returns : boolean} jj_3R_232{ Params :  Returns : boolean} jj_3R_237{ Params :  Returns : boolean} jj_3R_298{ Params :  Returns : boolean} jj_3R_227{ Params :  Returns : boolean} jj_3R_226{ Params :  Returns : boolean} jj_3R_225{ Params :  Returns : boolean} jj_3R_224{ Params :  Returns : boolean} jj_3R_223{ Params :  Returns : boolean} jj_3R_278{ Params :  Returns : boolean} jj_3R_171{ Params :  Returns : boolean} jj_3R_222{ Params :  Returns : boolean} jj_3R_272{ Params :  Returns : boolean} jj_3R_104{ Params :  Returns : boolean} jj_3R_103{ Params :  Returns : boolean} jj_3R_102{ Params :  Returns : boolean} jj_3_26{ Params :  Returns : boolean} jj_3_23{ Params :  Returns : boolean} jj_3_25{ Params :  Returns : boolean} jj_3R_62{ Params :  Returns : boolean} jj_3_24{ Params :  Returns : boolean} jj_3_22{ Params :  Returns : boolean} jj_3R_144{ Params :  Returns : boolean} jj_3R_143{ Params :  Returns : boolean} jj_3R_142{ Params :  Returns : boolean} jj_3R_141{ Params :  Returns : boolean} jj_3R_354{ Params :  Returns : boolean} jj_3R_349{ Params :  Returns : boolean} jj_3R_140{ Params :  Returns : boolean} jj_3R_301{ Params :  Returns : boolean} jj_3R_139{ Params :  Returns : boolean} jj_3R_138{ Params :  Returns : boolean} jj_3R_90{ Params :  Returns : boolean} jj_3_21{ Params :  Returns : boolean} jj_3R_329{ Params :  Returns : boolean} jj_3R_58{ Params :  Returns : boolean} jj_3R_315{ Params :  Returns : boolean} jj_3R_338{ Params :  Returns : boolean} jj_3R_330{ Params :  Returns : boolean} jj_3R_296{ Params :  Returns : boolean} jj_3R_337{ Params :  Returns : boolean} jj_3R_325{ Params :  Returns : boolean} jj_3R_314{ Params :  Returns : boolean} jj_3_20{ Params :  Returns : boolean} jj_3R_331{ Params :  Returns : boolean} jj_3R_297{ Params :  Returns : boolean} jj_3R_93{ Params :  Returns : boolean} jj_3R_276{ Params :  Returns : boolean} jj_3_18{ Params :  Returns : boolean} jj_3R_92{ Params :  Returns : boolean} jj_3R_60{ Params :  Returns : boolean} jj_3_19{ Params :  Returns : boolean} jj_3R_277{ Params :  Returns : boolean} jj_3R_274{ Params :  Returns : boolean} jj_3R_270{ Params :  Returns : boolean} jj_3R_319{ Params :  Returns : boolean} jj_3R_328{ Params :  Returns : boolean} jj_3R_318{ Params :  Returns : boolean} jj_3R_271{ Params :  Returns : boolean} jj_3R_317{ Params :  Returns : boolean} jj_3R_302{ Params :  Returns : boolean} jj_3R_268{ Params :  Returns : boolean} jj_3R_231{ Params :  Returns : boolean} jj_3R_265{ Params :  Returns : boolean} jj_3R_230{ Params :  Returns : boolean} jj_3R_300{ Params :  Returns : boolean} jj_3R_257{ Params :  Returns : boolean} jj_3R_275{ Params :  Returns : boolean} jj_3R_281{ Params :  Returns : boolean} jj_3R_261{ Params :  Returns : boolean} jj_3R_252{ Params :  Returns : boolean} jj_3R_273{ Params :  Returns : boolean} jj_3R_238{ Params :  Returns : boolean} jj_3R_269{ Params :  Returns : boolean} jj_3R_234{ Params :  Returns : boolean} jj_3R_266{ Params :  Returns : boolean} jj_3R_262{ Params :  Returns : boolean} jj_3R_258{ Params :  Returns : boolean} jj_3R_253{ Params :  Returns : boolean} jj_3R_251{ Params :  Returns : boolean} jj_3R_236{ Params :  Returns : boolean} jj_3R_229{ Params :  Returns : boolean} jj_3R_173{ Params :  Returns : boolean} jj_3R_147{ Params :  Returns : boolean} jj_3R_107{ Params :  Returns : boolean} jj_3R_250{ Params :  Returns : boolean} jj_3R_249{ Params :  Returns : boolean} jj_3R_248{ Params :  Returns : boolean} jj_3R_247{ Params :  Returns : boolean} jj_3R_246{ Params :  Returns : boolean} jj_3R_245{ Params :  Returns : boolean} jj_3R_244{ Params :  Returns : boolean} jj_3R_243{ Params :  Returns : boolean} jj_3R_242{ Params :  Returns : boolean} jj_3R_241{ Params :  Returns : boolean} jj_3R_240{ Params :  Returns : boolean} jj_3R_235{ Params :  Returns : boolean} jj_3R_239{ Params :  Returns : boolean} jj_3R_228{ Params :  Returns : boolean} jj_3R_65{ Params :  Returns : boolean} jj_3R_323{ Params :  Returns : boolean} jj_3R_308{ Params :  Returns : boolean} jj_3_17{ Params :  Returns : boolean} jj_3R_51{ Params :  Returns : boolean} jj_la1_0{ Params :  Returns : void} jj_la1_1{ Params :  Returns : void} jj_la1_2{ Params :  Returns : void} jj_la1_3{ Params :  Returns : void} ReInit{ Params : CharStream Returns : void} ReInit{ Params : JavaParserTokenManager Returns : void} jj_consume_token{ Params : int Returns : Token} jj_scan_token{ Params : int Returns : boolean} getNextToken{ Params :  Returns : Token} getToken{ Params : int Returns : Token} jj_ntk{ Params :  Returns : int} jj_add_error_token{ Params : int,int Returns : void} generateParseException{ Params :  Returns : ParseException} enable_tracing{ Params :  Returns : void} disable_tracing{ Params :  Returns : void} jj_rescan_token{ Params :  Returns : void} jj_save{ Params : int,int Returns : void} ,,jj_la1_0 jj_la1_1 jj_la1_2 jj_la1_3 ,CompilationUnit PackageDeclaration ImportDeclaration TypeDeclaration ClassDeclaration UnmodifiedClassDeclaration ClassBody NestedClassDeclaration ClassBodyDeclaration EnumDeclaration EnumElement MethodDeclarationLookahead InterfaceDeclaration NestedInterfaceDeclaration UnmodifiedInterfaceDeclaration InterfaceMemberDeclaration FieldDeclaration VariableDeclarator VariableDeclaratorId VariableInitializer ArrayInitializer MethodDeclaration MethodDeclarator FormalParameters FormalParameter ConstructorDeclaration ExplicitConstructorInvocation Initializer Type PrimitiveType ResultType Name NameList Expression AssignmentOperator ConditionalExpression ConditionalOrExpression ConditionalAndExpression InclusiveOrExpression ExclusiveOrExpression AndExpression EqualityExpression InstanceOfExpression RelationalExpression ShiftExpression AdditiveExpression MultiplicativeExpression UnaryExpression PreIncrementExpression PreDecrementExpression UnaryExpressionNotPlusMinus CastLookahead PostfixExpression CastExpression PrimaryExpression PrimaryPrefix PrimarySuffix Literal BooleanLiteral NullLiteral Arguments ArgumentList AllocationExpression ArrayDimsAndInits Statement LabeledStatement Block BlockStatement LocalVariableDeclaration EmptyStatement StatementExpression SwitchStatement SwitchLabel IfStatement WhileStatement DoStatement ForStatement ForInit StatementExpressionList ForUpdate BreakStatement ContinueStatement ReturnStatement ThrowStatement SynchronizedStatement TryStatement AssertStatement jj_2_1 jj_2_2 jj_2_3 jj_2_4 jj_2_5 jj_2_6 jj_2_7 jj_2_8 jj_2_9 jj_2_10 jj_2_11 jj_2_12 jj_2_13 jj_2_14 jj_2_15 jj_2_16 jj_2_17 jj_2_18 jj_2_19 jj_2_20 jj_2_21 jj_2_22 jj_2_23 jj_2_24 jj_2_25 jj_2_26 jj_2_27 jj_2_28 jj_2_29 jj_2_30 jj_2_31 jj_2_32 jj_2_33 jj_2_34 jj_2_35 jj_2_36 jj_3R_110 jj_3R_105 jj_3R_63 jj_3R_109 jj_3R_101 jj_3R_100 jj_3R_99 jj_3R_98 jj_3R_97 jj_3R_96 jj_3R_95 jj_3R_94 jj_3R_61 jj_3R_286 jj_3R_108 jj_3R_67 jj_3_16 jj_3R_78 jj_3R_47 jj_3_13 jj_3_15 jj_3R_84 jj_3R_83 jj_3R_56 jj_3R_322 jj_3_14 jj_3R_287 jj_3R_205 jj_3R_204 jj_3R_309 jj_3R_167 jj_3R_203 jj_3R_131 jj_3R_289 jj_3R_336 jj_3R_321 jj_3R_307 jj_3R_285 jj_3_12 jj_3R_288 jj_3R_290 jj_3R_214 jj_3R_213 jj_3R_212 jj_3R_211 jj_3R_210 jj_3R_209 jj_3R_208 jj_3R_207 jj_3R_168 jj_3R_206 jj_3R_132 jj_3R_267 jj_3R_134 jj_3R_313 jj_3R_82 jj_3R_295 jj_3R_81 jj_3R_55 jj_3R_324 jj_3R_312 jj_3R_294 jj_3R_221 jj_3R_220 jj_3R_219 jj_3R_218 jj_3R_217 jj_3R_216 jj_3R_169 jj_3R_215 jj_3R_133 jj_3_11 jj_3R_54 jj_3_10 jj_3R_53 jj_3_9 jj_3R_335 jj_3R_334 jj_3R_333 jj_3R_332 jj_3R_320 jj_3R_306 jj_3R_305 jj_3R_137 jj_3R_202 jj_3R_201 jj_3R_200 jj_3R_199 jj_3R_198 jj_3R_197 jj_3R_166 jj_3R_196 jj_3R_130 jj_3R_311 jj_3R_188 jj_3R_187 jj_3R_164 jj_3R_186 jj_3R_128 jj_3R_80 jj_3R_52 jj_3R_310 jj_3R_292 jj_3R_293 jj_3R_291 jj_3R_185 jj_3R_184 jj_3R_183 jj_3R_182 jj_3R_163 jj_3R_181 jj_3R_340 jj_3R_127 jj_3_8 jj_3R_50 jj_3_7 jj_3R_49 jj_3R_77 jj_3_6 jj_3R_48 jj_3R_76 jj_3_5 jj_3R_75 jj_3R_148 jj_3R_74 jj_3R_73 jj_3R_72 jj_3R_348 jj_3R_347 jj_3_4 jj_3R_46 jj_3R_161 jj_3R_195 jj_3R_194 jj_3R_193 jj_3R_192 jj_3R_191 jj_3R_190 jj_3R_165 jj_3R_189 jj_3R_345 jj_3R_160 jj_3R_346 jj_3R_129 jj_3_3 jj_3R_159 jj_3R_264 jj_3R_362 jj_3R_304 jj_3R_158 jj_3R_303 jj_3R_136 jj_3R_157 jj_3R_344 jj_3R_180 jj_3R_179 jj_3R_156 jj_3R_178 jj_3R_162 jj_3R_177 jj_3R_126 jj_3R_353 jj_3R_342 jj_3R_45 jj_3_36 jj_3R_361 jj_3_2 jj_3R_343 jj_3R_71 jj_3R_360 jj_3R_70 jj_3R_359 jj_3R_352 jj_3R_44 jj_3R_69 jj_3R_155 jj_3R_154 jj_3R_153 jj_3R_339 jj_3_1 jj_3R_152 jj_3_35 jj_3R_358 jj_3R_357 jj_3R_351 jj_3R_341 jj_3R_151 jj_3R_356 jj_3R_350 jj_3R_176 jj_3R_175 jj_3R_150 jj_3R_174 jj_3R_149 jj_3R_280 jj_3R_170 jj_3R_135 jj_3_33 jj_3R_284 jj_3R_89 jj_3R_88 jj_3_34 jj_3R_87 jj_3R_86 jj_3R_85 jj_3_32 jj_3R_57 jj_3_29 jj_3R_79 jj_3R_66 jj_3R_125 jj_3R_124 jj_3R_123 jj_3R_283 jj_3R_122 jj_3R_121 jj_3R_120 jj_3R_119 jj_3R_327 jj_3R_118 jj_3R_117 jj_3R_116 jj_3R_115 jj_3R_114 jj_3R_299 jj_3R_113 jj_3R_112 jj_3_31 jj_3R_111 jj_3R_68 jj_3R_260 jj_3R_263 jj_3R_279 jj_3_28 jj_3R_259 jj_3_30 jj_3R_254 jj_3R_282 jj_3R_256 jj_3R_172 jj_3R_255 jj_3R_106 jj_3R_355 jj_3_27 jj_3R_64 jj_3R_145 jj_3R_91 jj_3R_146 jj_3R_59 jj_3R_316 jj_3R_233 jj_3R_326 jj_3R_232 jj_3R_237 jj_3R_298 jj_3R_227 jj_3R_226 jj_3R_225 jj_3R_224 jj_3R_223 jj_3R_278 jj_3R_171 jj_3R_222 jj_3R_272 jj_3R_104 jj_3R_103 jj_3R_102 jj_3_26 jj_3_23 jj_3_25 jj_3R_62 jj_3_24 jj_3_22 jj_3R_144 jj_3R_143 jj_3R_142 jj_3R_141 jj_3R_354 jj_3R_349 jj_3R_140 jj_3R_301 jj_3R_139 jj_3R_138 jj_3R_90 jj_3_21 jj_3R_329 jj_3R_58 jj_3R_315 jj_3R_338 jj_3R_330 jj_3R_296 jj_3R_337 jj_3R_325 jj_3R_314 jj_3_20 jj_3R_331 jj_3R_297 jj_3R_93 jj_3R_276 jj_3_18 jj_3R_92 jj_3R_60 jj_3_19 jj_3R_277 jj_3R_274 jj_3R_270 jj_3R_319 jj_3R_328 jj_3R_318 jj_3R_271 jj_3R_317 jj_3R_302 jj_3R_268 jj_3R_231 jj_3R_265 jj_3R_230 jj_3R_300 jj_3R_257 jj_3R_275 jj_3R_281 jj_3R_261 jj_3R_252 jj_3R_273 jj_3R_238 jj_3R_269 jj_3R_234 jj_3R_266 jj_3R_262 jj_3R_258 jj_3R_253 jj_3R_251 jj_3R_236 jj_3R_229 jj_3R_173 jj_3R_147 jj_3R_107 jj_3R_250 jj_3R_249 jj_3R_248 jj_3R_247 jj_3R_246 jj_3R_245 jj_3R_244 jj_3R_243 jj_3R_242 jj_3R_241 jj_3R_240 jj_3R_235 jj_3R_239 jj_3R_228 jj_3R_65 jj_3R_323 jj_3R_308 jj_3_17 jj_3R_51 jj_consume_token jj_scan_token getNextToken getToken jj_ntk enable_tracing disable_tracing jj_rescan_token jj_save ,
PMD,net.sourceforge.pmd.ast,LookaheadSuccess,3,0,0,1,1,false,0 ,JavaParserTreeConstants JavaParserConstants ,LookaheadSuccess JJCalls ,,setAssertAsIdentifier{ Params :  Returns : void} setJDK15{ Params :  Returns : void} checkForBadAssertUsage{ Params : String,String Returns : void} checkForBadEnumUsage{ Params : String,String Returns : void} isNextTokenAnAssert{ Params :  Returns : boolean} enumLookahead{ Params :  Returns : boolean} checkForDiscard{ Params : SimpleNode Returns : void} discardNodes{ Params : ASTCompilationUnit Returns : void} CompilationUnit{ Params :  Returns : ASTCompilationUnit} PackageDeclaration{ Params :  Returns : void} ImportDeclaration{ Params :  Returns : void} TypeDeclaration{ Params :  Returns : void} ClassDeclaration{ Params :  Returns : void} UnmodifiedClassDeclaration{ Params :  Returns : void} ClassBody{ Params :  Returns : void} NestedClassDeclaration{ Params :  Returns : void} ClassBodyDeclaration{ Params :  Returns : void} EnumDeclaration{ Params :  Returns : void} EnumElement{ Params :  Returns : void} MethodDeclarationLookahead{ Params :  Returns : void} InterfaceDeclaration{ Params :  Returns : void} NestedInterfaceDeclaration{ Params :  Returns : void} UnmodifiedInterfaceDeclaration{ Params :  Returns : void} InterfaceMemberDeclaration{ Params :  Returns : void} FieldDeclaration{ Params :  Returns : void} VariableDeclarator{ Params :  Returns : void} VariableDeclaratorId{ Params :  Returns : void} VariableInitializer{ Params :  Returns : void} ArrayInitializer{ Params :  Returns : void} MethodDeclaration{ Params :  Returns : void} MethodDeclarator{ Params :  Returns : void} FormalParameters{ Params :  Returns : void} FormalParameter{ Params :  Returns : void} ConstructorDeclaration{ Params :  Returns : void} ExplicitConstructorInvocation{ Params :  Returns : void} Initializer{ Params :  Returns : void} Type{ Params :  Returns : void} PrimitiveType{ Params :  Returns : void} ResultType{ Params :  Returns : void} Name{ Params :  Returns : void} NameList{ Params :  Returns : void} Expression{ Params :  Returns : void} AssignmentOperator{ Params :  Returns : void} ConditionalExpression{ Params :  Returns : void} ConditionalOrExpression{ Params :  Returns : void} ConditionalAndExpression{ Params :  Returns : void} InclusiveOrExpression{ Params :  Returns : void} ExclusiveOrExpression{ Params :  Returns : void} AndExpression{ Params :  Returns : void} EqualityExpression{ Params :  Returns : void} InstanceOfExpression{ Params :  Returns : void} RelationalExpression{ Params :  Returns : void} ShiftExpression{ Params :  Returns : void} AdditiveExpression{ Params :  Returns : void} MultiplicativeExpression{ Params :  Returns : void} UnaryExpression{ Params :  Returns : void} PreIncrementExpression{ Params :  Returns : void} PreDecrementExpression{ Params :  Returns : void} UnaryExpressionNotPlusMinus{ Params :  Returns : void} CastLookahead{ Params :  Returns : void} PostfixExpression{ Params :  Returns : void} CastExpression{ Params :  Returns : void} PrimaryExpression{ Params :  Returns : void} PrimaryPrefix{ Params :  Returns : void} PrimarySuffix{ Params :  Returns : void} Literal{ Params :  Returns : void} BooleanLiteral{ Params :  Returns : void} NullLiteral{ Params :  Returns : void} Arguments{ Params :  Returns : void} ArgumentList{ Params :  Returns : void} AllocationExpression{ Params :  Returns : void} ArrayDimsAndInits{ Params :  Returns : void} Statement{ Params :  Returns : void} LabeledStatement{ Params :  Returns : void} Block{ Params :  Returns : void} BlockStatement{ Params :  Returns : void} LocalVariableDeclaration{ Params :  Returns : void} EmptyStatement{ Params :  Returns : void} StatementExpression{ Params :  Returns : void} SwitchStatement{ Params :  Returns : void} SwitchLabel{ Params :  Returns : void} IfStatement{ Params :  Returns : void} WhileStatement{ Params :  Returns : void} DoStatement{ Params :  Returns : void} ForStatement{ Params :  Returns : void} ForInit{ Params :  Returns : void} StatementExpressionList{ Params :  Returns : void} ForUpdate{ Params :  Returns : void} BreakStatement{ Params :  Returns : void} ContinueStatement{ Params :  Returns : void} ReturnStatement{ Params :  Returns : void} ThrowStatement{ Params :  Returns : void} SynchronizedStatement{ Params :  Returns : void} TryStatement{ Params :  Returns : void} AssertStatement{ Params :  Returns : void} jj_2_1{ Params : int Returns : boolean} jj_2_2{ Params : int Returns : boolean} jj_2_3{ Params : int Returns : boolean} jj_2_4{ Params : int Returns : boolean} jj_2_5{ Params : int Returns : boolean} jj_2_6{ Params : int Returns : boolean} jj_2_7{ Params : int Returns : boolean} jj_2_8{ Params : int Returns : boolean} jj_2_9{ Params : int Returns : boolean} jj_2_10{ Params : int Returns : boolean} jj_2_11{ Params : int Returns : boolean} jj_2_12{ Params : int Returns : boolean} jj_2_13{ Params : int Returns : boolean} jj_2_14{ Params : int Returns : boolean} jj_2_15{ Params : int Returns : boolean} jj_2_16{ Params : int Returns : boolean} jj_2_17{ Params : int Returns : boolean} jj_2_18{ Params : int Returns : boolean} jj_2_19{ Params : int Returns : boolean} jj_2_20{ Params : int Returns : boolean} jj_2_21{ Params : int Returns : boolean} jj_2_22{ Params : int Returns : boolean} jj_2_23{ Params : int Returns : boolean} jj_2_24{ Params : int Returns : boolean} jj_2_25{ Params : int Returns : boolean} jj_2_26{ Params : int Returns : boolean} jj_2_27{ Params : int Returns : boolean} jj_2_28{ Params : int Returns : boolean} jj_2_29{ Params : int Returns : boolean} jj_2_30{ Params : int Returns : boolean} jj_2_31{ Params : int Returns : boolean} jj_2_32{ Params : int Returns : boolean} jj_2_33{ Params : int Returns : boolean} jj_2_34{ Params : int Returns : boolean} jj_2_35{ Params : int Returns : boolean} jj_2_36{ Params : int Returns : boolean} jj_3R_110{ Params :  Returns : boolean} jj_3R_105{ Params :  Returns : boolean} jj_3R_63{ Params :  Returns : boolean} jj_3R_109{ Params :  Returns : boolean} jj_3R_101{ Params :  Returns : boolean} jj_3R_100{ Params :  Returns : boolean} jj_3R_99{ Params :  Returns : boolean} jj_3R_98{ Params :  Returns : boolean} jj_3R_97{ Params :  Returns : boolean} jj_3R_96{ Params :  Returns : boolean} jj_3R_95{ Params :  Returns : boolean} jj_3R_94{ Params :  Returns : boolean} jj_3R_61{ Params :  Returns : boolean} jj_3R_286{ Params :  Returns : boolean} jj_3R_108{ Params :  Returns : boolean} jj_3R_67{ Params :  Returns : boolean} jj_3_16{ Params :  Returns : boolean} jj_3R_78{ Params :  Returns : boolean} jj_3R_47{ Params :  Returns : boolean} jj_3_13{ Params :  Returns : boolean} jj_3_15{ Params :  Returns : boolean} jj_3R_84{ Params :  Returns : boolean} jj_3R_83{ Params :  Returns : boolean} jj_3R_56{ Params :  Returns : boolean} jj_3R_322{ Params :  Returns : boolean} jj_3_14{ Params :  Returns : boolean} jj_3R_287{ Params :  Returns : boolean} jj_3R_205{ Params :  Returns : boolean} jj_3R_204{ Params :  Returns : boolean} jj_3R_309{ Params :  Returns : boolean} jj_3R_167{ Params :  Returns : boolean} jj_3R_203{ Params :  Returns : boolean} jj_3R_131{ Params :  Returns : boolean} jj_3R_289{ Params :  Returns : boolean} jj_3R_336{ Params :  Returns : boolean} jj_3R_321{ Params :  Returns : boolean} jj_3R_307{ Params :  Returns : boolean} jj_3R_285{ Params :  Returns : boolean} jj_3_12{ Params :  Returns : boolean} jj_3R_288{ Params :  Returns : boolean} jj_3R_290{ Params :  Returns : boolean} jj_3R_214{ Params :  Returns : boolean} jj_3R_213{ Params :  Returns : boolean} jj_3R_212{ Params :  Returns : boolean} jj_3R_211{ Params :  Returns : boolean} jj_3R_210{ Params :  Returns : boolean} jj_3R_209{ Params :  Returns : boolean} jj_3R_208{ Params :  Returns : boolean} jj_3R_207{ Params :  Returns : boolean} jj_3R_168{ Params :  Returns : boolean} jj_3R_206{ Params :  Returns : boolean} jj_3R_132{ Params :  Returns : boolean} jj_3R_267{ Params :  Returns : boolean} jj_3R_134{ Params :  Returns : boolean} jj_3R_313{ Params :  Returns : boolean} jj_3R_82{ Params :  Returns : boolean} jj_3R_295{ Params :  Returns : boolean} jj_3R_81{ Params :  Returns : boolean} jj_3R_55{ Params :  Returns : boolean} jj_3R_324{ Params :  Returns : boolean} jj_3R_312{ Params :  Returns : boolean} jj_3R_294{ Params :  Returns : boolean} jj_3R_221{ Params :  Returns : boolean} jj_3R_220{ Params :  Returns : boolean} jj_3R_219{ Params :  Returns : boolean} jj_3R_218{ Params :  Returns : boolean} jj_3R_217{ Params :  Returns : boolean} jj_3R_216{ Params :  Returns : boolean} jj_3R_169{ Params :  Returns : boolean} jj_3R_215{ Params :  Returns : boolean} jj_3R_133{ Params :  Returns : boolean} jj_3_11{ Params :  Returns : boolean} jj_3R_54{ Params :  Returns : boolean} jj_3_10{ Params :  Returns : boolean} jj_3R_53{ Params :  Returns : boolean} jj_3_9{ Params :  Returns : boolean} jj_3R_335{ Params :  Returns : boolean} jj_3R_334{ Params :  Returns : boolean} jj_3R_333{ Params :  Returns : boolean} jj_3R_332{ Params :  Returns : boolean} jj_3R_320{ Params :  Returns : boolean} jj_3R_306{ Params :  Returns : boolean} jj_3R_305{ Params :  Returns : boolean} jj_3R_137{ Params :  Returns : boolean} jj_3R_202{ Params :  Returns : boolean} jj_3R_201{ Params :  Returns : boolean} jj_3R_200{ Params :  Returns : boolean} jj_3R_199{ Params :  Returns : boolean} jj_3R_198{ Params :  Returns : boolean} jj_3R_197{ Params :  Returns : boolean} jj_3R_166{ Params :  Returns : boolean} jj_3R_196{ Params :  Returns : boolean} jj_3R_130{ Params :  Returns : boolean} jj_3R_311{ Params :  Returns : boolean} jj_3R_188{ Params :  Returns : boolean} jj_3R_187{ Params :  Returns : boolean} jj_3R_164{ Params :  Returns : boolean} jj_3R_186{ Params :  Returns : boolean} jj_3R_128{ Params :  Returns : boolean} jj_3R_80{ Params :  Returns : boolean} jj_3R_52{ Params :  Returns : boolean} jj_3R_310{ Params :  Returns : boolean} jj_3R_292{ Params :  Returns : boolean} jj_3R_293{ Params :  Returns : boolean} jj_3R_291{ Params :  Returns : boolean} jj_3R_185{ Params :  Returns : boolean} jj_3R_184{ Params :  Returns : boolean} jj_3R_183{ Params :  Returns : boolean} jj_3R_182{ Params :  Returns : boolean} jj_3R_163{ Params :  Returns : boolean} jj_3R_181{ Params :  Returns : boolean} jj_3R_340{ Params :  Returns : boolean} jj_3R_127{ Params :  Returns : boolean} jj_3_8{ Params :  Returns : boolean} jj_3R_50{ Params :  Returns : boolean} jj_3_7{ Params :  Returns : boolean} jj_3R_49{ Params :  Returns : boolean} jj_3R_77{ Params :  Returns : boolean} jj_3_6{ Params :  Returns : boolean} jj_3R_48{ Params :  Returns : boolean} jj_3R_76{ Params :  Returns : boolean} jj_3_5{ Params :  Returns : boolean} jj_3R_75{ Params :  Returns : boolean} jj_3R_148{ Params :  Returns : boolean} jj_3R_74{ Params :  Returns : boolean} jj_3R_73{ Params :  Returns : boolean} jj_3R_72{ Params :  Returns : boolean} jj_3R_348{ Params :  Returns : boolean} jj_3R_347{ Params :  Returns : boolean} jj_3_4{ Params :  Returns : boolean} jj_3R_46{ Params :  Returns : boolean} jj_3R_161{ Params :  Returns : boolean} jj_3R_195{ Params :  Returns : boolean} jj_3R_194{ Params :  Returns : boolean} jj_3R_193{ Params :  Returns : boolean} jj_3R_192{ Params :  Returns : boolean} jj_3R_191{ Params :  Returns : boolean} jj_3R_190{ Params :  Returns : boolean} jj_3R_165{ Params :  Returns : boolean} jj_3R_189{ Params :  Returns : boolean} jj_3R_345{ Params :  Returns : boolean} jj_3R_160{ Params :  Returns : boolean} jj_3R_346{ Params :  Returns : boolean} jj_3R_129{ Params :  Returns : boolean} jj_3_3{ Params :  Returns : boolean} jj_3R_159{ Params :  Returns : boolean} jj_3R_264{ Params :  Returns : boolean} jj_3R_362{ Params :  Returns : boolean} jj_3R_304{ Params :  Returns : boolean} jj_3R_158{ Params :  Returns : boolean} jj_3R_303{ Params :  Returns : boolean} jj_3R_136{ Params :  Returns : boolean} jj_3R_157{ Params :  Returns : boolean} jj_3R_344{ Params :  Returns : boolean} jj_3R_180{ Params :  Returns : boolean} jj_3R_179{ Params :  Returns : boolean} jj_3R_156{ Params :  Returns : boolean} jj_3R_178{ Params :  Returns : boolean} jj_3R_162{ Params :  Returns : boolean} jj_3R_177{ Params :  Returns : boolean} jj_3R_126{ Params :  Returns : boolean} jj_3R_353{ Params :  Returns : boolean} jj_3R_342{ Params :  Returns : boolean} jj_3R_45{ Params :  Returns : boolean} jj_3_36{ Params :  Returns : boolean} jj_3R_361{ Params :  Returns : boolean} jj_3_2{ Params :  Returns : boolean} jj_3R_343{ Params :  Returns : boolean} jj_3R_71{ Params :  Returns : boolean} jj_3R_360{ Params :  Returns : boolean} jj_3R_70{ Params :  Returns : boolean} jj_3R_359{ Params :  Returns : boolean} jj_3R_352{ Params :  Returns : boolean} jj_3R_44{ Params :  Returns : boolean} jj_3R_69{ Params :  Returns : boolean} jj_3R_155{ Params :  Returns : boolean} jj_3R_154{ Params :  Returns : boolean} jj_3R_153{ Params :  Returns : boolean} jj_3R_339{ Params :  Returns : boolean} jj_3_1{ Params :  Returns : boolean} jj_3R_152{ Params :  Returns : boolean} jj_3_35{ Params :  Returns : boolean} jj_3R_358{ Params :  Returns : boolean} jj_3R_357{ Params :  Returns : boolean} jj_3R_351{ Params :  Returns : boolean} jj_3R_341{ Params :  Returns : boolean} jj_3R_151{ Params :  Returns : boolean} jj_3R_356{ Params :  Returns : boolean} jj_3R_350{ Params :  Returns : boolean} jj_3R_176{ Params :  Returns : boolean} jj_3R_175{ Params :  Returns : boolean} jj_3R_150{ Params :  Returns : boolean} jj_3R_174{ Params :  Returns : boolean} jj_3R_149{ Params :  Returns : boolean} jj_3R_280{ Params :  Returns : boolean} jj_3R_170{ Params :  Returns : boolean} jj_3R_135{ Params :  Returns : boolean} jj_3_33{ Params :  Returns : boolean} jj_3R_284{ Params :  Returns : boolean} jj_3R_89{ Params :  Returns : boolean} jj_3R_88{ Params :  Returns : boolean} jj_3_34{ Params :  Returns : boolean} jj_3R_87{ Params :  Returns : boolean} jj_3R_86{ Params :  Returns : boolean} jj_3R_85{ Params :  Returns : boolean} jj_3_32{ Params :  Returns : boolean} jj_3R_57{ Params :  Returns : boolean} jj_3_29{ Params :  Returns : boolean} jj_3R_79{ Params :  Returns : boolean} jj_3R_66{ Params :  Returns : boolean} jj_3R_125{ Params :  Returns : boolean} jj_3R_124{ Params :  Returns : boolean} jj_3R_123{ Params :  Returns : boolean} jj_3R_283{ Params :  Returns : boolean} jj_3R_122{ Params :  Returns : boolean} jj_3R_121{ Params :  Returns : boolean} jj_3R_120{ Params :  Returns : boolean} jj_3R_119{ Params :  Returns : boolean} jj_3R_327{ Params :  Returns : boolean} jj_3R_118{ Params :  Returns : boolean} jj_3R_117{ Params :  Returns : boolean} jj_3R_116{ Params :  Returns : boolean} jj_3R_115{ Params :  Returns : boolean} jj_3R_114{ Params :  Returns : boolean} jj_3R_299{ Params :  Returns : boolean} jj_3R_113{ Params :  Returns : boolean} jj_3R_112{ Params :  Returns : boolean} jj_3_31{ Params :  Returns : boolean} jj_3R_111{ Params :  Returns : boolean} jj_3R_68{ Params :  Returns : boolean} jj_3R_260{ Params :  Returns : boolean} jj_3R_263{ Params :  Returns : boolean} jj_3R_279{ Params :  Returns : boolean} jj_3_28{ Params :  Returns : boolean} jj_3R_259{ Params :  Returns : boolean} jj_3_30{ Params :  Returns : boolean} jj_3R_254{ Params :  Returns : boolean} jj_3R_282{ Params :  Returns : boolean} jj_3R_256{ Params :  Returns : boolean} jj_3R_172{ Params :  Returns : boolean} jj_3R_255{ Params :  Returns : boolean} jj_3R_106{ Params :  Returns : boolean} jj_3R_355{ Params :  Returns : boolean} jj_3_27{ Params :  Returns : boolean} jj_3R_64{ Params :  Returns : boolean} jj_3R_145{ Params :  Returns : boolean} jj_3R_91{ Params :  Returns : boolean} jj_3R_146{ Params :  Returns : boolean} jj_3R_59{ Params :  Returns : boolean} jj_3R_316{ Params :  Returns : boolean} jj_3R_233{ Params :  Returns : boolean} jj_3R_326{ Params :  Returns : boolean} jj_3R_232{ Params :  Returns : boolean} jj_3R_237{ Params :  Returns : boolean} jj_3R_298{ Params :  Returns : boolean} jj_3R_227{ Params :  Returns : boolean} jj_3R_226{ Params :  Returns : boolean} jj_3R_225{ Params :  Returns : boolean} jj_3R_224{ Params :  Returns : boolean} jj_3R_223{ Params :  Returns : boolean} jj_3R_278{ Params :  Returns : boolean} jj_3R_171{ Params :  Returns : boolean} jj_3R_222{ Params :  Returns : boolean} jj_3R_272{ Params :  Returns : boolean} jj_3R_104{ Params :  Returns : boolean} jj_3R_103{ Params :  Returns : boolean} jj_3R_102{ Params :  Returns : boolean} jj_3_26{ Params :  Returns : boolean} jj_3_23{ Params :  Returns : boolean} jj_3_25{ Params :  Returns : boolean} jj_3R_62{ Params :  Returns : boolean} jj_3_24{ Params :  Returns : boolean} jj_3_22{ Params :  Returns : boolean} jj_3R_144{ Params :  Returns : boolean} jj_3R_143{ Params :  Returns : boolean} jj_3R_142{ Params :  Returns : boolean} jj_3R_141{ Params :  Returns : boolean} jj_3R_354{ Params :  Returns : boolean} jj_3R_349{ Params :  Returns : boolean} jj_3R_140{ Params :  Returns : boolean} jj_3R_301{ Params :  Returns : boolean} jj_3R_139{ Params :  Returns : boolean} jj_3R_138{ Params :  Returns : boolean} jj_3R_90{ Params :  Returns : boolean} jj_3_21{ Params :  Returns : boolean} jj_3R_329{ Params :  Returns : boolean} jj_3R_58{ Params :  Returns : boolean} jj_3R_315{ Params :  Returns : boolean} jj_3R_338{ Params :  Returns : boolean} jj_3R_330{ Params :  Returns : boolean} jj_3R_296{ Params :  Returns : boolean} jj_3R_337{ Params :  Returns : boolean} jj_3R_325{ Params :  Returns : boolean} jj_3R_314{ Params :  Returns : boolean} jj_3_20{ Params :  Returns : boolean} jj_3R_331{ Params :  Returns : boolean} jj_3R_297{ Params :  Returns : boolean} jj_3R_93{ Params :  Returns : boolean} jj_3R_276{ Params :  Returns : boolean} jj_3_18{ Params :  Returns : boolean} jj_3R_92{ Params :  Returns : boolean} jj_3R_60{ Params :  Returns : boolean} jj_3_19{ Params :  Returns : boolean} jj_3R_277{ Params :  Returns : boolean} jj_3R_274{ Params :  Returns : boolean} jj_3R_270{ Params :  Returns : boolean} jj_3R_319{ Params :  Returns : boolean} jj_3R_328{ Params :  Returns : boolean} jj_3R_318{ Params :  Returns : boolean} jj_3R_271{ Params :  Returns : boolean} jj_3R_317{ Params :  Returns : boolean} jj_3R_302{ Params :  Returns : boolean} jj_3R_268{ Params :  Returns : boolean} jj_3R_231{ Params :  Returns : boolean} jj_3R_265{ Params :  Returns : boolean} jj_3R_230{ Params :  Returns : boolean} jj_3R_300{ Params :  Returns : boolean} jj_3R_257{ Params :  Returns : boolean} jj_3R_275{ Params :  Returns : boolean} jj_3R_281{ Params :  Returns : boolean} jj_3R_261{ Params :  Returns : boolean} jj_3R_252{ Params :  Returns : boolean} jj_3R_273{ Params :  Returns : boolean} jj_3R_238{ Params :  Returns : boolean} jj_3R_269{ Params :  Returns : boolean} jj_3R_234{ Params :  Returns : boolean} jj_3R_266{ Params :  Returns : boolean} jj_3R_262{ Params :  Returns : boolean} jj_3R_258{ Params :  Returns : boolean} jj_3R_253{ Params :  Returns : boolean} jj_3R_251{ Params :  Returns : boolean} jj_3R_236{ Params :  Returns : boolean} jj_3R_229{ Params :  Returns : boolean} jj_3R_173{ Params :  Returns : boolean} jj_3R_147{ Params :  Returns : boolean} jj_3R_107{ Params :  Returns : boolean} jj_3R_250{ Params :  Returns : boolean} jj_3R_249{ Params :  Returns : boolean} jj_3R_248{ Params :  Returns : boolean} jj_3R_247{ Params :  Returns : boolean} jj_3R_246{ Params :  Returns : boolean} jj_3R_245{ Params :  Returns : boolean} jj_3R_244{ Params :  Returns : boolean} jj_3R_243{ Params :  Returns : boolean} jj_3R_242{ Params :  Returns : boolean} jj_3R_241{ Params :  Returns : boolean} jj_3R_240{ Params :  Returns : boolean} jj_3R_235{ Params :  Returns : boolean} jj_3R_239{ Params :  Returns : boolean} jj_3R_228{ Params :  Returns : boolean} jj_3R_65{ Params :  Returns : boolean} jj_3R_323{ Params :  Returns : boolean} jj_3R_308{ Params :  Returns : boolean} jj_3_17{ Params :  Returns : boolean} jj_3R_51{ Params :  Returns : boolean} jj_la1_0{ Params :  Returns : void} jj_la1_1{ Params :  Returns : void} jj_la1_2{ Params :  Returns : void} jj_la1_3{ Params :  Returns : void} ReInit{ Params : CharStream Returns : void} ReInit{ Params : JavaParserTokenManager Returns : void} jj_consume_token{ Params : int Returns : Token} jj_scan_token{ Params : int Returns : boolean} getNextToken{ Params :  Returns : Token} getToken{ Params : int Returns : Token} jj_ntk{ Params :  Returns : int} jj_add_error_token{ Params : int,int Returns : void} generateParseException{ Params :  Returns : ParseException} enable_tracing{ Params :  Returns : void} disable_tracing{ Params :  Returns : void} jj_rescan_token{ Params :  Returns : void} jj_save{ Params : int,int Returns : void} ,,jj_la1_0 jj_la1_1 jj_la1_2 jj_la1_3 ,CompilationUnit PackageDeclaration ImportDeclaration TypeDeclaration ClassDeclaration UnmodifiedClassDeclaration ClassBody NestedClassDeclaration ClassBodyDeclaration EnumDeclaration EnumElement MethodDeclarationLookahead InterfaceDeclaration NestedInterfaceDeclaration UnmodifiedInterfaceDeclaration InterfaceMemberDeclaration FieldDeclaration VariableDeclarator VariableDeclaratorId VariableInitializer ArrayInitializer MethodDeclaration MethodDeclarator FormalParameters FormalParameter ConstructorDeclaration ExplicitConstructorInvocation Initializer Type PrimitiveType ResultType Name NameList Expression AssignmentOperator ConditionalExpression ConditionalOrExpression ConditionalAndExpression InclusiveOrExpression ExclusiveOrExpression AndExpression EqualityExpression InstanceOfExpression RelationalExpression ShiftExpression AdditiveExpression MultiplicativeExpression UnaryExpression PreIncrementExpression PreDecrementExpression UnaryExpressionNotPlusMinus CastLookahead PostfixExpression CastExpression PrimaryExpression PrimaryPrefix PrimarySuffix Literal BooleanLiteral NullLiteral Arguments ArgumentList AllocationExpression ArrayDimsAndInits Statement LabeledStatement Block BlockStatement LocalVariableDeclaration EmptyStatement StatementExpression SwitchStatement SwitchLabel IfStatement WhileStatement DoStatement ForStatement ForInit StatementExpressionList ForUpdate BreakStatement ContinueStatement ReturnStatement ThrowStatement SynchronizedStatement TryStatement AssertStatement jj_2_1 jj_2_2 jj_2_3 jj_2_4 jj_2_5 jj_2_6 jj_2_7 jj_2_8 jj_2_9 jj_2_10 jj_2_11 jj_2_12 jj_2_13 jj_2_14 jj_2_15 jj_2_16 jj_2_17 jj_2_18 jj_2_19 jj_2_20 jj_2_21 jj_2_22 jj_2_23 jj_2_24 jj_2_25 jj_2_26 jj_2_27 jj_2_28 jj_2_29 jj_2_30 jj_2_31 jj_2_32 jj_2_33 jj_2_34 jj_2_35 jj_2_36 jj_3R_110 jj_3R_105 jj_3R_63 jj_3R_109 jj_3R_101 jj_3R_100 jj_3R_99 jj_3R_98 jj_3R_97 jj_3R_96 jj_3R_95 jj_3R_94 jj_3R_61 jj_3R_286 jj_3R_108 jj_3R_67 jj_3_16 jj_3R_78 jj_3R_47 jj_3_13 jj_3_15 jj_3R_84 jj_3R_83 jj_3R_56 jj_3R_322 jj_3_14 jj_3R_287 jj_3R_205 jj_3R_204 jj_3R_309 jj_3R_167 jj_3R_203 jj_3R_131 jj_3R_289 jj_3R_336 jj_3R_321 jj_3R_307 jj_3R_285 jj_3_12 jj_3R_288 jj_3R_290 jj_3R_214 jj_3R_213 jj_3R_212 jj_3R_211 jj_3R_210 jj_3R_209 jj_3R_208 jj_3R_207 jj_3R_168 jj_3R_206 jj_3R_132 jj_3R_267 jj_3R_134 jj_3R_313 jj_3R_82 jj_3R_295 jj_3R_81 jj_3R_55 jj_3R_324 jj_3R_312 jj_3R_294 jj_3R_221 jj_3R_220 jj_3R_219 jj_3R_218 jj_3R_217 jj_3R_216 jj_3R_169 jj_3R_215 jj_3R_133 jj_3_11 jj_3R_54 jj_3_10 jj_3R_53 jj_3_9 jj_3R_335 jj_3R_334 jj_3R_333 jj_3R_332 jj_3R_320 jj_3R_306 jj_3R_305 jj_3R_137 jj_3R_202 jj_3R_201 jj_3R_200 jj_3R_199 jj_3R_198 jj_3R_197 jj_3R_166 jj_3R_196 jj_3R_130 jj_3R_311 jj_3R_188 jj_3R_187 jj_3R_164 jj_3R_186 jj_3R_128 jj_3R_80 jj_3R_52 jj_3R_310 jj_3R_292 jj_3R_293 jj_3R_291 jj_3R_185 jj_3R_184 jj_3R_183 jj_3R_182 jj_3R_163 jj_3R_181 jj_3R_340 jj_3R_127 jj_3_8 jj_3R_50 jj_3_7 jj_3R_49 jj_3R_77 jj_3_6 jj_3R_48 jj_3R_76 jj_3_5 jj_3R_75 jj_3R_148 jj_3R_74 jj_3R_73 jj_3R_72 jj_3R_348 jj_3R_347 jj_3_4 jj_3R_46 jj_3R_161 jj_3R_195 jj_3R_194 jj_3R_193 jj_3R_192 jj_3R_191 jj_3R_190 jj_3R_165 jj_3R_189 jj_3R_345 jj_3R_160 jj_3R_346 jj_3R_129 jj_3_3 jj_3R_159 jj_3R_264 jj_3R_362 jj_3R_304 jj_3R_158 jj_3R_303 jj_3R_136 jj_3R_157 jj_3R_344 jj_3R_180 jj_3R_179 jj_3R_156 jj_3R_178 jj_3R_162 jj_3R_177 jj_3R_126 jj_3R_353 jj_3R_342 jj_3R_45 jj_3_36 jj_3R_361 jj_3_2 jj_3R_343 jj_3R_71 jj_3R_360 jj_3R_70 jj_3R_359 jj_3R_352 jj_3R_44 jj_3R_69 jj_3R_155 jj_3R_154 jj_3R_153 jj_3R_339 jj_3_1 jj_3R_152 jj_3_35 jj_3R_358 jj_3R_357 jj_3R_351 jj_3R_341 jj_3R_151 jj_3R_356 jj_3R_350 jj_3R_176 jj_3R_175 jj_3R_150 jj_3R_174 jj_3R_149 jj_3R_280 jj_3R_170 jj_3R_135 jj_3_33 jj_3R_284 jj_3R_89 jj_3R_88 jj_3_34 jj_3R_87 jj_3R_86 jj_3R_85 jj_3_32 jj_3R_57 jj_3_29 jj_3R_79 jj_3R_66 jj_3R_125 jj_3R_124 jj_3R_123 jj_3R_283 jj_3R_122 jj_3R_121 jj_3R_120 jj_3R_119 jj_3R_327 jj_3R_118 jj_3R_117 jj_3R_116 jj_3R_115 jj_3R_114 jj_3R_299 jj_3R_113 jj_3R_112 jj_3_31 jj_3R_111 jj_3R_68 jj_3R_260 jj_3R_263 jj_3R_279 jj_3_28 jj_3R_259 jj_3_30 jj_3R_254 jj_3R_282 jj_3R_256 jj_3R_172 jj_3R_255 jj_3R_106 jj_3R_355 jj_3_27 jj_3R_64 jj_3R_145 jj_3R_91 jj_3R_146 jj_3R_59 jj_3R_316 jj_3R_233 jj_3R_326 jj_3R_232 jj_3R_237 jj_3R_298 jj_3R_227 jj_3R_226 jj_3R_225 jj_3R_224 jj_3R_223 jj_3R_278 jj_3R_171 jj_3R_222 jj_3R_272 jj_3R_104 jj_3R_103 jj_3R_102 jj_3_26 jj_3_23 jj_3_25 jj_3R_62 jj_3_24 jj_3_22 jj_3R_144 jj_3R_143 jj_3R_142 jj_3R_141 jj_3R_354 jj_3R_349 jj_3R_140 jj_3R_301 jj_3R_139 jj_3R_138 jj_3R_90 jj_3_21 jj_3R_329 jj_3R_58 jj_3R_315 jj_3R_338 jj_3R_330 jj_3R_296 jj_3R_337 jj_3R_325 jj_3R_314 jj_3_20 jj_3R_331 jj_3R_297 jj_3R_93 jj_3R_276 jj_3_18 jj_3R_92 jj_3R_60 jj_3_19 jj_3R_277 jj_3R_274 jj_3R_270 jj_3R_319 jj_3R_328 jj_3R_318 jj_3R_271 jj_3R_317 jj_3R_302 jj_3R_268 jj_3R_231 jj_3R_265 jj_3R_230 jj_3R_300 jj_3R_257 jj_3R_275 jj_3R_281 jj_3R_261 jj_3R_252 jj_3R_273 jj_3R_238 jj_3R_269 jj_3R_234 jj_3R_266 jj_3R_262 jj_3R_258 jj_3R_253 jj_3R_251 jj_3R_236 jj_3R_229 jj_3R_173 jj_3R_147 jj_3R_107 jj_3R_250 jj_3R_249 jj_3R_248 jj_3R_247 jj_3R_246 jj_3R_245 jj_3R_244 jj_3R_243 jj_3R_242 jj_3R_241 jj_3R_240 jj_3R_235 jj_3R_239 jj_3R_228 jj_3R_65 jj_3R_323 jj_3R_308 jj_3_17 jj_3R_51 jj_consume_token jj_scan_token getNextToken getToken jj_ntk enable_tracing disable_tracing jj_rescan_token jj_save ,
PMD,net.sourceforge.pmd.ast,JJCalls,3,0,0,1,1,false,0 ,JavaParserTreeConstants JavaParserConstants ,LookaheadSuccess JJCalls ,gen: int first: Token arg: int next: JJCalls ,setAssertAsIdentifier{ Params :  Returns : void} setJDK15{ Params :  Returns : void} checkForBadAssertUsage{ Params : String,String Returns : void} checkForBadEnumUsage{ Params : String,String Returns : void} isNextTokenAnAssert{ Params :  Returns : boolean} enumLookahead{ Params :  Returns : boolean} checkForDiscard{ Params : SimpleNode Returns : void} discardNodes{ Params : ASTCompilationUnit Returns : void} CompilationUnit{ Params :  Returns : ASTCompilationUnit} PackageDeclaration{ Params :  Returns : void} ImportDeclaration{ Params :  Returns : void} TypeDeclaration{ Params :  Returns : void} ClassDeclaration{ Params :  Returns : void} UnmodifiedClassDeclaration{ Params :  Returns : void} ClassBody{ Params :  Returns : void} NestedClassDeclaration{ Params :  Returns : void} ClassBodyDeclaration{ Params :  Returns : void} EnumDeclaration{ Params :  Returns : void} EnumElement{ Params :  Returns : void} MethodDeclarationLookahead{ Params :  Returns : void} InterfaceDeclaration{ Params :  Returns : void} NestedInterfaceDeclaration{ Params :  Returns : void} UnmodifiedInterfaceDeclaration{ Params :  Returns : void} InterfaceMemberDeclaration{ Params :  Returns : void} FieldDeclaration{ Params :  Returns : void} VariableDeclarator{ Params :  Returns : void} VariableDeclaratorId{ Params :  Returns : void} VariableInitializer{ Params :  Returns : void} ArrayInitializer{ Params :  Returns : void} MethodDeclaration{ Params :  Returns : void} MethodDeclarator{ Params :  Returns : void} FormalParameters{ Params :  Returns : void} FormalParameter{ Params :  Returns : void} ConstructorDeclaration{ Params :  Returns : void} ExplicitConstructorInvocation{ Params :  Returns : void} Initializer{ Params :  Returns : void} Type{ Params :  Returns : void} PrimitiveType{ Params :  Returns : void} ResultType{ Params :  Returns : void} Name{ Params :  Returns : void} NameList{ Params :  Returns : void} Expression{ Params :  Returns : void} AssignmentOperator{ Params :  Returns : void} ConditionalExpression{ Params :  Returns : void} ConditionalOrExpression{ Params :  Returns : void} ConditionalAndExpression{ Params :  Returns : void} InclusiveOrExpression{ Params :  Returns : void} ExclusiveOrExpression{ Params :  Returns : void} AndExpression{ Params :  Returns : void} EqualityExpression{ Params :  Returns : void} InstanceOfExpression{ Params :  Returns : void} RelationalExpression{ Params :  Returns : void} ShiftExpression{ Params :  Returns : void} AdditiveExpression{ Params :  Returns : void} MultiplicativeExpression{ Params :  Returns : void} UnaryExpression{ Params :  Returns : void} PreIncrementExpression{ Params :  Returns : void} PreDecrementExpression{ Params :  Returns : void} UnaryExpressionNotPlusMinus{ Params :  Returns : void} CastLookahead{ Params :  Returns : void} PostfixExpression{ Params :  Returns : void} CastExpression{ Params :  Returns : void} PrimaryExpression{ Params :  Returns : void} PrimaryPrefix{ Params :  Returns : void} PrimarySuffix{ Params :  Returns : void} Literal{ Params :  Returns : void} BooleanLiteral{ Params :  Returns : void} NullLiteral{ Params :  Returns : void} Arguments{ Params :  Returns : void} ArgumentList{ Params :  Returns : void} AllocationExpression{ Params :  Returns : void} ArrayDimsAndInits{ Params :  Returns : void} Statement{ Params :  Returns : void} LabeledStatement{ Params :  Returns : void} Block{ Params :  Returns : void} BlockStatement{ Params :  Returns : void} LocalVariableDeclaration{ Params :  Returns : void} EmptyStatement{ Params :  Returns : void} StatementExpression{ Params :  Returns : void} SwitchStatement{ Params :  Returns : void} SwitchLabel{ Params :  Returns : void} IfStatement{ Params :  Returns : void} WhileStatement{ Params :  Returns : void} DoStatement{ Params :  Returns : void} ForStatement{ Params :  Returns : void} ForInit{ Params :  Returns : void} StatementExpressionList{ Params :  Returns : void} ForUpdate{ Params :  Returns : void} BreakStatement{ Params :  Returns : void} ContinueStatement{ Params :  Returns : void} ReturnStatement{ Params :  Returns : void} ThrowStatement{ Params :  Returns : void} SynchronizedStatement{ Params :  Returns : void} TryStatement{ Params :  Returns : void} AssertStatement{ Params :  Returns : void} jj_2_1{ Params : int Returns : boolean} jj_2_2{ Params : int Returns : boolean} jj_2_3{ Params : int Returns : boolean} jj_2_4{ Params : int Returns : boolean} jj_2_5{ Params : int Returns : boolean} jj_2_6{ Params : int Returns : boolean} jj_2_7{ Params : int Returns : boolean} jj_2_8{ Params : int Returns : boolean} jj_2_9{ Params : int Returns : boolean} jj_2_10{ Params : int Returns : boolean} jj_2_11{ Params : int Returns : boolean} jj_2_12{ Params : int Returns : boolean} jj_2_13{ Params : int Returns : boolean} jj_2_14{ Params : int Returns : boolean} jj_2_15{ Params : int Returns : boolean} jj_2_16{ Params : int Returns : boolean} jj_2_17{ Params : int Returns : boolean} jj_2_18{ Params : int Returns : boolean} jj_2_19{ Params : int Returns : boolean} jj_2_20{ Params : int Returns : boolean} jj_2_21{ Params : int Returns : boolean} jj_2_22{ Params : int Returns : boolean} jj_2_23{ Params : int Returns : boolean} jj_2_24{ Params : int Returns : boolean} jj_2_25{ Params : int Returns : boolean} jj_2_26{ Params : int Returns : boolean} jj_2_27{ Params : int Returns : boolean} jj_2_28{ Params : int Returns : boolean} jj_2_29{ Params : int Returns : boolean} jj_2_30{ Params : int Returns : boolean} jj_2_31{ Params : int Returns : boolean} jj_2_32{ Params : int Returns : boolean} jj_2_33{ Params : int Returns : boolean} jj_2_34{ Params : int Returns : boolean} jj_2_35{ Params : int Returns : boolean} jj_2_36{ Params : int Returns : boolean} jj_3R_110{ Params :  Returns : boolean} jj_3R_105{ Params :  Returns : boolean} jj_3R_63{ Params :  Returns : boolean} jj_3R_109{ Params :  Returns : boolean} jj_3R_101{ Params :  Returns : boolean} jj_3R_100{ Params :  Returns : boolean} jj_3R_99{ Params :  Returns : boolean} jj_3R_98{ Params :  Returns : boolean} jj_3R_97{ Params :  Returns : boolean} jj_3R_96{ Params :  Returns : boolean} jj_3R_95{ Params :  Returns : boolean} jj_3R_94{ Params :  Returns : boolean} jj_3R_61{ Params :  Returns : boolean} jj_3R_286{ Params :  Returns : boolean} jj_3R_108{ Params :  Returns : boolean} jj_3R_67{ Params :  Returns : boolean} jj_3_16{ Params :  Returns : boolean} jj_3R_78{ Params :  Returns : boolean} jj_3R_47{ Params :  Returns : boolean} jj_3_13{ Params :  Returns : boolean} jj_3_15{ Params :  Returns : boolean} jj_3R_84{ Params :  Returns : boolean} jj_3R_83{ Params :  Returns : boolean} jj_3R_56{ Params :  Returns : boolean} jj_3R_322{ Params :  Returns : boolean} jj_3_14{ Params :  Returns : boolean} jj_3R_287{ Params :  Returns : boolean} jj_3R_205{ Params :  Returns : boolean} jj_3R_204{ Params :  Returns : boolean} jj_3R_309{ Params :  Returns : boolean} jj_3R_167{ Params :  Returns : boolean} jj_3R_203{ Params :  Returns : boolean} jj_3R_131{ Params :  Returns : boolean} jj_3R_289{ Params :  Returns : boolean} jj_3R_336{ Params :  Returns : boolean} jj_3R_321{ Params :  Returns : boolean} jj_3R_307{ Params :  Returns : boolean} jj_3R_285{ Params :  Returns : boolean} jj_3_12{ Params :  Returns : boolean} jj_3R_288{ Params :  Returns : boolean} jj_3R_290{ Params :  Returns : boolean} jj_3R_214{ Params :  Returns : boolean} jj_3R_213{ Params :  Returns : boolean} jj_3R_212{ Params :  Returns : boolean} jj_3R_211{ Params :  Returns : boolean} jj_3R_210{ Params :  Returns : boolean} jj_3R_209{ Params :  Returns : boolean} jj_3R_208{ Params :  Returns : boolean} jj_3R_207{ Params :  Returns : boolean} jj_3R_168{ Params :  Returns : boolean} jj_3R_206{ Params :  Returns : boolean} jj_3R_132{ Params :  Returns : boolean} jj_3R_267{ Params :  Returns : boolean} jj_3R_134{ Params :  Returns : boolean} jj_3R_313{ Params :  Returns : boolean} jj_3R_82{ Params :  Returns : boolean} jj_3R_295{ Params :  Returns : boolean} jj_3R_81{ Params :  Returns : boolean} jj_3R_55{ Params :  Returns : boolean} jj_3R_324{ Params :  Returns : boolean} jj_3R_312{ Params :  Returns : boolean} jj_3R_294{ Params :  Returns : boolean} jj_3R_221{ Params :  Returns : boolean} jj_3R_220{ Params :  Returns : boolean} jj_3R_219{ Params :  Returns : boolean} jj_3R_218{ Params :  Returns : boolean} jj_3R_217{ Params :  Returns : boolean} jj_3R_216{ Params :  Returns : boolean} jj_3R_169{ Params :  Returns : boolean} jj_3R_215{ Params :  Returns : boolean} jj_3R_133{ Params :  Returns : boolean} jj_3_11{ Params :  Returns : boolean} jj_3R_54{ Params :  Returns : boolean} jj_3_10{ Params :  Returns : boolean} jj_3R_53{ Params :  Returns : boolean} jj_3_9{ Params :  Returns : boolean} jj_3R_335{ Params :  Returns : boolean} jj_3R_334{ Params :  Returns : boolean} jj_3R_333{ Params :  Returns : boolean} jj_3R_332{ Params :  Returns : boolean} jj_3R_320{ Params :  Returns : boolean} jj_3R_306{ Params :  Returns : boolean} jj_3R_305{ Params :  Returns : boolean} jj_3R_137{ Params :  Returns : boolean} jj_3R_202{ Params :  Returns : boolean} jj_3R_201{ Params :  Returns : boolean} jj_3R_200{ Params :  Returns : boolean} jj_3R_199{ Params :  Returns : boolean} jj_3R_198{ Params :  Returns : boolean} jj_3R_197{ Params :  Returns : boolean} jj_3R_166{ Params :  Returns : boolean} jj_3R_196{ Params :  Returns : boolean} jj_3R_130{ Params :  Returns : boolean} jj_3R_311{ Params :  Returns : boolean} jj_3R_188{ Params :  Returns : boolean} jj_3R_187{ Params :  Returns : boolean} jj_3R_164{ Params :  Returns : boolean} jj_3R_186{ Params :  Returns : boolean} jj_3R_128{ Params :  Returns : boolean} jj_3R_80{ Params :  Returns : boolean} jj_3R_52{ Params :  Returns : boolean} jj_3R_310{ Params :  Returns : boolean} jj_3R_292{ Params :  Returns : boolean} jj_3R_293{ Params :  Returns : boolean} jj_3R_291{ Params :  Returns : boolean} jj_3R_185{ Params :  Returns : boolean} jj_3R_184{ Params :  Returns : boolean} jj_3R_183{ Params :  Returns : boolean} jj_3R_182{ Params :  Returns : boolean} jj_3R_163{ Params :  Returns : boolean} jj_3R_181{ Params :  Returns : boolean} jj_3R_340{ Params :  Returns : boolean} jj_3R_127{ Params :  Returns : boolean} jj_3_8{ Params :  Returns : boolean} jj_3R_50{ Params :  Returns : boolean} jj_3_7{ Params :  Returns : boolean} jj_3R_49{ Params :  Returns : boolean} jj_3R_77{ Params :  Returns : boolean} jj_3_6{ Params :  Returns : boolean} jj_3R_48{ Params :  Returns : boolean} jj_3R_76{ Params :  Returns : boolean} jj_3_5{ Params :  Returns : boolean} jj_3R_75{ Params :  Returns : boolean} jj_3R_148{ Params :  Returns : boolean} jj_3R_74{ Params :  Returns : boolean} jj_3R_73{ Params :  Returns : boolean} jj_3R_72{ Params :  Returns : boolean} jj_3R_348{ Params :  Returns : boolean} jj_3R_347{ Params :  Returns : boolean} jj_3_4{ Params :  Returns : boolean} jj_3R_46{ Params :  Returns : boolean} jj_3R_161{ Params :  Returns : boolean} jj_3R_195{ Params :  Returns : boolean} jj_3R_194{ Params :  Returns : boolean} jj_3R_193{ Params :  Returns : boolean} jj_3R_192{ Params :  Returns : boolean} jj_3R_191{ Params :  Returns : boolean} jj_3R_190{ Params :  Returns : boolean} jj_3R_165{ Params :  Returns : boolean} jj_3R_189{ Params :  Returns : boolean} jj_3R_345{ Params :  Returns : boolean} jj_3R_160{ Params :  Returns : boolean} jj_3R_346{ Params :  Returns : boolean} jj_3R_129{ Params :  Returns : boolean} jj_3_3{ Params :  Returns : boolean} jj_3R_159{ Params :  Returns : boolean} jj_3R_264{ Params :  Returns : boolean} jj_3R_362{ Params :  Returns : boolean} jj_3R_304{ Params :  Returns : boolean} jj_3R_158{ Params :  Returns : boolean} jj_3R_303{ Params :  Returns : boolean} jj_3R_136{ Params :  Returns : boolean} jj_3R_157{ Params :  Returns : boolean} jj_3R_344{ Params :  Returns : boolean} jj_3R_180{ Params :  Returns : boolean} jj_3R_179{ Params :  Returns : boolean} jj_3R_156{ Params :  Returns : boolean} jj_3R_178{ Params :  Returns : boolean} jj_3R_162{ Params :  Returns : boolean} jj_3R_177{ Params :  Returns : boolean} jj_3R_126{ Params :  Returns : boolean} jj_3R_353{ Params :  Returns : boolean} jj_3R_342{ Params :  Returns : boolean} jj_3R_45{ Params :  Returns : boolean} jj_3_36{ Params :  Returns : boolean} jj_3R_361{ Params :  Returns : boolean} jj_3_2{ Params :  Returns : boolean} jj_3R_343{ Params :  Returns : boolean} jj_3R_71{ Params :  Returns : boolean} jj_3R_360{ Params :  Returns : boolean} jj_3R_70{ Params :  Returns : boolean} jj_3R_359{ Params :  Returns : boolean} jj_3R_352{ Params :  Returns : boolean} jj_3R_44{ Params :  Returns : boolean} jj_3R_69{ Params :  Returns : boolean} jj_3R_155{ Params :  Returns : boolean} jj_3R_154{ Params :  Returns : boolean} jj_3R_153{ Params :  Returns : boolean} jj_3R_339{ Params :  Returns : boolean} jj_3_1{ Params :  Returns : boolean} jj_3R_152{ Params :  Returns : boolean} jj_3_35{ Params :  Returns : boolean} jj_3R_358{ Params :  Returns : boolean} jj_3R_357{ Params :  Returns : boolean} jj_3R_351{ Params :  Returns : boolean} jj_3R_341{ Params :  Returns : boolean} jj_3R_151{ Params :  Returns : boolean} jj_3R_356{ Params :  Returns : boolean} jj_3R_350{ Params :  Returns : boolean} jj_3R_176{ Params :  Returns : boolean} jj_3R_175{ Params :  Returns : boolean} jj_3R_150{ Params :  Returns : boolean} jj_3R_174{ Params :  Returns : boolean} jj_3R_149{ Params :  Returns : boolean} jj_3R_280{ Params :  Returns : boolean} jj_3R_170{ Params :  Returns : boolean} jj_3R_135{ Params :  Returns : boolean} jj_3_33{ Params :  Returns : boolean} jj_3R_284{ Params :  Returns : boolean} jj_3R_89{ Params :  Returns : boolean} jj_3R_88{ Params :  Returns : boolean} jj_3_34{ Params :  Returns : boolean} jj_3R_87{ Params :  Returns : boolean} jj_3R_86{ Params :  Returns : boolean} jj_3R_85{ Params :  Returns : boolean} jj_3_32{ Params :  Returns : boolean} jj_3R_57{ Params :  Returns : boolean} jj_3_29{ Params :  Returns : boolean} jj_3R_79{ Params :  Returns : boolean} jj_3R_66{ Params :  Returns : boolean} jj_3R_125{ Params :  Returns : boolean} jj_3R_124{ Params :  Returns : boolean} jj_3R_123{ Params :  Returns : boolean} jj_3R_283{ Params :  Returns : boolean} jj_3R_122{ Params :  Returns : boolean} jj_3R_121{ Params :  Returns : boolean} jj_3R_120{ Params :  Returns : boolean} jj_3R_119{ Params :  Returns : boolean} jj_3R_327{ Params :  Returns : boolean} jj_3R_118{ Params :  Returns : boolean} jj_3R_117{ Params :  Returns : boolean} jj_3R_116{ Params :  Returns : boolean} jj_3R_115{ Params :  Returns : boolean} jj_3R_114{ Params :  Returns : boolean} jj_3R_299{ Params :  Returns : boolean} jj_3R_113{ Params :  Returns : boolean} jj_3R_112{ Params :  Returns : boolean} jj_3_31{ Params :  Returns : boolean} jj_3R_111{ Params :  Returns : boolean} jj_3R_68{ Params :  Returns : boolean} jj_3R_260{ Params :  Returns : boolean} jj_3R_263{ Params :  Returns : boolean} jj_3R_279{ Params :  Returns : boolean} jj_3_28{ Params :  Returns : boolean} jj_3R_259{ Params :  Returns : boolean} jj_3_30{ Params :  Returns : boolean} jj_3R_254{ Params :  Returns : boolean} jj_3R_282{ Params :  Returns : boolean} jj_3R_256{ Params :  Returns : boolean} jj_3R_172{ Params :  Returns : boolean} jj_3R_255{ Params :  Returns : boolean} jj_3R_106{ Params :  Returns : boolean} jj_3R_355{ Params :  Returns : boolean} jj_3_27{ Params :  Returns : boolean} jj_3R_64{ Params :  Returns : boolean} jj_3R_145{ Params :  Returns : boolean} jj_3R_91{ Params :  Returns : boolean} jj_3R_146{ Params :  Returns : boolean} jj_3R_59{ Params :  Returns : boolean} jj_3R_316{ Params :  Returns : boolean} jj_3R_233{ Params :  Returns : boolean} jj_3R_326{ Params :  Returns : boolean} jj_3R_232{ Params :  Returns : boolean} jj_3R_237{ Params :  Returns : boolean} jj_3R_298{ Params :  Returns : boolean} jj_3R_227{ Params :  Returns : boolean} jj_3R_226{ Params :  Returns : boolean} jj_3R_225{ Params :  Returns : boolean} jj_3R_224{ Params :  Returns : boolean} jj_3R_223{ Params :  Returns : boolean} jj_3R_278{ Params :  Returns : boolean} jj_3R_171{ Params :  Returns : boolean} jj_3R_222{ Params :  Returns : boolean} jj_3R_272{ Params :  Returns : boolean} jj_3R_104{ Params :  Returns : boolean} jj_3R_103{ Params :  Returns : boolean} jj_3R_102{ Params :  Returns : boolean} jj_3_26{ Params :  Returns : boolean} jj_3_23{ Params :  Returns : boolean} jj_3_25{ Params :  Returns : boolean} jj_3R_62{ Params :  Returns : boolean} jj_3_24{ Params :  Returns : boolean} jj_3_22{ Params :  Returns : boolean} jj_3R_144{ Params :  Returns : boolean} jj_3R_143{ Params :  Returns : boolean} jj_3R_142{ Params :  Returns : boolean} jj_3R_141{ Params :  Returns : boolean} jj_3R_354{ Params :  Returns : boolean} jj_3R_349{ Params :  Returns : boolean} jj_3R_140{ Params :  Returns : boolean} jj_3R_301{ Params :  Returns : boolean} jj_3R_139{ Params :  Returns : boolean} jj_3R_138{ Params :  Returns : boolean} jj_3R_90{ Params :  Returns : boolean} jj_3_21{ Params :  Returns : boolean} jj_3R_329{ Params :  Returns : boolean} jj_3R_58{ Params :  Returns : boolean} jj_3R_315{ Params :  Returns : boolean} jj_3R_338{ Params :  Returns : boolean} jj_3R_330{ Params :  Returns : boolean} jj_3R_296{ Params :  Returns : boolean} jj_3R_337{ Params :  Returns : boolean} jj_3R_325{ Params :  Returns : boolean} jj_3R_314{ Params :  Returns : boolean} jj_3_20{ Params :  Returns : boolean} jj_3R_331{ Params :  Returns : boolean} jj_3R_297{ Params :  Returns : boolean} jj_3R_93{ Params :  Returns : boolean} jj_3R_276{ Params :  Returns : boolean} jj_3_18{ Params :  Returns : boolean} jj_3R_92{ Params :  Returns : boolean} jj_3R_60{ Params :  Returns : boolean} jj_3_19{ Params :  Returns : boolean} jj_3R_277{ Params :  Returns : boolean} jj_3R_274{ Params :  Returns : boolean} jj_3R_270{ Params :  Returns : boolean} jj_3R_319{ Params :  Returns : boolean} jj_3R_328{ Params :  Returns : boolean} jj_3R_318{ Params :  Returns : boolean} jj_3R_271{ Params :  Returns : boolean} jj_3R_317{ Params :  Returns : boolean} jj_3R_302{ Params :  Returns : boolean} jj_3R_268{ Params :  Returns : boolean} jj_3R_231{ Params :  Returns : boolean} jj_3R_265{ Params :  Returns : boolean} jj_3R_230{ Params :  Returns : boolean} jj_3R_300{ Params :  Returns : boolean} jj_3R_257{ Params :  Returns : boolean} jj_3R_275{ Params :  Returns : boolean} jj_3R_281{ Params :  Returns : boolean} jj_3R_261{ Params :  Returns : boolean} jj_3R_252{ Params :  Returns : boolean} jj_3R_273{ Params :  Returns : boolean} jj_3R_238{ Params :  Returns : boolean} jj_3R_269{ Params :  Returns : boolean} jj_3R_234{ Params :  Returns : boolean} jj_3R_266{ Params :  Returns : boolean} jj_3R_262{ Params :  Returns : boolean} jj_3R_258{ Params :  Returns : boolean} jj_3R_253{ Params :  Returns : boolean} jj_3R_251{ Params :  Returns : boolean} jj_3R_236{ Params :  Returns : boolean} jj_3R_229{ Params :  Returns : boolean} jj_3R_173{ Params :  Returns : boolean} jj_3R_147{ Params :  Returns : boolean} jj_3R_107{ Params :  Returns : boolean} jj_3R_250{ Params :  Returns : boolean} jj_3R_249{ Params :  Returns : boolean} jj_3R_248{ Params :  Returns : boolean} jj_3R_247{ Params :  Returns : boolean} jj_3R_246{ Params :  Returns : boolean} jj_3R_245{ Params :  Returns : boolean} jj_3R_244{ Params :  Returns : boolean} jj_3R_243{ Params :  Returns : boolean} jj_3R_242{ Params :  Returns : boolean} jj_3R_241{ Params :  Returns : boolean} jj_3R_240{ Params :  Returns : boolean} jj_3R_235{ Params :  Returns : boolean} jj_3R_239{ Params :  Returns : boolean} jj_3R_228{ Params :  Returns : boolean} jj_3R_65{ Params :  Returns : boolean} jj_3R_323{ Params :  Returns : boolean} jj_3R_308{ Params :  Returns : boolean} jj_3_17{ Params :  Returns : boolean} jj_3R_51{ Params :  Returns : boolean} jj_la1_0{ Params :  Returns : void} jj_la1_1{ Params :  Returns : void} jj_la1_2{ Params :  Returns : void} jj_la1_3{ Params :  Returns : void} ReInit{ Params : CharStream Returns : void} ReInit{ Params : JavaParserTokenManager Returns : void} jj_consume_token{ Params : int Returns : Token} jj_scan_token{ Params : int Returns : boolean} getNextToken{ Params :  Returns : Token} getToken{ Params : int Returns : Token} jj_ntk{ Params :  Returns : int} jj_add_error_token{ Params : int,int Returns : void} generateParseException{ Params :  Returns : ParseException} enable_tracing{ Params :  Returns : void} disable_tracing{ Params :  Returns : void} jj_rescan_token{ Params :  Returns : void} jj_save{ Params : int,int Returns : void} ,,jj_la1_0 jj_la1_1 jj_la1_2 jj_la1_3 ,CompilationUnit PackageDeclaration ImportDeclaration TypeDeclaration ClassDeclaration UnmodifiedClassDeclaration ClassBody NestedClassDeclaration ClassBodyDeclaration EnumDeclaration EnumElement MethodDeclarationLookahead InterfaceDeclaration NestedInterfaceDeclaration UnmodifiedInterfaceDeclaration InterfaceMemberDeclaration FieldDeclaration VariableDeclarator VariableDeclaratorId VariableInitializer ArrayInitializer MethodDeclaration MethodDeclarator FormalParameters FormalParameter ConstructorDeclaration ExplicitConstructorInvocation Initializer Type PrimitiveType ResultType Name NameList Expression AssignmentOperator ConditionalExpression ConditionalOrExpression ConditionalAndExpression InclusiveOrExpression ExclusiveOrExpression AndExpression EqualityExpression InstanceOfExpression RelationalExpression ShiftExpression AdditiveExpression MultiplicativeExpression UnaryExpression PreIncrementExpression PreDecrementExpression UnaryExpressionNotPlusMinus CastLookahead PostfixExpression CastExpression PrimaryExpression PrimaryPrefix PrimarySuffix Literal BooleanLiteral NullLiteral Arguments ArgumentList AllocationExpression ArrayDimsAndInits Statement LabeledStatement Block BlockStatement LocalVariableDeclaration EmptyStatement StatementExpression SwitchStatement SwitchLabel IfStatement WhileStatement DoStatement ForStatement ForInit StatementExpressionList ForUpdate BreakStatement ContinueStatement ReturnStatement ThrowStatement SynchronizedStatement TryStatement AssertStatement jj_2_1 jj_2_2 jj_2_3 jj_2_4 jj_2_5 jj_2_6 jj_2_7 jj_2_8 jj_2_9 jj_2_10 jj_2_11 jj_2_12 jj_2_13 jj_2_14 jj_2_15 jj_2_16 jj_2_17 jj_2_18 jj_2_19 jj_2_20 jj_2_21 jj_2_22 jj_2_23 jj_2_24 jj_2_25 jj_2_26 jj_2_27 jj_2_28 jj_2_29 jj_2_30 jj_2_31 jj_2_32 jj_2_33 jj_2_34 jj_2_35 jj_2_36 jj_3R_110 jj_3R_105 jj_3R_63 jj_3R_109 jj_3R_101 jj_3R_100 jj_3R_99 jj_3R_98 jj_3R_97 jj_3R_96 jj_3R_95 jj_3R_94 jj_3R_61 jj_3R_286 jj_3R_108 jj_3R_67 jj_3_16 jj_3R_78 jj_3R_47 jj_3_13 jj_3_15 jj_3R_84 jj_3R_83 jj_3R_56 jj_3R_322 jj_3_14 jj_3R_287 jj_3R_205 jj_3R_204 jj_3R_309 jj_3R_167 jj_3R_203 jj_3R_131 jj_3R_289 jj_3R_336 jj_3R_321 jj_3R_307 jj_3R_285 jj_3_12 jj_3R_288 jj_3R_290 jj_3R_214 jj_3R_213 jj_3R_212 jj_3R_211 jj_3R_210 jj_3R_209 jj_3R_208 jj_3R_207 jj_3R_168 jj_3R_206 jj_3R_132 jj_3R_267 jj_3R_134 jj_3R_313 jj_3R_82 jj_3R_295 jj_3R_81 jj_3R_55 jj_3R_324 jj_3R_312 jj_3R_294 jj_3R_221 jj_3R_220 jj_3R_219 jj_3R_218 jj_3R_217 jj_3R_216 jj_3R_169 jj_3R_215 jj_3R_133 jj_3_11 jj_3R_54 jj_3_10 jj_3R_53 jj_3_9 jj_3R_335 jj_3R_334 jj_3R_333 jj_3R_332 jj_3R_320 jj_3R_306 jj_3R_305 jj_3R_137 jj_3R_202 jj_3R_201 jj_3R_200 jj_3R_199 jj_3R_198 jj_3R_197 jj_3R_166 jj_3R_196 jj_3R_130 jj_3R_311 jj_3R_188 jj_3R_187 jj_3R_164 jj_3R_186 jj_3R_128 jj_3R_80 jj_3R_52 jj_3R_310 jj_3R_292 jj_3R_293 jj_3R_291 jj_3R_185 jj_3R_184 jj_3R_183 jj_3R_182 jj_3R_163 jj_3R_181 jj_3R_340 jj_3R_127 jj_3_8 jj_3R_50 jj_3_7 jj_3R_49 jj_3R_77 jj_3_6 jj_3R_48 jj_3R_76 jj_3_5 jj_3R_75 jj_3R_148 jj_3R_74 jj_3R_73 jj_3R_72 jj_3R_348 jj_3R_347 jj_3_4 jj_3R_46 jj_3R_161 jj_3R_195 jj_3R_194 jj_3R_193 jj_3R_192 jj_3R_191 jj_3R_190 jj_3R_165 jj_3R_189 jj_3R_345 jj_3R_160 jj_3R_346 jj_3R_129 jj_3_3 jj_3R_159 jj_3R_264 jj_3R_362 jj_3R_304 jj_3R_158 jj_3R_303 jj_3R_136 jj_3R_157 jj_3R_344 jj_3R_180 jj_3R_179 jj_3R_156 jj_3R_178 jj_3R_162 jj_3R_177 jj_3R_126 jj_3R_353 jj_3R_342 jj_3R_45 jj_3_36 jj_3R_361 jj_3_2 jj_3R_343 jj_3R_71 jj_3R_360 jj_3R_70 jj_3R_359 jj_3R_352 jj_3R_44 jj_3R_69 jj_3R_155 jj_3R_154 jj_3R_153 jj_3R_339 jj_3_1 jj_3R_152 jj_3_35 jj_3R_358 jj_3R_357 jj_3R_351 jj_3R_341 jj_3R_151 jj_3R_356 jj_3R_350 jj_3R_176 jj_3R_175 jj_3R_150 jj_3R_174 jj_3R_149 jj_3R_280 jj_3R_170 jj_3R_135 jj_3_33 jj_3R_284 jj_3R_89 jj_3R_88 jj_3_34 jj_3R_87 jj_3R_86 jj_3R_85 jj_3_32 jj_3R_57 jj_3_29 jj_3R_79 jj_3R_66 jj_3R_125 jj_3R_124 jj_3R_123 jj_3R_283 jj_3R_122 jj_3R_121 jj_3R_120 jj_3R_119 jj_3R_327 jj_3R_118 jj_3R_117 jj_3R_116 jj_3R_115 jj_3R_114 jj_3R_299 jj_3R_113 jj_3R_112 jj_3_31 jj_3R_111 jj_3R_68 jj_3R_260 jj_3R_263 jj_3R_279 jj_3_28 jj_3R_259 jj_3_30 jj_3R_254 jj_3R_282 jj_3R_256 jj_3R_172 jj_3R_255 jj_3R_106 jj_3R_355 jj_3_27 jj_3R_64 jj_3R_145 jj_3R_91 jj_3R_146 jj_3R_59 jj_3R_316 jj_3R_233 jj_3R_326 jj_3R_232 jj_3R_237 jj_3R_298 jj_3R_227 jj_3R_226 jj_3R_225 jj_3R_224 jj_3R_223 jj_3R_278 jj_3R_171 jj_3R_222 jj_3R_272 jj_3R_104 jj_3R_103 jj_3R_102 jj_3_26 jj_3_23 jj_3_25 jj_3R_62 jj_3_24 jj_3_22 jj_3R_144 jj_3R_143 jj_3R_142 jj_3R_141 jj_3R_354 jj_3R_349 jj_3R_140 jj_3R_301 jj_3R_139 jj_3R_138 jj_3R_90 jj_3_21 jj_3R_329 jj_3R_58 jj_3R_315 jj_3R_338 jj_3R_330 jj_3R_296 jj_3R_337 jj_3R_325 jj_3R_314 jj_3_20 jj_3R_331 jj_3R_297 jj_3R_93 jj_3R_276 jj_3_18 jj_3R_92 jj_3R_60 jj_3_19 jj_3R_277 jj_3R_274 jj_3R_270 jj_3R_319 jj_3R_328 jj_3R_318 jj_3R_271 jj_3R_317 jj_3R_302 jj_3R_268 jj_3R_231 jj_3R_265 jj_3R_230 jj_3R_300 jj_3R_257 jj_3R_275 jj_3R_281 jj_3R_261 jj_3R_252 jj_3R_273 jj_3R_238 jj_3R_269 jj_3R_234 jj_3R_266 jj_3R_262 jj_3R_258 jj_3R_253 jj_3R_251 jj_3R_236 jj_3R_229 jj_3R_173 jj_3R_147 jj_3R_107 jj_3R_250 jj_3R_249 jj_3R_248 jj_3R_247 jj_3R_246 jj_3R_245 jj_3R_244 jj_3R_243 jj_3R_242 jj_3R_241 jj_3R_240 jj_3R_235 jj_3R_239 jj_3R_228 jj_3R_65 jj_3R_323 jj_3R_308 jj_3_17 jj_3R_51 jj_consume_token jj_scan_token getNextToken getToken jj_ntk enable_tracing disable_tracing jj_rescan_token jj_save ,
PMD,net.sourceforge.pmd.ast,JavaParserConstants,2,1,0,0,0,true,0 ,JavaParserTreeConstants JavaParserConstants ,0 ,EOF: int SINGLE_LINE_COMMENT: int FORMAL_COMMENT: int MULTI_LINE_COMMENT: int ABSTRACT: int BOOLEAN: int BREAK: int BYTE: int CASE: int CATCH: int CHAR: int CLASS: int CONST: int CONTINUE: int _DEFAULT: int DO: int DOUBLE: int ELSE: int EXTENDS: int FALSE: int FINAL: int FINALLY: int FLOAT: int FOR: int GOTO: int IF: int IMPLEMENTS: int IMPORT: int INSTANCEOF: int INT: int INTERFACE: int LONG: int NATIVE: int NEW: int NULL: int PACKAGE: int PRIVATE: int PROTECTED: int PUBLIC: int RETURN: int SHORT: int STATIC: int SUPER: int SWITCH: int SYNCHRONIZED: int THIS: int THROW: int THROWS: int TRANSIENT: int TRUE: int TRY: int VOID: int VOLATILE: int WHILE: int STRICTFP: int INTEGER_LITERAL: int DECIMAL_LITERAL: int HEX_LITERAL: int OCTAL_LITERAL: int FLOATING_POINT_LITERAL: int EXPONENT: int CHARACTER_LITERAL: int STRING_LITERAL: int IDENTIFIER: int LETTER: int DIGIT: int LPAREN: int RPAREN: int LBRACE: int RBRACE: int LBRACKET: int RBRACKET: int SEMICOLON: int COMMA: int DOT: int ASSIGN: int GT: int LT: int BANG: int TILDE: int HOOK: int COLON: int EQ: int LE: int GE: int NE: int SC_OR: int SC_AND: int INCR: int DECR: int PLUS: int MINUS: int STAR: int SLASH: int BIT_AND: int BIT_OR: int XOR: int REM: int LSHIFT: int RSIGNEDSHIFT: int RUNSIGNEDSHIFT: int PLUSASSIGN: int MINUSASSIGN: int STARASSIGN: int SLASHASSIGN: int ANDASSIGN: int ORASSIGN: int XORASSIGN: int REMASSIGN: int LSHIFTASSIGN: int RSIGNEDSHIFTASSIGN: int RUNSIGNEDSHIFTASSIGN: int DEFAULT: int IN_FORMAL_COMMENT: int IN_MULTI_LINE_COMMENT: int tokenImage: String ,,,,,
PMD,net.sourceforge.pmd.ast,JavaParserTokenManager,1,1,0,0,0,false,0 ,JavaParserConstants ,0 ,debugStream: java.io.PrintStream jjbitVec0: long jjbitVec2: long jjbitVec3: long jjbitVec4: long jjbitVec5: long jjbitVec6: long jjbitVec7: long jjbitVec8: long jjnextStates: int jjstrLiteralImages: String lexStateNames: String jjnewLexState: int jjtoToken: long jjtoSkip: long jjtoSpecial: long jjtoMore: long input_stream: CharStream jjrounds: int jjstateSet: int image: StringBuffer jjimageLen: int lengthOfMatch: int curChar: char curLexState: int defaultLexState: int jjnewStateCnt: int jjround: int jjmatchedPos: int jjmatchedKind: int ,setDebugStream{ Params : java.io.PrintStream Returns : void} jjStopStringLiteralDfa_0{ Params : int,long,long Returns : int} jjStartNfa_0{ Params : int,long,long Returns : int} jjStopAtPos{ Params : int,int Returns : int} jjStartNfaWithStates_0{ Params : int,int,int Returns : int} jjMoveStringLiteralDfa0_0{ Params :  Returns : int} jjMoveStringLiteralDfa1_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa2_0{ Params : long,long,long,long Returns : int} jjMoveStringLiteralDfa3_0{ Params : long,long,long,long Returns : int} jjMoveStringLiteralDfa4_0{ Params : long,long,long,long Returns : int} jjMoveStringLiteralDfa5_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa6_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa7_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa8_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa9_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa10_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa11_0{ Params : long,long Returns : int} jjCheckNAdd{ Params : int Returns : void} jjAddStates{ Params : int,int Returns : void} jjCheckNAddTwoStates{ Params : int,int Returns : void} jjCheckNAddStates{ Params : int,int Returns : void} jjCheckNAddStates{ Params : int Returns : void} jjMoveNfa_0{ Params : int,int Returns : int} jjMoveStringLiteralDfa0_2{ Params :  Returns : int} jjMoveStringLiteralDfa1_2{ Params : long Returns : int} jjMoveStringLiteralDfa0_1{ Params :  Returns : int} jjMoveStringLiteralDfa1_1{ Params : long Returns : int} jjCanMove_0{ Params : int,int,int,long,long Returns : boolean} jjCanMove_1{ Params : int,int,int,long,long Returns : boolean} ReInit{ Params : CharStream Returns : void} ReInitRounds{ Params :  Returns : void} ReInit{ Params : CharStream,int Returns : void} SwitchTo{ Params : int Returns : void} jjFillToken{ Params :  Returns : Token} getNextToken{ Params :  Returns : Token} SkipLexicalActions{ Params : Token Returns : void} MoreLexicalActions{ Params :  Returns : void} ,,jjCanMove_0 jjCanMove_1 ,jjStopStringLiteralDfa_0 jjStartNfa_0 jjStopAtPos jjStartNfaWithStates_0 jjMoveStringLiteralDfa0_0 jjMoveStringLiteralDfa1_0 jjMoveStringLiteralDfa2_0 jjMoveStringLiteralDfa3_0 jjMoveStringLiteralDfa4_0 jjMoveStringLiteralDfa5_0 jjMoveStringLiteralDfa6_0 jjMoveStringLiteralDfa7_0 jjMoveStringLiteralDfa8_0 jjMoveStringLiteralDfa9_0 jjMoveStringLiteralDfa10_0 jjMoveStringLiteralDfa11_0 jjCheckNAdd jjAddStates jjCheckNAddTwoStates jjCheckNAddStates jjCheckNAddStates jjMoveNfa_0 jjMoveStringLiteralDfa0_2 jjMoveStringLiteralDfa1_2 jjMoveStringLiteralDfa0_1 jjMoveStringLiteralDfa1_1 ReInitRounds ,
PMD,net.sourceforge.pmd.ast,JavaParserTreeConstants,2,1,0,0,0,true,0 ,JavaParserConstants ,0 ,JJTCOMPILATIONUNIT: int JJTPACKAGEDECLARATION: int JJTIMPORTDECLARATION: int JJTTYPEDECLARATION: int JJTCLASSDECLARATION: int JJTUNMODIFIEDCLASSDECLARATION: int JJTCLASSBODY: int JJTNESTEDCLASSDECLARATION: int JJTCLASSBODYDECLARATION: int JJTENUMDECLARATION: int JJTENUMELEMENT: int JJTMETHODDECLARATIONLOOKAHEAD: int JJTINTERFACEDECLARATION: int JJTNESTEDINTERFACEDECLARATION: int JJTUNMODIFIEDINTERFACEDECLARATION: int JJTINTERFACEMEMBERDECLARATION: int JJTFIELDDECLARATION: int JJTVARIABLEDECLARATOR: int JJTVARIABLEDECLARATORID: int JJTVARIABLEINITIALIZER: int JJTARRAYINITIALIZER: int JJTMETHODDECLARATION: int JJTMETHODDECLARATOR: int JJTFORMALPARAMETERS: int JJTFORMALPARAMETER: int JJTCONSTRUCTORDECLARATION: int JJTEXPLICITCONSTRUCTORINVOCATION: int JJTINITIALIZER: int JJTTYPE: int JJTPRIMITIVETYPE: int JJTRESULTTYPE: int JJTNAME: int JJTNAMELIST: int JJTEXPRESSION: int JJTASSIGNMENTOPERATOR: int JJTCONDITIONALEXPRESSION: int JJTCONDITIONALOREXPRESSION: int JJTCONDITIONALANDEXPRESSION: int JJTINCLUSIVEOREXPRESSION: int JJTEXCLUSIVEOREXPRESSION: int JJTANDEXPRESSION: int JJTEQUALITYEXPRESSION: int JJTINSTANCEOFEXPRESSION: int JJTRELATIONALEXPRESSION: int JJTSHIFTEXPRESSION: int JJTADDITIVEEXPRESSION: int JJTMULTIPLICATIVEEXPRESSION: int JJTUNARYEXPRESSION: int JJTPREINCREMENTEXPRESSION: int JJTPREDECREMENTEXPRESSION: int JJTUNARYEXPRESSIONNOTPLUSMINUS: int JJTCASTLOOKAHEAD: int JJTPOSTFIXEXPRESSION: int JJTCASTEXPRESSION: int JJTPRIMARYEXPRESSION: int JJTPRIMARYPREFIX: int JJTPRIMARYSUFFIX: int JJTLITERAL: int JJTBOOLEANLITERAL: int JJTNULLLITERAL: int JJTARGUMENTS: int JJTARGUMENTLIST: int JJTALLOCATIONEXPRESSION: int JJTARRAYDIMSANDINITS: int JJTSTATEMENT: int JJTLABELEDSTATEMENT: int JJTBLOCK: int JJTBLOCKSTATEMENT: int JJTLOCALVARIABLEDECLARATION: int JJTEMPTYSTATEMENT: int JJTSTATEMENTEXPRESSION: int JJTSWITCHSTATEMENT: int JJTSWITCHLABEL: int JJTIFSTATEMENT: int JJTWHILESTATEMENT: int JJTDOSTATEMENT: int JJTFORSTATEMENT: int JJTFORINIT: int JJTSTATEMENTEXPRESSIONLIST: int JJTFORUPDATE: int JJTBREAKSTATEMENT: int JJTCONTINUESTATEMENT: int JJTRETURNSTATEMENT: int JJTTHROWSTATEMENT: int JJTSYNCHRONIZEDSTATEMENT: int JJTTRYSTATEMENT: int JJTASSERTSTATEMENT: int jjtNodeName: String ,,,,,
PMD,net.sourceforge.pmd.ast,JavaParserVisitor,2,1,0,0,0,true,0 ,JavaParserConstants ,0 ,,visit{ Params : SimpleNode,Object Returns : Object} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTPackageDeclaration,Object Returns : Object} visit{ Params : ASTImportDeclaration,Object Returns : Object} visit{ Params : ASTTypeDeclaration,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBody,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBodyDeclaration,Object Returns : Object} visit{ Params : ASTEnumDeclaration,Object Returns : Object} visit{ Params : ASTEnumElement,Object Returns : Object} visit{ Params : ASTMethodDeclarationLookahead,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceMemberDeclaration,Object Returns : Object} visit{ Params : ASTFieldDeclaration,Object Returns : Object} visit{ Params : ASTVariableDeclarator,Object Returns : Object} visit{ Params : ASTVariableDeclaratorId,Object Returns : Object} visit{ Params : ASTVariableInitializer,Object Returns : Object} visit{ Params : ASTArrayInitializer,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} visit{ Params : ASTFormalParameters,Object Returns : Object} visit{ Params : ASTFormalParameter,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTExplicitConstructorInvocation,Object Returns : Object} visit{ Params : ASTInitializer,Object Returns : Object} visit{ Params : ASTType,Object Returns : Object} visit{ Params : ASTPrimitiveType,Object Returns : Object} visit{ Params : ASTResultType,Object Returns : Object} visit{ Params : ASTName,Object Returns : Object} visit{ Params : ASTNameList,Object Returns : Object} visit{ Params : ASTExpression,Object Returns : Object} visit{ Params : ASTAssignmentOperator,Object Returns : Object} visit{ Params : ASTConditionalExpression,Object Returns : Object} visit{ Params : ASTConditionalOrExpression,Object Returns : Object} visit{ Params : ASTConditionalAndExpression,Object Returns : Object} visit{ Params : ASTInclusiveOrExpression,Object Returns : Object} visit{ Params : ASTExclusiveOrExpression,Object Returns : Object} visit{ Params : ASTAndExpression,Object Returns : Object} visit{ Params : ASTEqualityExpression,Object Returns : Object} visit{ Params : ASTInstanceOfExpression,Object Returns : Object} visit{ Params : ASTRelationalExpression,Object Returns : Object} visit{ Params : ASTShiftExpression,Object Returns : Object} visit{ Params : ASTAdditiveExpression,Object Returns : Object} visit{ Params : ASTMultiplicativeExpression,Object Returns : Object} visit{ Params : ASTUnaryExpression,Object Returns : Object} visit{ Params : ASTPreIncrementExpression,Object Returns : Object} visit{ Params : ASTPreDecrementExpression,Object Returns : Object} visit{ Params : ASTUnaryExpressionNotPlusMinus,Object Returns : Object} visit{ Params : ASTCastLookahead,Object Returns : Object} visit{ Params : ASTPostfixExpression,Object Returns : Object} visit{ Params : ASTCastExpression,Object Returns : Object} visit{ Params : ASTPrimaryExpression,Object Returns : Object} visit{ Params : ASTPrimaryPrefix,Object Returns : Object} visit{ Params : ASTPrimarySuffix,Object Returns : Object} visit{ Params : ASTLiteral,Object Returns : Object} visit{ Params : ASTBooleanLiteral,Object Returns : Object} visit{ Params : ASTNullLiteral,Object Returns : Object} visit{ Params : ASTArguments,Object Returns : Object} visit{ Params : ASTArgumentList,Object Returns : Object} visit{ Params : ASTAllocationExpression,Object Returns : Object} visit{ Params : ASTArrayDimsAndInits,Object Returns : Object} visit{ Params : ASTStatement,Object Returns : Object} visit{ Params : ASTLabeledStatement,Object Returns : Object} visit{ Params : ASTBlock,Object Returns : Object} visit{ Params : ASTBlockStatement,Object Returns : Object} visit{ Params : ASTLocalVariableDeclaration,Object Returns : Object} visit{ Params : ASTEmptyStatement,Object Returns : Object} visit{ Params : ASTStatementExpression,Object Returns : Object} visit{ Params : ASTSwitchStatement,Object Returns : Object} visit{ Params : ASTSwitchLabel,Object Returns : Object} visit{ Params : ASTIfStatement,Object Returns : Object} visit{ Params : ASTWhileStatement,Object Returns : Object} visit{ Params : ASTDoStatement,Object Returns : Object} visit{ Params : ASTForStatement,Object Returns : Object} visit{ Params : ASTForInit,Object Returns : Object} visit{ Params : ASTStatementExpressionList,Object Returns : Object} visit{ Params : ASTForUpdate,Object Returns : Object} visit{ Params : ASTBreakStatement,Object Returns : Object} visit{ Params : ASTContinueStatement,Object Returns : Object} visit{ Params : ASTReturnStatement,Object Returns : Object} visit{ Params : ASTThrowStatement,Object Returns : Object} visit{ Params : ASTSynchronizedStatement,Object Returns : Object} visit{ Params : ASTTryStatement,Object Returns : Object} visit{ Params : ASTAssertStatement,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,JavaParserVisitorAdapter,1,1,0,0,0,false,0 ,JavaParserVisitor ,0 ,,visit{ Params : SimpleNode,Object Returns : Object} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTEnumDeclaration,Object Returns : Object} visit{ Params : ASTEnumElement,Object Returns : Object} visit{ Params : ASTAssertStatement,Object Returns : Object} visit{ Params : ASTPackageDeclaration,Object Returns : Object} visit{ Params : ASTImportDeclaration,Object Returns : Object} visit{ Params : ASTTypeDeclaration,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBody,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBodyDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarationLookahead,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceMemberDeclaration,Object Returns : Object} visit{ Params : ASTFieldDeclaration,Object Returns : Object} visit{ Params : ASTVariableDeclarator,Object Returns : Object} visit{ Params : ASTVariableDeclaratorId,Object Returns : Object} visit{ Params : ASTVariableInitializer,Object Returns : Object} visit{ Params : ASTArrayInitializer,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} visit{ Params : ASTFormalParameters,Object Returns : Object} visit{ Params : ASTFormalParameter,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTExplicitConstructorInvocation,Object Returns : Object} visit{ Params : ASTInitializer,Object Returns : Object} visit{ Params : ASTType,Object Returns : Object} visit{ Params : ASTPrimitiveType,Object Returns : Object} visit{ Params : ASTResultType,Object Returns : Object} visit{ Params : ASTName,Object Returns : Object} visit{ Params : ASTNameList,Object Returns : Object} visit{ Params : ASTExpression,Object Returns : Object} visit{ Params : ASTAssignmentOperator,Object Returns : Object} visit{ Params : ASTConditionalExpression,Object Returns : Object} visit{ Params : ASTConditionalOrExpression,Object Returns : Object} visit{ Params : ASTConditionalAndExpression,Object Returns : Object} visit{ Params : ASTInclusiveOrExpression,Object Returns : Object} visit{ Params : ASTExclusiveOrExpression,Object Returns : Object} visit{ Params : ASTAndExpression,Object Returns : Object} visit{ Params : ASTEqualityExpression,Object Returns : Object} visit{ Params : ASTInstanceOfExpression,Object Returns : Object} visit{ Params : ASTRelationalExpression,Object Returns : Object} visit{ Params : ASTShiftExpression,Object Returns : Object} visit{ Params : ASTAdditiveExpression,Object Returns : Object} visit{ Params : ASTMultiplicativeExpression,Object Returns : Object} visit{ Params : ASTUnaryExpression,Object Returns : Object} visit{ Params : ASTPreIncrementExpression,Object Returns : Object} visit{ Params : ASTPreDecrementExpression,Object Returns : Object} visit{ Params : ASTUnaryExpressionNotPlusMinus,Object Returns : Object} visit{ Params : ASTCastLookahead,Object Returns : Object} visit{ Params : ASTPostfixExpression,Object Returns : Object} visit{ Params : ASTCastExpression,Object Returns : Object} visit{ Params : ASTPrimaryExpression,Object Returns : Object} visit{ Params : ASTPrimaryPrefix,Object Returns : Object} visit{ Params : ASTPrimarySuffix,Object Returns : Object} visit{ Params : ASTLiteral,Object Returns : Object} visit{ Params : ASTBooleanLiteral,Object Returns : Object} visit{ Params : ASTNullLiteral,Object Returns : Object} visit{ Params : ASTArguments,Object Returns : Object} visit{ Params : ASTArgumentList,Object Returns : Object} visit{ Params : ASTAllocationExpression,Object Returns : Object} visit{ Params : ASTArrayDimsAndInits,Object Returns : Object} visit{ Params : ASTStatement,Object Returns : Object} visit{ Params : ASTLabeledStatement,Object Returns : Object} visit{ Params : ASTBlock,Object Returns : Object} visit{ Params : ASTBlockStatement,Object Returns : Object} visit{ Params : ASTLocalVariableDeclaration,Object Returns : Object} visit{ Params : ASTEmptyStatement,Object Returns : Object} visit{ Params : ASTStatementExpression,Object Returns : Object} visit{ Params : ASTSwitchStatement,Object Returns : Object} visit{ Params : ASTSwitchLabel,Object Returns : Object} visit{ Params : ASTIfStatement,Object Returns : Object} visit{ Params : ASTWhileStatement,Object Returns : Object} visit{ Params : ASTDoStatement,Object Returns : Object} visit{ Params : ASTForStatement,Object Returns : Object} visit{ Params : ASTForInit,Object Returns : Object} visit{ Params : ASTStatementExpressionList,Object Returns : Object} visit{ Params : ASTForUpdate,Object Returns : Object} visit{ Params : ASTBreakStatement,Object Returns : Object} visit{ Params : ASTContinueStatement,Object Returns : Object} visit{ Params : ASTReturnStatement,Object Returns : Object} visit{ Params : ASTThrowStatement,Object Returns : Object} visit{ Params : ASTSynchronizedStatement,Object Returns : Object} visit{ Params : ASTTryStatement,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,JJTJavaParserState,1,0,0,0,0,false,0 ,0 ,0 ,nodes: java.util.Stack marks: java.util.Stack sp: int mk: int node_created: boolean ,nodeCreated{ Params :  Returns : boolean} reset{ Params :  Returns : void} rootNode{ Params :  Returns : Node} pushNode{ Params : Node Returns : void} popNode{ Params :  Returns : Node} peekNode{ Params :  Returns : Node} nodeArity{ Params :  Returns : int} clearNodeScope{ Params : Node Returns : void} openNodeScope{ Params : Node Returns : void} closeNodeScope{ Params : Node,int Returns : void} closeNodeScope{ Params : Node,boolean Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,Node,2,1,0,0,0,true,0 ,0 ,0 ,,jjtOpen{ Params :  Returns : void} jjtClose{ Params :  Returns : void} jjtSetParent{ Params : Node Returns : void} jjtGetParent{ Params :  Returns : Node} jjtAddChild{ Params : Node,int Returns : void} jjtGetChild{ Params : int Returns : Node} jjtGetNumChildren{ Params :  Returns : int} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.ast,ParseException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,specialConstructor: boolean currentToken: Token expectedTokenSequences: int tokenImage: String eol: String ,getMessage{ Params :  Returns : String} add_escapes{ Params : String Returns : String} ,,,,
PMD,net.sourceforge.pmd.ast,SimpleCharStream,1,1,0,0,0,false,0 ,0 ,0 ,staticFlag: boolean bufsize: int available: int tokenBegin: int bufpos: int bufline: int bufcolumn: int column: int line: int prevCharIsCR: boolean prevCharIsLF: boolean inputStream: java.io.Reader buffer: char maxNextCharInd: int inBuf: int ,ExpandBuff{ Params : boolean Returns : void} FillBuff{ Params :  Returns : void} BeginToken{ Params :  Returns : char} UpdateLineColumn{ Params : char Returns : void} readChar{ Params :  Returns : char} getColumn{ Params :  Returns : int} getLine{ Params :  Returns : int} getEndColumn{ Params :  Returns : int} getEndLine{ Params :  Returns : int} getBeginColumn{ Params :  Returns : int} getBeginLine{ Params :  Returns : int} backup{ Params : int Returns : void} ReInit{ Params : java.io.Reader,int,int,int Returns : void} ReInit{ Params : java.io.Reader,int,int Returns : void} ReInit{ Params : java.io.Reader Returns : void} ReInit{ Params : java.io.InputStream,int,int,int Returns : void} ReInit{ Params : java.io.InputStream Returns : void} ReInit{ Params : java.io.InputStream,int,int Returns : void} GetImage{ Params :  Returns : String} GetSuffix{ Params : int Returns : char[]} Done{ Params :  Returns : void} adjustBeginLineColumn{ Params : int,int Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,SimpleNode,1,1,0,0,0,false,0 ,Node ,0 ,parent: Node children: Node id: int parser: JavaParser image: String beginLine: int endLine: int beginColumn: int endColumn: int scope: Scope discardable: boolean ,setDiscardable{ Params :  Returns : void} setUnDiscardable{ Params :  Returns : void} isDiscardable{ Params :  Returns : boolean} jjtOpen{ Params :  Returns : void} jjtClose{ Params :  Returns : void} setScope{ Params : Scope Returns : void} getScope{ Params :  Returns : Scope} getBeginLine{ Params :  Returns : int} testingOnly__setBeginLine{ Params : int Returns : void} testingOnly__setBeginColumn{ Params : int Returns : void} getBeginColumn{ Params :  Returns : int} getImage{ Params :  Returns : String} setImage{ Params : String Returns : void} getEndLine{ Params :  Returns : int} getEndColumn{ Params :  Returns : int} getFirstParentOfType{ Params : Class Returns : Node} getParentsOfType{ Params : Class Returns : List} findChildrenOfType{ Params : Class Returns : List} findChildrenOfType{ Params : Class,List Returns : void} findChildrenOfType{ Params : Class,List,boolean Returns : void} findChildrenOfType{ Params : Node,Class,List,boolean Returns : void} jjtSetParent{ Params : Node Returns : void} jjtGetParent{ Params :  Returns : Node} jjtReplaceChild{ Params : Node,Node Returns : void} jjtAddChild{ Params : Node,int Returns : void} jjtGetChild{ Params : int Returns : Node} jjtGetNumChildren{ Params :  Returns : int} jjtAccept{ Params : JavaParserVisitor,Object Returns : Object} childrenAccept{ Params : JavaParserVisitor,Object Returns : Object} toString{ Params :  Returns : String} toString{ Params : String Returns : String} dump{ Params : String Returns : void} dumpChildren{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.ast,Token,1,1,0,0,0,false,0 ,0 ,0 ,kind: int beginLine: int image: String next: Token specialToken: Token ,toString{ Params :  Returns : String} newToken{ Params : int Returns : Token} ,,newToken ,,
PMD,net.sourceforge.pmd.ast,TokenMgrError,1,1,0,0,0,false,RuntimeException ,0 ,0 ,LEXICAL_ERROR: int STATIC_LEXER_ERROR: int INVALID_LEXICAL_STATE: int LOOP_DETECTED: int errorCode: int ,addEscapes{ Params : String Returns : String} LexicalError{ Params : boolean,int,int,int,String,char Returns : String} getMessage{ Params :  Returns : String} ,,addEscapes LexicalError ,,
PMD,net.sourceforge.pmd,CommandLineOptions,1,1,0,0,0,false,0 ,0 ,0 ,debugEnabled: boolean jdk13: boolean shortNamesEnabled: boolean inputFileName: String reportFormat: String ruleSets: String encoding: String args: String ,createRenderer{ Params :  Returns : Renderer} containsCommaSeparatedFileList{ Params :  Returns : boolean} getInputFileName{ Params :  Returns : String} getEncoding{ Params :  Returns : String} getReportFormat{ Params :  Returns : String} getRulesets{ Params :  Returns : String} debugEnabled{ Params :  Returns : boolean} jdk13{ Params :  Returns : boolean} shortNamesEnabled{ Params :  Returns : boolean} usage{ Params :  Returns : String} ,,,,
PMD,net.sourceforge.pmd.cpd,CPD,1,1,0,0,0,false,0 ,0 ,0 ,source: Map listener: CPDListener tokens: Tokens minimumTileSize: int matchAlgorithm: MatchAlgorithm language: Language ,setCpdListener{ Params : CPDListener Returns : void} go{ Params :  Returns : void} getMatches{ Params :  Returns : Iterator} add{ Params : File Returns : void} addAllInDirectory{ Params : String Returns : void} addRecursively{ Params : String Returns : void} add{ Params : List Returns : void} addDirectory{ Params : String,boolean Returns : void} add{ Params : int,File Returns : void} main{ Params : String[] Returns : void} usage{ Params :  Returns : void} ,,main usage ,,
PMD,net.sourceforge.pmd.cpd,CPDListener,2,1,0,0,0,true,0 ,0 ,0 ,INIT: int HASH: int MATCH: int GROUPING: int DONE: int ,addedFile{ Params : int,File Returns : void} phaseUpdate{ Params : int Returns : void} ,,,,
PMD,net.sourceforge.pmd.cpd,CPDNullListener,1,1,0,0,0,false,0 ,CPDListener ,0 ,,addedFile{ Params : int,File Returns : void} phaseUpdate{ Params : int Returns : void} ,,,,
PMD,net.sourceforge.pmd.cpd,CPDTask,1,1,0,0,0,false,Task ,0 ,FormatAttribute ,TEXT_FORMAT: String XML_FORMAT: String CSV_FORMAT: String format: String minimumTokenCount: int outputFile: File filesets: List ,execute{ Params :  Returns : void} report{ Params : CPD Returns : void} tokenizeFiles{ Params : CPD Returns : void} analyzeCode{ Params : CPD Returns : long} createRenderer{ Params :  Returns : Renderer} validateFields{ Params :  Returns : void} addFileset{ Params : FileSet Returns : void} setMinimumTokenCount{ Params : int Returns : void} setOutputFile{ Params : File Returns : void} setFormat{ Params : FormatAttribute Returns : void} getValues{ Params :  Returns : String[]} ,,,,
PMD,net.sourceforge.pmd.cpd,FormatAttribute,3,1,0,1,0,false,Task ,0 ,FormatAttribute ,formats: String ,execute{ Params :  Returns : void} report{ Params : CPD Returns : void} tokenizeFiles{ Params : CPD Returns : void} analyzeCode{ Params : CPD Returns : long} createRenderer{ Params :  Returns : Renderer} validateFields{ Params :  Returns : void} addFileset{ Params : FileSet Returns : void} setMinimumTokenCount{ Params : int Returns : void} setOutputFile{ Params : File Returns : void} setFormat{ Params : FormatAttribute Returns : void} getValues{ Params :  Returns : String[]} ,,,,
PMD,net.sourceforge.pmd.cpd.cppast,ClassScope,1,1,0,0,0,false,Scope ,0 ,0 ,superClasses: Vector ,AddSuper{ Params : Scope Returns : void} IsTypeName{ Params : String Returns : boolean} ,,,,
PMD,net.sourceforge.pmd.cpd.cppast,CPPParserConstants,2,1,0,0,0,true,Scope ,0 ,0 ,EOF: int LCURLYBRACE: int RCURLYBRACE: int LSQUAREBRACKET: int RSQUAREBRACKET: int LPARENTHESIS: int RPARENTHESIS: int SCOPE: int COLON: int SEMICOLON: int COMMA: int QUESTIONMARK: int ELLIPSIS: int ASSIGNEQUAL: int TIMESEQUAL: int DIVIDEEQUAL: int MODEQUAL: int PLUSEQUAL: int MINUSEQUAL: int SHIFTLEFTEQUAL: int SHIFTRIGHTEQUAL: int BITWISEANDEQUAL: int BITWISEXOREQUAL: int BITWISEOREQUAL: int OR: int AND: int BITWISEOR: int BITWISEXOR: int AMPERSAND: int EQUAL: int NOTEQUAL: int LESSTHAN: int GREATERTHAN: int LESSTHANOREQUALTO: int GREATERTHANOREQUALTO: int SHIFTLEFT: int SHIFTRIGHT: int PLUS: int MINUS: int STAR: int DIVIDE: int MOD: int PLUSPLUS: int MINUSMINUS: int TILDE: int NOT: int DOT: int POINTERTO: int DOTSTAR: int ARROWSTAR: int AUTO: int BREAK: int CASE: int CATCH: int CHAR: int CONST: int CONTINUE: int _DEFAULT: int DELETE: int DO: int DOUBLE: int ELSE: int ENUM: int EXTERN: int FLOAT: int FOR: int FRIEND: int GOTO: int IF: int INLINE: int INT: int LONG: int NEW: int PRIVATE: int PROTECTED: int PUBLIC: int REDECLARED: int REGISTER: int RETURN: int SHORT: int SIGNED: int SIZEOF: int STATIC: int STRUCT: int CLASS: int SWITCH: int TEMPLATE: int THIS: int TRY: int TYPEDEF: int UNION: int UNSIGNED: int VIRTUAL: int VOID: int VOLATILE: int WHILE: int OPERATOR: int TRUETOK: int FALSETOK: int THROW: int OCTALINT: int OCTALLONG: int UNSIGNED_OCTALINT: int UNSIGNED_OCTALLONG: int DECIMALINT: int DECIMALLONG: int UNSIGNED_DECIMALINT: int UNSIGNED_DECIMALLONG: int HEXADECIMALINT: int HEXADECIMALLONG: int UNSIGNED_HEXADECIMALINT: int UNSIGNED_HEXADECIMALLONG: int FLOATONE: int FLOATTWO: int CHARACTER: int STRING: int ID: int DEFAULT: int IN_LINE_COMMENT: int IN_COMMENT: int PREPROCESSOR_OUTPUT: int tokenImage: String ,,,,,
PMD,net.sourceforge.pmd.cpd.cppast,CPPParserTokenManager,1,1,0,0,0,false,0 ,CPPParserConstants ,0 ,debugStream: java.io.PrintStream jjbitVec0: long jjnextStates: int jjstrLiteralImages: String lexStateNames: String jjnewLexState: int jjtoToken: long jjtoSkip: long jjtoMore: long input_stream: SimpleCharStream jjrounds: int jjstateSet: int curChar: char curLexState: int defaultLexState: int jjnewStateCnt: int jjround: int jjmatchedPos: int jjmatchedKind: int ,setDebugStream{ Params : java.io.PrintStream Returns : void} jjStopStringLiteralDfa_0{ Params : int,long,long,long Returns : int} jjStartNfa_0{ Params : int,long,long,long Returns : int} jjStopAtPos{ Params : int,int Returns : int} jjStartNfaWithStates_0{ Params : int,int,int Returns : int} jjMoveStringLiteralDfa0_0{ Params :  Returns : int} jjMoveStringLiteralDfa1_0{ Params : long,long,long Returns : int} jjMoveStringLiteralDfa2_0{ Params : long,long,long,long,long,long Returns : int} jjMoveStringLiteralDfa3_0{ Params : long,long,long,long,long,long Returns : int} jjMoveStringLiteralDfa4_0{ Params : long,long,long,long,long,long Returns : int} jjMoveStringLiteralDfa5_0{ Params : long,long,long,long Returns : int} jjMoveStringLiteralDfa6_0{ Params : long,long,long,long Returns : int} jjMoveStringLiteralDfa7_0{ Params : long,long,long,long Returns : int} jjMoveStringLiteralDfa8_0{ Params : long,long Returns : int} jjMoveStringLiteralDfa9_0{ Params : long,long Returns : int} jjCheckNAdd{ Params : int Returns : void} jjAddStates{ Params : int,int Returns : void} jjCheckNAddTwoStates{ Params : int,int Returns : void} jjCheckNAddStates{ Params : int,int Returns : void} jjCheckNAddStates{ Params : int Returns : void} jjMoveNfa_0{ Params : int,int Returns : int} jjMoveStringLiteralDfa0_1{ Params :  Returns : int} jjMoveStringLiteralDfa0_3{ Params :  Returns : int} jjMoveStringLiteralDfa0_2{ Params :  Returns : int} jjMoveStringLiteralDfa1_2{ Params : long Returns : int} ReInit{ Params : SimpleCharStream Returns : void} ReInitRounds{ Params :  Returns : void} ReInit{ Params : SimpleCharStream,int Returns : void} SwitchTo{ Params : int Returns : void} jjFillToken{ Params :  Returns : Token} getNextToken{ Params :  Returns : Token} ,,setDebugStream jjStopStringLiteralDfa_0 jjStartNfa_0 jjStopAtPos jjStartNfaWithStates_0 jjMoveStringLiteralDfa0_0 jjMoveStringLiteralDfa1_0 jjMoveStringLiteralDfa2_0 jjMoveStringLiteralDfa3_0 jjMoveStringLiteralDfa4_0 jjMoveStringLiteralDfa5_0 jjMoveStringLiteralDfa6_0 jjMoveStringLiteralDfa7_0 jjMoveStringLiteralDfa8_0 jjMoveStringLiteralDfa9_0 jjCheckNAdd jjAddStates jjCheckNAddTwoStates jjCheckNAddStates jjCheckNAddStates jjMoveNfa_0 jjMoveStringLiteralDfa0_1 jjMoveStringLiteralDfa0_3 jjMoveStringLiteralDfa0_2 jjMoveStringLiteralDfa1_2 ReInit ReInitRounds ReInit SwitchTo jjFillToken getNextToken ,,
PMD,net.sourceforge.pmd.cpd.cppast,Declaration,1,1,0,0,0,false,0 ,0 ,0 ,isClass: boolean isTypedef: boolean name: String scope: Scope ,,,,,
PMD,net.sourceforge.pmd.cpd.cppast,ParseException,1,1,0,0,0,false,RuntimeException ,0 ,0 ,specialConstructor: boolean currentToken: Token expectedTokenSequences: int tokenImage: String eol: String ,getMessage{ Params :  Returns : String} add_escapes{ Params : String Returns : String} ,,,,
PMD,net.sourceforge.pmd.cpd.cppast,Scope,1,1,0,0,0,false,0 ,0 ,0 ,scopeName: String type: boolean typeTable: Hashtable parent: Scope ,PutTypeName{ Params : String Returns : void} PutTypeName{ Params : String,Scope Returns : void} IsTypeName{ Params : String Returns : boolean} GetScope{ Params : String Returns : Scope} ,,,,
PMD,net.sourceforge.pmd.cpd.cppast,SimpleCharStream,1,1,0,0,0,false,0 ,0 ,0 ,staticFlag: boolean bufsize: int available: int tokenBegin: int bufpos: int bufline: int bufcolumn: int column: int line: int prevCharIsCR: boolean prevCharIsLF: boolean inputStream: java.io.Reader buffer: char maxNextCharInd: int inBuf: int ,ExpandBuff{ Params : boolean Returns : void} FillBuff{ Params :  Returns : void} BeginToken{ Params :  Returns : char} UpdateLineColumn{ Params : char Returns : void} readChar{ Params :  Returns : char} getColumn{ Params :  Returns : int} getLine{ Params :  Returns : int} getEndColumn{ Params :  Returns : int} getEndLine{ Params :  Returns : int} getBeginColumn{ Params :  Returns : int} getBeginLine{ Params :  Returns : int} backup{ Params : int Returns : void} ReInit{ Params : java.io.Reader,int,int,int Returns : void} ReInit{ Params : java.io.Reader,int,int Returns : void} ReInit{ Params : java.io.Reader Returns : void} ReInit{ Params : java.io.InputStream,int,int,int Returns : void} ReInit{ Params : java.io.InputStream Returns : void} ReInit{ Params : java.io.InputStream,int,int Returns : void} GetImage{ Params :  Returns : String} GetSuffix{ Params : int Returns : char[]} Done{ Params :  Returns : void} adjustBeginLineColumn{ Params : int,int Returns : void} ,,ExpandBuff FillBuff BeginToken UpdateLineColumn readChar getColumn getLine getEndColumn getEndLine getBeginColumn getBeginLine backup GetImage GetSuffix Done adjustBeginLineColumn ,,
PMD,net.sourceforge.pmd.cpd.cppast,SymtabManager,1,1,0,0,0,false,0 ,0 ,0 ,scopeTable: Hashtable scopeStack: Scope depth: int ,OpenScope{ Params : String,boolean Returns : Scope} OpenScope{ Params : Scope Returns : void} PutTypeName{ Params : String Returns : void} IsFullyScopedTypeName{ Params : String Returns : boolean} IsTypeName{ Params : String Returns : boolean} CloseScope{ Params :  Returns : void} IsCtor{ Params : String Returns : boolean} GetCurScope{ Params :  Returns : Scope} GetScope{ Params : String Returns : Scope} GetScopeOfFullyScopedName{ Params : String Returns : Scope} IsGlobalScope{ Params :  Returns : boolean} ,,OpenScope OpenScope PutTypeName IsFullyScopedTypeName IsTypeName CloseScope IsCtor GetCurScope GetScope GetScopeOfFullyScopedName IsGlobalScope ,,
PMD,net.sourceforge.pmd.cpd.cppast,Token,1,1,0,0,0,false,0 ,0 ,0 ,kind: int beginLine: int image: String next: Token specialToken: Token ,toString{ Params :  Returns : String} newToken{ Params : int Returns : Token} ,,newToken ,,
PMD,net.sourceforge.pmd.cpd.cppast,TokenMgrError,1,1,0,0,0,false,Error ,0 ,0 ,LEXICAL_ERROR: int STATIC_LEXER_ERROR: int INVALID_LEXICAL_STATE: int LOOP_DETECTED: int errorCode: int ,addEscapes{ Params : String Returns : String} LexicalError{ Params : boolean,int,int,int,String,char Returns : String} getMessage{ Params :  Returns : String} ,,addEscapes LexicalError ,,
PMD,net.sourceforge.pmd.cpd,CPPLanguage,1,1,0,0,0,false,0 ,Language ,CPPFileOrDirectoryFilter ,,accept{ Params : File,String Returns : boolean} getTokenizer{ Params :  Returns : Tokenizer} getFileFilter{ Params :  Returns : FilenameFilter} ,,,,
PMD,net.sourceforge.pmd.cpd,CPPFileOrDirectoryFilter,3,1,0,1,0,false,0 ,Language ,CPPFileOrDirectoryFilter ,,accept{ Params : File,String Returns : boolean} getTokenizer{ Params :  Returns : Tokenizer} getFileFilter{ Params :  Returns : FilenameFilter} ,,,,
PMD,net.sourceforge.pmd.cpd,CPPTokenizer,1,1,0,0,0,false,0 ,Tokenizer ,0 ,EOL: String initted: boolean ,tokenize{ Params : SourceCode,Tokens Returns : void} ,,,,
PMD,net.sourceforge.pmd.cpd,CSVRenderer,1,1,0,0,0,false,0 ,Renderer ,0 ,,render{ Params : Iterator Returns : String} ,,,,
PMD,net.sourceforge.pmd.cpd,FileFinder,1,1,0,0,0,false,0 ,0 ,0 ,filter: FilenameFilter FILE_SEP: String ,findFilesFrom{ Params : String,FilenameFilter,boolean Returns : List} scanDirectory{ Params : File,List,boolean Returns : void} ,,,,
PMD,net.sourceforge.pmd.cpd,FileReporter,1,1,0,0,0,false,0 ,0 ,0 ,reportFile: File ,report{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.cpd,GridBagHelper,1,1,0,0,0,false,0 ,0 ,0 ,gridbag: GridBagLayout container: Container c: GridBagConstraints x: int y: int labelAlignment: int weights: double ,add{ Params : Component Returns : void} add{ Params : Component,int Returns : void} nextRow{ Params :  Returns : void} addLabel{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.cpd,GUI,1,1,0,0,0,false,0 ,CPDListener ,CancelListener GoListener SaveListener BrowseListener ,rootDirectoryField: JTextField minimumLengthField: JTextField timeField: JTextField phaseLabel: JLabel tokenizingFilesBar: JProgressBar resultsTextArea: JTextArea recurseCheckbox: JCheckBox languageBox: JComboBox fcSave: JFileChooser frame: JFrame matches: List ,actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} run{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} error{ Params : String,Exception Returns : void} actionPerformed{ Params : ActionEvent Returns : void} makeSettingsPanel{ Params : JButton,JButton,JButton Returns : JPanel} makeProgressPanel{ Params :  Returns : JPanel} makeResultsPanel{ Params :  Returns : JPanel} go{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} munge{ Params : String Returns : String} phaseUpdate{ Params : int Returns : void} getPhaseText{ Params : int Returns : String} addedFile{ Params : int,File Returns : void} main{ Params : String[] Returns : void} ,,main ,,
PMD,net.sourceforge.pmd.cpd,CancelListener,3,2,0,1,0,false,0 ,CPDListener ,CancelListener GoListener SaveListener BrowseListener ,,actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} run{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} error{ Params : String,Exception Returns : void} actionPerformed{ Params : ActionEvent Returns : void} makeSettingsPanel{ Params : JButton,JButton,JButton Returns : JPanel} makeProgressPanel{ Params :  Returns : JPanel} makeResultsPanel{ Params :  Returns : JPanel} go{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} munge{ Params : String Returns : String} phaseUpdate{ Params : int Returns : void} getPhaseText{ Params : int Returns : String} addedFile{ Params : int,File Returns : void} main{ Params : String[] Returns : void} ,,main ,,
PMD,net.sourceforge.pmd.cpd,GoListener,3,2,0,0,0,false,0 ,CPDListener ,CancelListener GoListener SaveListener BrowseListener ,,actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} run{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} error{ Params : String,Exception Returns : void} actionPerformed{ Params : ActionEvent Returns : void} makeSettingsPanel{ Params : JButton,JButton,JButton Returns : JPanel} makeProgressPanel{ Params :  Returns : JPanel} makeResultsPanel{ Params :  Returns : JPanel} go{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} munge{ Params : String Returns : String} phaseUpdate{ Params : int Returns : void} getPhaseText{ Params : int Returns : String} addedFile{ Params : int,File Returns : void} main{ Params : String[] Returns : void} ,,main ,,
PMD,net.sourceforge.pmd.cpd,SaveListener,3,2,0,0,0,false,0 ,CPDListener ,CancelListener GoListener SaveListener BrowseListener ,,actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} run{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} error{ Params : String,Exception Returns : void} actionPerformed{ Params : ActionEvent Returns : void} makeSettingsPanel{ Params : JButton,JButton,JButton Returns : JPanel} makeProgressPanel{ Params :  Returns : JPanel} makeResultsPanel{ Params :  Returns : JPanel} go{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} munge{ Params : String Returns : String} phaseUpdate{ Params : int Returns : void} getPhaseText{ Params : int Returns : String} addedFile{ Params : int,File Returns : void} main{ Params : String[] Returns : void} ,,main ,,
PMD,net.sourceforge.pmd.cpd,BrowseListener,3,2,0,0,0,false,0 ,CPDListener ,CancelListener GoListener SaveListener BrowseListener ,,actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} run{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} error{ Params : String,Exception Returns : void} actionPerformed{ Params : ActionEvent Returns : void} makeSettingsPanel{ Params : JButton,JButton,JButton Returns : JPanel} makeProgressPanel{ Params :  Returns : JPanel} makeResultsPanel{ Params :  Returns : JPanel} go{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} munge{ Params : String Returns : String} phaseUpdate{ Params : int Returns : void} getPhaseText{ Params : int Returns : String} addedFile{ Params : int,File Returns : void} main{ Params : String[] Returns : void} ,,main ,,
PMD,net.sourceforge.pmd.cpd,JavaLanguage,1,1,0,0,0,false,0 ,Language ,JavaFileOrDirectoryFilter ,,accept{ Params : File,String Returns : boolean} getTokenizer{ Params :  Returns : Tokenizer} getFileFilter{ Params :  Returns : FilenameFilter} ,,,,
PMD,net.sourceforge.pmd.cpd,JavaFileOrDirectoryFilter,3,1,0,1,0,false,0 ,Language ,JavaFileOrDirectoryFilter ,,accept{ Params : File,String Returns : boolean} getTokenizer{ Params :  Returns : Tokenizer} getFileFilter{ Params :  Returns : FilenameFilter} ,,,,
PMD,net.sourceforge.pmd.cpd,JavaTokenizer,1,1,0,0,0,false,0 ,Tokenizer ,0 ,,tokenize{ Params : SourceCode,Tokens Returns : void} ,,,,
PMD,net.sourceforge.pmd.cpd,Language,2,1,0,0,0,true,0 ,Tokenizer ,0 ,,getTokenizer{ Params :  Returns : Tokenizer} getFileFilter{ Params :  Returns : FilenameFilter} ,,,,
PMD,net.sourceforge.pmd.cpd,LanguageFactory,1,1,0,0,0,false,0 ,0 ,0 ,JAVA_KEY: String CPP_KEY: String PHP_KEY: String ,createLanguage{ Params : String Returns : Language} ,,,,
PMD,net.sourceforge.pmd.cpd,Match,1,1,0,0,0,false,0 ,Comparable ,MatchCode ,tokenCount: int lineCount: int markSet: Set marks: TokenEntry code: String mc: MatchCode ,hashCode{ Params :  Returns : int} equals{ Params : Object Returns : boolean} setFirst{ Params : int Returns : void} setSecond{ Params : int Returns : void} getMarkCount{ Params :  Returns : int} setLineCount{ Params : int Returns : void} getLineCount{ Params :  Returns : int} getTokenCount{ Params :  Returns : int} getSourceCodeSlice{ Params :  Returns : String} setSourceCodeSlice{ Params : String Returns : void} iterator{ Params :  Returns : Iterator} compareTo{ Params : Object Returns : int} getFirstMark{ Params :  Returns : TokenEntry} getSecondMark{ Params :  Returns : TokenEntry} toString{ Params :  Returns : String} getMarkSet{ Params :  Returns : Set} getMatchCode{ Params :  Returns : MatchCode} getEndIndex{ Params :  Returns : int} setMarkSet{ Params : Set Returns : void} ,,,,
PMD,net.sourceforge.pmd.cpd,MatchCode,3,1,0,1,0,false,0 ,Comparable ,MatchCode ,first: int second: int ,hashCode{ Params :  Returns : int} equals{ Params : Object Returns : boolean} setFirst{ Params : int Returns : void} setSecond{ Params : int Returns : void} getMarkCount{ Params :  Returns : int} setLineCount{ Params : int Returns : void} getLineCount{ Params :  Returns : int} getTokenCount{ Params :  Returns : int} getSourceCodeSlice{ Params :  Returns : String} setSourceCodeSlice{ Params : String Returns : void} iterator{ Params :  Returns : Iterator} compareTo{ Params : Object Returns : int} getFirstMark{ Params :  Returns : TokenEntry} getSecondMark{ Params :  Returns : TokenEntry} toString{ Params :  Returns : String} getMarkSet{ Params :  Returns : Set} getMatchCode{ Params :  Returns : MatchCode} getEndIndex{ Params :  Returns : int} setMarkSet{ Params : Set Returns : void} ,,,,
PMD,net.sourceforge.pmd.cpd,MatchAlgorithm,1,1,0,0,0,false,0 ,0 ,0 ,MOD: int lastHash: int lastMod: int matches: List source: Map tokens: Tokens code: List cpdListener: CPDListener min: int ,setListener{ Params : CPDListener Returns : void} findMatches{ Params :  Returns : void} hash{ Params :  Returns : Map} matches{ Params :  Returns : Iterator} tokenAt{ Params : int,TokenEntry Returns : TokenEntry} ,,,,
PMD,net.sourceforge.pmd.cpd,MatchCollector,1,1,0,0,0,false,0 ,0 ,0 ,ma: MatchAlgorithm startMap: Map fileMap: Map ,collect{ Params : int,List Returns : void} getMatches{ Params :  Returns : List} determineMatch{ Params : TokenEntry,TokenEntry,int Returns : void} groupMatches{ Params : ArrayList Returns : void} hasPreviousDupe{ Params : TokenEntry,TokenEntry Returns : boolean} countDuplicateTokens{ Params : TokenEntry,TokenEntry Returns : int} matchEnded{ Params : TokenEntry,TokenEntry Returns : boolean} ,,,,
PMD,net.sourceforge.pmd.cpd,PHPLanguage,1,1,0,0,0,false,0 ,Language ,PHPFileOrDirectoryFilter ,,accept{ Params : File,String Returns : boolean} getTokenizer{ Params :  Returns : Tokenizer} getFileFilter{ Params :  Returns : FilenameFilter} ,,,,
PMD,net.sourceforge.pmd.cpd,PHPFileOrDirectoryFilter,3,1,0,1,0,false,0 ,Language ,PHPFileOrDirectoryFilter ,,accept{ Params : File,String Returns : boolean} getTokenizer{ Params :  Returns : Tokenizer} getFileFilter{ Params :  Returns : FilenameFilter} ,,,,
PMD,net.sourceforge.pmd.cpd,PHPTokenizer,1,1,0,0,0,false,0 ,Tokenizer ,0 ,,tokenize{ Params : SourceCode,Tokens Returns : void} ,,,,
PMD,net.sourceforge.pmd.cpd,Renderer,2,1,0,0,0,true,0 ,Tokenizer ,0 ,,render{ Params : Iterator Returns : String} ,,,,
PMD,net.sourceforge.pmd.cpd,ReportException,1,1,0,0,0,false,Exception ,0 ,0 ,cause: Throwable ,,,,,
PMD,net.sourceforge.pmd.cpd,SimpleRenderer,1,1,0,0,0,false,0 ,Renderer ,0 ,,render{ Params : Iterator Returns : String} ,,,,
PMD,net.sourceforge.pmd.cpd,SourceCode,1,1,0,0,0,false,0 ,0 ,0 ,fileName: String code: SoftReference ,getCode{ Params :  Returns : List} setCode{ Params : List Returns : void} getCodeBuffer{ Params :  Returns : StringBuffer} readSource{ Params : Reader Returns : void} getSlice{ Params : int,int Returns : String} getFileName{ Params :  Returns : String} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} ,,,,
PMD,net.sourceforge.pmd.cpd,TokenEntry,1,1,0,0,0,false,0 ,Comparable ,0 ,EOF: TokenEntry tokenSrcID: String beginLine: int index: int identifier: int hashCode: int Tokens: Map TokenCount: int ,getEOF{ Params :  Returns : TokenEntry} clearImages{ Params :  Returns : void} getTokenSrcID{ Params :  Returns : String} getBeginLine{ Params :  Returns : int} getIdentifier{ Params :  Returns : int} getIndex{ Params :  Returns : int} hashCode{ Params :  Returns : int} setHashCode{ Params : int Returns : void} equals{ Params : Object Returns : boolean} compareTo{ Params : Object Returns : int} ,,getEOF clearImages ,,
PMD,net.sourceforge.pmd.cpd,Tokenizer,2,1,0,0,0,true,0 ,Comparable ,0 ,,tokenize{ Params : SourceCode,Tokens Returns : void} ,,,,
PMD,net.sourceforge.pmd.cpd,Tokens,1,1,0,0,0,false,0 ,0 ,0 ,tokens: List ,add{ Params : TokenEntry Returns : void} iterator{ Params :  Returns : Iterator} get{ Params : int Returns : TokenEntry} size{ Params :  Returns : int} getLineCount{ Params : TokenEntry,Match Returns : int} getTokens{ Params :  Returns : List} ,,,,
PMD,net.sourceforge.pmd.cpd,XMLRenderer,1,1,0,0,0,false,0 ,Renderer ,0 ,,render{ Params : Iterator Returns : String} ,,,,
PMD,net.sourceforge.pmd,ExternalRuleID,1,1,0,0,0,false,0 ,0 ,0 ,filename: String ruleName: String ,getFilename{ Params :  Returns : String} getRuleName{ Params :  Returns : String} toString{ Params :  Returns : String} ,,,,
PMD,net.sourceforge.pmd.jaxen,Attribute,1,1,0,0,0,false,0 ,0 ,0 ,parent: Node name: String value: String ,getName{ Params :  Returns : String} getValue{ Params :  Returns : String} setName{ Params : String Returns : void} setValue{ Params : String Returns : void} getParent{ Params :  Returns : Node} setParent{ Params : Node Returns : void} toString{ Params :  Returns : String} ,,,,
PMD,net.sourceforge.pmd.jaxen,AttributeAxisIterator,1,1,0,0,0,false,0 ,Iterator ,0 ,EMPTY_OBJ_ARRAY: Object currObj: Object methods: Method position: int node: Node ,next{ Params :  Returns : Object} hasNext{ Params :  Returns : boolean} remove{ Params :  Returns : void} getNextAttribute{ Params :  Returns : Attribute} getAttribute{ Params : Node,Method Returns : Attribute} truncateMethodName{ Params : String Returns : String} isAttribute{ Params : Method Returns : boolean} ,,,,
PMD,net.sourceforge.pmd.jaxen,DocumentNavigator,1,1,0,0,0,false,DefaultNavigator ,0 ,0 ,EMPTY_ITERATOR: Iterator ,getAttributeName{ Params : Object Returns : String} getAttributeNamespaceUri{ Params : Object Returns : String} getAttributeQName{ Params : Object Returns : String} getAttributeStringValue{ Params : Object Returns : String} getCommentStringValue{ Params : Object Returns : String} getElementName{ Params : Object Returns : String} getElementNamespaceUri{ Params : Object Returns : String} getElementQName{ Params : Object Returns : String} getElementStringValue{ Params : Object Returns : String} getNamespacePrefix{ Params : Object Returns : String} getNamespaceStringValue{ Params : Object Returns : String} getTextStringValue{ Params : Object Returns : String} isAttribute{ Params : Object Returns : boolean} isComment{ Params : Object Returns : boolean} isDocument{ Params : Object Returns : boolean} isElement{ Params : Object Returns : boolean} isNamespace{ Params : Object Returns : boolean} isProcessingInstruction{ Params : Object Returns : boolean} isText{ Params : Object Returns : boolean} parseXPath{ Params : String Returns : XPath} getParentNode{ Params : Object Returns : Object} getAttributeAxisIterator{ Params : Object Returns : Iterator} getChildAxisIterator{ Params : Object Returns : Iterator} getFirstNode{ Params : Node Returns : Node} getNextNode{ Params : Node Returns : Node} getParentAxisIterator{ Params : Object Returns : Iterator} getFollowingSiblingAxisIterator{ Params : Object Returns : Iterator} getFirstNode{ Params : Node Returns : Node} getNextNode{ Params : Node Returns : Node} getPrecedingSiblingAxisIterator{ Params : Object Returns : Iterator} getFirstNode{ Params : Node Returns : Node} getNextNode{ Params : Node Returns : Node} getFollowingAxisIterator{ Params : Object Returns : Iterator} getFirstNode{ Params : Node Returns : Node} getNextNode{ Params : Node Returns : Node} getPrecedingAxisIterator{ Params : Object Returns : Iterator} getFirstNode{ Params : Node Returns : Node} getNextNode{ Params : Node Returns : Node} getDocumentNode{ Params : Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.jaxen,NodeIterator,1,1,1,0,0,false,0 ,Iterator ,0 ,node: Node ,hasNext{ Params :  Returns : boolean} next{ Params :  Returns : Object} remove{ Params :  Returns : void} getFirstNode{ Params : Node Returns : Node} getNextNode{ Params : Node Returns : Node} getPreviousSibling{ Params : Node Returns : Node} getPositionFromParent{ Params : Node Returns : int} getNextSibling{ Params : Node Returns : Node} getFirstChild{ Params : Node Returns : Node} getLastChild{ Params : Node Returns : Node} ,,,,getFirstNode getNextNode 
PMD,net.sourceforge.pmd,PMD,1,1,0,0,0,false,0 ,0 ,0 ,EOL: String targetJDKVersion: TargetJDKVersion ,processFile{ Params : Reader,RuleSet,RuleContext Returns : void} processFile{ Params : InputStream,String,RuleSet,RuleContext Returns : void} processFile{ Params : InputStream,RuleSet,RuleContext Returns : void} main{ Params : String[] Returns : void} glomName{ Params : boolean,String,File Returns : String} trimAnyPathSep{ Params : String Returns : String} collectFilesFromOneName{ Params : String Returns : List} collectFromCommaDelimitedString{ Params : String Returns : List} collect{ Params : String Returns : List} ,,main glomName trimAnyPathSep collectFilesFromOneName collectFromCommaDelimitedString collect ,,
PMD,net.sourceforge.pmd,PMDException,1,1,0,0,0,false,Exception ,0 ,0 ,reason: Exception severity: int ,printStackTrace{ Params :  Returns : void} printStackTrace{ Params : PrintStream Returns : void} printStackTrace{ Params : PrintWriter Returns : void} getReason{ Params :  Returns : Exception} setSeverity{ Params : int Returns : void} getSeverity{ Params :  Returns : int} ,,,,
PMD,net.sourceforge.pmd.quickfix,Fix,2,1,0,0,0,true,Exception ,0 ,0 ,,fix{ Params : String,int Returns : String} getLabel{ Params :  Returns : String} ,,,,
PMD,net.sourceforge.pmd.renderers,CSVRenderer,1,1,0,0,0,false,0 ,Renderer ,0 ,,render{ Params : Report Returns : String} quote{ Params : String Returns : String} quoteAndCommify{ Params : String Returns : String} ,,,,
PMD,net.sourceforge.pmd.renderers,EmacsRenderer,1,1,0,0,0,false,0 ,Renderer ,0 ,EOL: String ,render{ Params : Report Returns : String} ,,,,
PMD,net.sourceforge.pmd.renderers,HTMLRenderer,1,1,0,0,0,false,0 ,Renderer ,0 ,,render{ Params : Report Returns : String} renderBody{ Params : Report Returns : String} ,,,,
PMD,net.sourceforge.pmd.renderers,IDEAJRenderer,1,1,0,0,0,false,0 ,Renderer ,SourcePath ,args: String ,clipPath{ Params : String Returns : String} render{ Params : Report Returns : String} render{ Params : Report,String Returns : String} render{ Params : Report,String,String Returns : String} getFullyQualifiedClassName{ Params : String,SourcePath Returns : String} getSimpleFileName{ Params : String Returns : String} ,,,,
PMD,net.sourceforge.pmd.renderers,SourcePath,3,2,0,1,0,false,0 ,Renderer ,SourcePath ,paths: Set ,clipPath{ Params : String Returns : String} render{ Params : Report Returns : String} render{ Params : Report,String Returns : String} render{ Params : Report,String,String Returns : String} getFullyQualifiedClassName{ Params : String,SourcePath Returns : String} getSimpleFileName{ Params : String Returns : String} ,,,,
PMD,net.sourceforge.pmd.renderers,PapariTextRenderer,1,1,0,0,0,false,0 ,Renderer ,0 ,pwd: String yellowBold: String whiteBold: String redBold: String cyan: String green: String colorReset: String ,initColors{ Params :  Returns : void} render{ Params : Report Returns : String} getLine{ Params : String,int Returns : String} getRelativePath{ Params : String Returns : String} ,,,,
PMD,net.sourceforge.pmd.renderers,Renderer,2,1,0,0,0,true,0 ,Renderer ,0 ,,render{ Params : Report Returns : String} ,,,,
PMD,net.sourceforge.pmd.renderers,SummaryHTMLRenderer,1,1,0,0,0,false,0 ,Renderer ,0 ,,render{ Params : Report Returns : String} renderSummary{ Params : Report Returns : String} ,,,,
PMD,net.sourceforge.pmd.renderers,TextPadRenderer,1,1,0,0,0,false,0 ,Renderer ,0 ,,render{ Params : Report Returns : String} ,,,,
PMD,net.sourceforge.pmd.renderers,TextRenderer,1,1,0,0,0,false,0 ,Renderer ,0 ,,render{ Params : Report Returns : String} ,,,,
PMD,net.sourceforge.pmd.renderers,VBHTMLRenderer,1,1,0,0,0,false,0 ,Renderer ,0 ,,render{ Params : Report Returns : String} header{ Params :  Returns : String} footer{ Params :  Returns : String} ,,,,
PMD,net.sourceforge.pmd.renderers,XMLRenderer,1,1,0,0,0,false,0 ,Renderer ,0 ,,render{ Params : Report Returns : String} ,,,,
PMD,net.sourceforge.pmd,Report,1,1,0,0,0,false,0 ,0 ,ProcessingError ,violations: Set metrics: Set listeners: List errors: List ,getMsg{ Params :  Returns : String} getFile{ Params :  Returns : String} getSummary{ Params :  Returns : Map} addListener{ Params : ReportListener Returns : void} addRuleViolation{ Params : RuleViolation Returns : void} addMetric{ Params : Metric Returns : void} addError{ Params : ProcessingError Returns : void} hasMetrics{ Params :  Returns : boolean} metrics{ Params :  Returns : Iterator} isEmpty{ Params :  Returns : boolean} iterator{ Params :  Returns : Iterator} errors{ Params :  Returns : Iterator} size{ Params :  Returns : int} ,,,,
PMD,net.sourceforge.pmd,ProcessingError,3,1,0,1,0,false,0 ,0 ,ProcessingError ,msg: String file: String ,getMsg{ Params :  Returns : String} getFile{ Params :  Returns : String} getSummary{ Params :  Returns : Map} addListener{ Params : ReportListener Returns : void} addRuleViolation{ Params : RuleViolation Returns : void} addMetric{ Params : Metric Returns : void} addError{ Params : ProcessingError Returns : void} hasMetrics{ Params :  Returns : boolean} metrics{ Params :  Returns : Iterator} isEmpty{ Params :  Returns : boolean} iterator{ Params :  Returns : Iterator} errors{ Params :  Returns : Iterator} size{ Params :  Returns : int} ,,,,
PMD,net.sourceforge.pmd,ReportListener,2,1,0,0,0,true,0 ,0 ,0 ,,ruleViolationAdded{ Params : RuleViolation Returns : void} metricAdded{ Params : Metric Returns : void} ,,,,
PMD,net.sourceforge.pmd,Rule,2,1,0,0,0,true,0 ,0 ,0 ,LOWEST_PRIORITY: int PRIORITIES: String ,getName{ Params :  Returns : String} getMessage{ Params :  Returns : String} getDescription{ Params :  Returns : String} getExample{ Params :  Returns : String} setName{ Params : String Returns : void} setMessage{ Params : String Returns : void} setDescription{ Params : String Returns : void} setExample{ Params : String Returns : void} apply{ Params : List,RuleContext Returns : void} hasProperty{ Params : String Returns : boolean} addProperty{ Params : String,String Returns : void} getIntProperty{ Params : String Returns : int} getBooleanProperty{ Params : String Returns : boolean} getStringProperty{ Params : String Returns : String} getDoubleProperty{ Params : String Returns : double} getProperties{ Params :  Returns : Properties} include{ Params :  Returns : boolean} setInclude{ Params : boolean Returns : void} getPriority{ Params :  Returns : int} getPriorityName{ Params :  Returns : String} setPriority{ Params : int Returns : void} ,,,,
PMD,net.sourceforge.pmd,RuleContext,1,1,0,0,0,false,0 ,0 ,0 ,report: Report sourceCodeFilename: String ,getReport{ Params :  Returns : Report} setReport{ Params : Report Returns : void} getSourceCodeFilename{ Params :  Returns : String} setSourceCodeFilename{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd.rules,AccessorClassGenerationRule,1,1,0,0,0,false,AbstractRule ,0 ,ClassData AllocData ,classID: int classDataList: List packageName: String ,getCurrentClassData{ Params :  Returns : ClassData} setClassID{ Params : int Returns : void} getClassID{ Params :  Returns : int} getPackageName{ Params :  Returns : String} stripString{ Params : String,String Returns : String} addInstantiation{ Params : AllocData Returns : void} getInstantiationIterator{ Params :  Returns : Iterator} addConstructor{ Params : ASTConstructorDeclaration Returns : void} getPrivateConstructorIterator{ Params :  Returns : Iterator} getClassName{ Params :  Returns : String} addClassQualifyingName{ Params : String Returns : void} getClassQualifyingNames{ Params :  Returns : Iterator} getClassQualifyingNamesList{ Params :  Returns : List} getName{ Params :  Returns : String} getArgumentCount{ Params :  Returns : int} show{ Params :  Returns : void} getASTAllocationExpression{ Params :  Returns : ASTAllocationExpression} isArray{ Params :  Returns : boolean} visit{ Params : ASTCompilationUnit,Object Returns : Object} processRule{ Params : RuleContext Returns : void} visit{ Params : ASTPackageDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTAllocationExpression,Object Returns : Object} ,,stripString ,,
PMD,net.sourceforge.pmd.rules,ClassData,3,2,0,0,0,false,AbstractRule ,0 ,ClassData AllocData ,m_ClassName: String m_PrivateConstructors: List m_Instantiations: List m_ClassQualifyingNames: List ,getCurrentClassData{ Params :  Returns : ClassData} setClassID{ Params : int Returns : void} getClassID{ Params :  Returns : int} getPackageName{ Params :  Returns : String} stripString{ Params : String,String Returns : String} addInstantiation{ Params : AllocData Returns : void} getInstantiationIterator{ Params :  Returns : Iterator} addConstructor{ Params : ASTConstructorDeclaration Returns : void} getPrivateConstructorIterator{ Params :  Returns : Iterator} getClassName{ Params :  Returns : String} addClassQualifyingName{ Params : String Returns : void} getClassQualifyingNames{ Params :  Returns : Iterator} getClassQualifyingNamesList{ Params :  Returns : List} getName{ Params :  Returns : String} getArgumentCount{ Params :  Returns : int} show{ Params :  Returns : void} getASTAllocationExpression{ Params :  Returns : ASTAllocationExpression} isArray{ Params :  Returns : boolean} visit{ Params : ASTCompilationUnit,Object Returns : Object} processRule{ Params : RuleContext Returns : void} visit{ Params : ASTPackageDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTAllocationExpression,Object Returns : Object} ,,stripString ,,
PMD,net.sourceforge.pmd.rules,AllocData,3,2,0,1,0,false,AbstractRule ,0 ,ClassData AllocData ,m_Name: String m_ArgumentCount: int m_ASTAllocationExpression: ASTAllocationExpression isArray: boolean ,getCurrentClassData{ Params :  Returns : ClassData} setClassID{ Params : int Returns : void} getClassID{ Params :  Returns : int} getPackageName{ Params :  Returns : String} stripString{ Params : String,String Returns : String} addInstantiation{ Params : AllocData Returns : void} getInstantiationIterator{ Params :  Returns : Iterator} addConstructor{ Params : ASTConstructorDeclaration Returns : void} getPrivateConstructorIterator{ Params :  Returns : Iterator} getClassName{ Params :  Returns : String} addClassQualifyingName{ Params : String Returns : void} getClassQualifyingNames{ Params :  Returns : Iterator} getClassQualifyingNamesList{ Params :  Returns : List} getName{ Params :  Returns : String} getArgumentCount{ Params :  Returns : int} show{ Params :  Returns : void} getASTAllocationExpression{ Params :  Returns : ASTAllocationExpression} isArray{ Params :  Returns : boolean} visit{ Params : ASTCompilationUnit,Object Returns : Object} processRule{ Params : RuleContext Returns : void} visit{ Params : ASTPackageDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTAllocationExpression,Object Returns : Object} ,,stripString ,,
PMD,net.sourceforge.pmd.rules,AtLeastOneConstructorRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,AvoidDeeplyNestedIfStmtsRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,depth: int ,visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTIfStatement,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,AvoidDuplicateLiteralsRule,1,1,0,0,0,false,AbstractRule ,0 ,ExceptionParser ,DEFAULT_SEPARATOR: char EXCEPTION_LIST_PROPERTY: String SEPARATOR_PROPERTY: String EXCEPTION_FILE_NAME_PROPERTY: String literals: Map exceptions: Set ,parse{ Params : String Returns : Set} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTLiteral,Object Returns : Object} fourthParentIsAVariableInitializer{ Params : ASTLiteral Returns : boolean} fourthParentIsAnArgList{ Params : ASTLiteral Returns : boolean} hasAtLeast4Parents{ Params : Node Returns : boolean} ,,,,
PMD,net.sourceforge.pmd.rules,ExceptionParser,3,1,0,1,0,false,AbstractRule ,0 ,ExceptionParser ,ESCAPE_CHAR: char delimiter: char ,parse{ Params : String Returns : Set} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTLiteral,Object Returns : Object} fourthParentIsAVariableInitializer{ Params : ASTLiteral Returns : boolean} fourthParentIsAnArgList{ Params : ASTLiteral Returns : boolean} hasAtLeast4Parents{ Params : Node Returns : boolean} ,,,,
PMD,net.sourceforge.pmd.rules,AvoidReassigningParametersRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTMethodDeclarator,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,BeanMembersShouldSerializeRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,ClassNamingConventionsRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,CloseConnectionRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTMethodDeclaration,Object Returns : Object} ensureClosed{ Params : ASTLocalVariableDeclaration,ASTVariableDeclaratorId,Object Returns : void} ,,,,
PMD,net.sourceforge.pmd.rules,ConstructorCallsOverridableMethodRule,1,1,0,0,1,false,net.sourceforge.pmd.AbstractRule ,0 ,MethodInvocation ConstructorInvocation MethodHolder ConstructorHolder EvalPackage NullEvalPackage ,nullEvalPackage: NullEvalPackage evalPackages: List ,isSuper{ Params :  Returns : boolean} getName{ Params :  Returns : String} getArgumentCount{ Params :  Returns : int} getReferenceNames{ Params :  Returns : List} getQualifierNames{ Params :  Returns : List} getASTPrimaryExpression{ Params :  Returns : ASTPrimaryExpression} getMethod{ Params : ASTPrimaryExpression Returns : MethodInvocation} show{ Params :  Returns : void} getASTExplicitConstructorInvocation{ Params :  Returns : ASTExplicitConstructorInvocation} getArgumentCount{ Params :  Returns : int} getName{ Params :  Returns : String} getASTMethodDeclarator{ Params :  Returns : ASTMethodDeclarator} isDangerous{ Params :  Returns : boolean} setDangerous{ Params : boolean Returns : void} getASTConstructorDeclaration{ Params :  Returns : ASTConstructorDeclaration} getCalledConstructor{ Params :  Returns : ConstructorInvocation} getASTExplicitConstructorInvocation{ Params :  Returns : ASTExplicitConstructorInvocation} initCI{ Params :  Returns : void} isDangerous{ Params :  Returns : boolean} setDangerous{ Params : boolean Returns : void} getCurrentEvalPackage{ Params :  Returns : EvalPackage} putEvalPackage{ Params : EvalPackage Returns : void} removeCurrentEvalPackage{ Params :  Returns : void} clearEvalPackages{ Params :  Returns : void} visitClassDec{ Params : AccessNode,Object Returns : Object} evaluateDangerOfMethods{ Params : Map Returns : boolean} evaluateDangerOfConstructors1{ Params : Map,Set Returns : void} evaluateDangerOfConstructors2{ Params : Map Returns : boolean} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} addCalledMethodsOfNode{ Params : AccessNode,List,String Returns : void} addCalledMethodsOfNode{ Params : SimpleNode,List,String Returns : void} addCalledMethodsOfNodeImpl{ Params : List,List,String Returns : void} findMethod{ Params : ASTPrimaryExpression,String Returns : MethodInvocation} getNameFromPrefix{ Params : ASTPrimaryPrefix Returns : String} getNameFromSuffix{ Params : ASTPrimarySuffix Returns : String} ,,getMethod addCalledMethodsOfNode addCalledMethodsOfNode addCalledMethodsOfNodeImpl findMethod getNameFromPrefix getNameFromSuffix ,,
PMD,net.sourceforge.pmd.rules,MethodInvocation,3,2,0,1,0,false,net.sourceforge.pmd.AbstractRule ,0 ,MethodInvocation ConstructorInvocation MethodHolder ConstructorHolder EvalPackage NullEvalPackage ,m_Name: String m_Ape: ASTPrimaryExpression m_ReferenceNames: List m_QualifierNames: List m_ArgumentSize: int m_Super: boolean ,isSuper{ Params :  Returns : boolean} getName{ Params :  Returns : String} getArgumentCount{ Params :  Returns : int} getReferenceNames{ Params :  Returns : List} getQualifierNames{ Params :  Returns : List} getASTPrimaryExpression{ Params :  Returns : ASTPrimaryExpression} getMethod{ Params : ASTPrimaryExpression Returns : MethodInvocation} show{ Params :  Returns : void} getASTExplicitConstructorInvocation{ Params :  Returns : ASTExplicitConstructorInvocation} getArgumentCount{ Params :  Returns : int} getName{ Params :  Returns : String} getASTMethodDeclarator{ Params :  Returns : ASTMethodDeclarator} isDangerous{ Params :  Returns : boolean} setDangerous{ Params : boolean Returns : void} getASTConstructorDeclaration{ Params :  Returns : ASTConstructorDeclaration} getCalledConstructor{ Params :  Returns : ConstructorInvocation} getASTExplicitConstructorInvocation{ Params :  Returns : ASTExplicitConstructorInvocation} initCI{ Params :  Returns : void} isDangerous{ Params :  Returns : boolean} setDangerous{ Params : boolean Returns : void} getCurrentEvalPackage{ Params :  Returns : EvalPackage} putEvalPackage{ Params : EvalPackage Returns : void} removeCurrentEvalPackage{ Params :  Returns : void} clearEvalPackages{ Params :  Returns : void} visitClassDec{ Params : AccessNode,Object Returns : Object} evaluateDangerOfMethods{ Params : Map Returns : boolean} evaluateDangerOfConstructors1{ Params : Map,Set Returns : void} evaluateDangerOfConstructors2{ Params : Map Returns : boolean} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} addCalledMethodsOfNode{ Params : AccessNode,List,String Returns : void} addCalledMethodsOfNode{ Params : SimpleNode,List,String Returns : void} addCalledMethodsOfNodeImpl{ Params : List,List,String Returns : void} findMethod{ Params : ASTPrimaryExpression,String Returns : MethodInvocation} getNameFromPrefix{ Params : ASTPrimaryPrefix Returns : String} getNameFromSuffix{ Params : ASTPrimarySuffix Returns : String} ,,getMethod addCalledMethodsOfNode addCalledMethodsOfNode addCalledMethodsOfNodeImpl findMethod getNameFromPrefix getNameFromSuffix ,,
PMD,net.sourceforge.pmd.rules,ConstructorInvocation,3,2,0,0,1,false,net.sourceforge.pmd.AbstractRule ,0 ,MethodInvocation ConstructorInvocation MethodHolder ConstructorHolder EvalPackage NullEvalPackage ,m_Eci: ASTExplicitConstructorInvocation name: String count: int ,isSuper{ Params :  Returns : boolean} getName{ Params :  Returns : String} getArgumentCount{ Params :  Returns : int} getReferenceNames{ Params :  Returns : List} getQualifierNames{ Params :  Returns : List} getASTPrimaryExpression{ Params :  Returns : ASTPrimaryExpression} getMethod{ Params : ASTPrimaryExpression Returns : MethodInvocation} show{ Params :  Returns : void} getASTExplicitConstructorInvocation{ Params :  Returns : ASTExplicitConstructorInvocation} getArgumentCount{ Params :  Returns : int} getName{ Params :  Returns : String} getASTMethodDeclarator{ Params :  Returns : ASTMethodDeclarator} isDangerous{ Params :  Returns : boolean} setDangerous{ Params : boolean Returns : void} getASTConstructorDeclaration{ Params :  Returns : ASTConstructorDeclaration} getCalledConstructor{ Params :  Returns : ConstructorInvocation} getASTExplicitConstructorInvocation{ Params :  Returns : ASTExplicitConstructorInvocation} initCI{ Params :  Returns : void} isDangerous{ Params :  Returns : boolean} setDangerous{ Params : boolean Returns : void} getCurrentEvalPackage{ Params :  Returns : EvalPackage} putEvalPackage{ Params : EvalPackage Returns : void} removeCurrentEvalPackage{ Params :  Returns : void} clearEvalPackages{ Params :  Returns : void} visitClassDec{ Params : AccessNode,Object Returns : Object} evaluateDangerOfMethods{ Params : Map Returns : boolean} evaluateDangerOfConstructors1{ Params : Map,Set Returns : void} evaluateDangerOfConstructors2{ Params : Map Returns : boolean} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} addCalledMethodsOfNode{ Params : AccessNode,List,String Returns : void} addCalledMethodsOfNode{ Params : SimpleNode,List,String Returns : void} addCalledMethodsOfNodeImpl{ Params : List,List,String Returns : void} findMethod{ Params : ASTPrimaryExpression,String Returns : MethodInvocation} getNameFromPrefix{ Params : ASTPrimaryPrefix Returns : String} getNameFromSuffix{ Params : ASTPrimarySuffix Returns : String} ,,getMethod addCalledMethodsOfNode addCalledMethodsOfNode addCalledMethodsOfNodeImpl findMethod getNameFromPrefix getNameFromSuffix ,,
PMD,net.sourceforge.pmd.rules,MethodHolder,3,2,0,0,1,false,net.sourceforge.pmd.AbstractRule ,0 ,MethodInvocation ConstructorInvocation MethodHolder ConstructorHolder EvalPackage NullEvalPackage ,m_Amd: ASTMethodDeclarator m_Dangerous: boolean ,isSuper{ Params :  Returns : boolean} getName{ Params :  Returns : String} getArgumentCount{ Params :  Returns : int} getReferenceNames{ Params :  Returns : List} getQualifierNames{ Params :  Returns : List} getASTPrimaryExpression{ Params :  Returns : ASTPrimaryExpression} getMethod{ Params : ASTPrimaryExpression Returns : MethodInvocation} show{ Params :  Returns : void} getASTExplicitConstructorInvocation{ Params :  Returns : ASTExplicitConstructorInvocation} getArgumentCount{ Params :  Returns : int} getName{ Params :  Returns : String} getASTMethodDeclarator{ Params :  Returns : ASTMethodDeclarator} isDangerous{ Params :  Returns : boolean} setDangerous{ Params : boolean Returns : void} getASTConstructorDeclaration{ Params :  Returns : ASTConstructorDeclaration} getCalledConstructor{ Params :  Returns : ConstructorInvocation} getASTExplicitConstructorInvocation{ Params :  Returns : ASTExplicitConstructorInvocation} initCI{ Params :  Returns : void} isDangerous{ Params :  Returns : boolean} setDangerous{ Params : boolean Returns : void} getCurrentEvalPackage{ Params :  Returns : EvalPackage} putEvalPackage{ Params : EvalPackage Returns : void} removeCurrentEvalPackage{ Params :  Returns : void} clearEvalPackages{ Params :  Returns : void} visitClassDec{ Params : AccessNode,Object Returns : Object} evaluateDangerOfMethods{ Params : Map Returns : boolean} evaluateDangerOfConstructors1{ Params : Map,Set Returns : void} evaluateDangerOfConstructors2{ Params : Map Returns : boolean} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} addCalledMethodsOfNode{ Params : AccessNode,List,String Returns : void} addCalledMethodsOfNode{ Params : SimpleNode,List,String Returns : void} addCalledMethodsOfNodeImpl{ Params : List,List,String Returns : void} findMethod{ Params : ASTPrimaryExpression,String Returns : MethodInvocation} getNameFromPrefix{ Params : ASTPrimaryPrefix Returns : String} getNameFromSuffix{ Params : ASTPrimarySuffix Returns : String} ,,getMethod addCalledMethodsOfNode addCalledMethodsOfNode addCalledMethodsOfNodeImpl findMethod getNameFromPrefix getNameFromSuffix ,,
PMD,net.sourceforge.pmd.rules,ConstructorHolder,3,2,0,0,1,false,net.sourceforge.pmd.AbstractRule ,0 ,MethodInvocation ConstructorInvocation MethodHolder ConstructorHolder EvalPackage NullEvalPackage ,m_Cd: ASTConstructorDeclaration m_Dangerous: boolean m_Ci: ConstructorInvocation m_CiInitialized: boolean ,isSuper{ Params :  Returns : boolean} getName{ Params :  Returns : String} getArgumentCount{ Params :  Returns : int} getReferenceNames{ Params :  Returns : List} getQualifierNames{ Params :  Returns : List} getASTPrimaryExpression{ Params :  Returns : ASTPrimaryExpression} getMethod{ Params : ASTPrimaryExpression Returns : MethodInvocation} show{ Params :  Returns : void} getASTExplicitConstructorInvocation{ Params :  Returns : ASTExplicitConstructorInvocation} getArgumentCount{ Params :  Returns : int} getName{ Params :  Returns : String} getASTMethodDeclarator{ Params :  Returns : ASTMethodDeclarator} isDangerous{ Params :  Returns : boolean} setDangerous{ Params : boolean Returns : void} getASTConstructorDeclaration{ Params :  Returns : ASTConstructorDeclaration} getCalledConstructor{ Params :  Returns : ConstructorInvocation} getASTExplicitConstructorInvocation{ Params :  Returns : ASTExplicitConstructorInvocation} initCI{ Params :  Returns : void} isDangerous{ Params :  Returns : boolean} setDangerous{ Params : boolean Returns : void} getCurrentEvalPackage{ Params :  Returns : EvalPackage} putEvalPackage{ Params : EvalPackage Returns : void} removeCurrentEvalPackage{ Params :  Returns : void} clearEvalPackages{ Params :  Returns : void} visitClassDec{ Params : AccessNode,Object Returns : Object} evaluateDangerOfMethods{ Params : Map Returns : boolean} evaluateDangerOfConstructors1{ Params : Map,Set Returns : void} evaluateDangerOfConstructors2{ Params : Map Returns : boolean} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} addCalledMethodsOfNode{ Params : AccessNode,List,String Returns : void} addCalledMethodsOfNode{ Params : SimpleNode,List,String Returns : void} addCalledMethodsOfNodeImpl{ Params : List,List,String Returns : void} findMethod{ Params : ASTPrimaryExpression,String Returns : MethodInvocation} getNameFromPrefix{ Params : ASTPrimaryPrefix Returns : String} getNameFromSuffix{ Params : ASTPrimarySuffix Returns : String} ,,getMethod addCalledMethodsOfNode addCalledMethodsOfNode addCalledMethodsOfNodeImpl findMethod getNameFromPrefix getNameFromSuffix ,,
PMD,net.sourceforge.pmd.rules,EvalPackage,3,2,0,1,0,false,net.sourceforge.pmd.AbstractRule ,0 ,MethodInvocation ConstructorInvocation MethodHolder ConstructorHolder EvalPackage NullEvalPackage ,m_ClassName: String calledMethods: List allMethodsOfClass: Map calledConstructors: List allPrivateConstructorsOfClass: Map ,isSuper{ Params :  Returns : boolean} getName{ Params :  Returns : String} getArgumentCount{ Params :  Returns : int} getReferenceNames{ Params :  Returns : List} getQualifierNames{ Params :  Returns : List} getASTPrimaryExpression{ Params :  Returns : ASTPrimaryExpression} getMethod{ Params : ASTPrimaryExpression Returns : MethodInvocation} show{ Params :  Returns : void} getASTExplicitConstructorInvocation{ Params :  Returns : ASTExplicitConstructorInvocation} getArgumentCount{ Params :  Returns : int} getName{ Params :  Returns : String} getASTMethodDeclarator{ Params :  Returns : ASTMethodDeclarator} isDangerous{ Params :  Returns : boolean} setDangerous{ Params : boolean Returns : void} getASTConstructorDeclaration{ Params :  Returns : ASTConstructorDeclaration} getCalledConstructor{ Params :  Returns : ConstructorInvocation} getASTExplicitConstructorInvocation{ Params :  Returns : ASTExplicitConstructorInvocation} initCI{ Params :  Returns : void} isDangerous{ Params :  Returns : boolean} setDangerous{ Params : boolean Returns : void} getCurrentEvalPackage{ Params :  Returns : EvalPackage} putEvalPackage{ Params : EvalPackage Returns : void} removeCurrentEvalPackage{ Params :  Returns : void} clearEvalPackages{ Params :  Returns : void} visitClassDec{ Params : AccessNode,Object Returns : Object} evaluateDangerOfMethods{ Params : Map Returns : boolean} evaluateDangerOfConstructors1{ Params : Map,Set Returns : void} evaluateDangerOfConstructors2{ Params : Map Returns : boolean} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} addCalledMethodsOfNode{ Params : AccessNode,List,String Returns : void} addCalledMethodsOfNode{ Params : SimpleNode,List,String Returns : void} addCalledMethodsOfNodeImpl{ Params : List,List,String Returns : void} findMethod{ Params : ASTPrimaryExpression,String Returns : MethodInvocation} getNameFromPrefix{ Params : ASTPrimaryPrefix Returns : String} getNameFromSuffix{ Params : ASTPrimarySuffix Returns : String} ,,getMethod addCalledMethodsOfNode addCalledMethodsOfNode addCalledMethodsOfNodeImpl findMethod getNameFromPrefix getNameFromSuffix ,,
PMD,net.sourceforge.pmd.rules,NullEvalPackage,3,2,0,1,1,false,net.sourceforge.pmd.AbstractRule ,0 ,MethodInvocation ConstructorInvocation MethodHolder ConstructorHolder EvalPackage NullEvalPackage ,,isSuper{ Params :  Returns : boolean} getName{ Params :  Returns : String} getArgumentCount{ Params :  Returns : int} getReferenceNames{ Params :  Returns : List} getQualifierNames{ Params :  Returns : List} getASTPrimaryExpression{ Params :  Returns : ASTPrimaryExpression} getMethod{ Params : ASTPrimaryExpression Returns : MethodInvocation} show{ Params :  Returns : void} getASTExplicitConstructorInvocation{ Params :  Returns : ASTExplicitConstructorInvocation} getArgumentCount{ Params :  Returns : int} getName{ Params :  Returns : String} getASTMethodDeclarator{ Params :  Returns : ASTMethodDeclarator} isDangerous{ Params :  Returns : boolean} setDangerous{ Params : boolean Returns : void} getASTConstructorDeclaration{ Params :  Returns : ASTConstructorDeclaration} getCalledConstructor{ Params :  Returns : ConstructorInvocation} getASTExplicitConstructorInvocation{ Params :  Returns : ASTExplicitConstructorInvocation} initCI{ Params :  Returns : void} isDangerous{ Params :  Returns : boolean} setDangerous{ Params : boolean Returns : void} getCurrentEvalPackage{ Params :  Returns : EvalPackage} putEvalPackage{ Params : EvalPackage Returns : void} removeCurrentEvalPackage{ Params :  Returns : void} clearEvalPackages{ Params :  Returns : void} visitClassDec{ Params : AccessNode,Object Returns : Object} evaluateDangerOfMethods{ Params : Map Returns : boolean} evaluateDangerOfConstructors1{ Params : Map,Set Returns : void} evaluateDangerOfConstructors2{ Params : Map Returns : boolean} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} addCalledMethodsOfNode{ Params : AccessNode,List,String Returns : void} addCalledMethodsOfNode{ Params : SimpleNode,List,String Returns : void} addCalledMethodsOfNodeImpl{ Params : List,List,String Returns : void} findMethod{ Params : ASTPrimaryExpression,String Returns : MethodInvocation} getNameFromPrefix{ Params : ASTPrimaryPrefix Returns : String} getNameFromSuffix{ Params : ASTPrimarySuffix Returns : String} ,,getMethod addCalledMethodsOfNode addCalledMethodsOfNode addCalledMethodsOfNodeImpl findMethod getNameFromPrefix getNameFromSuffix ,,
PMD,net.sourceforge.pmd.rules,CouplingBetweenObjectsRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,className: String couplingCount: int typesFoundSoFar: Set ,visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTResultType,Object Returns : Object} visit{ Params : ASTLocalVariableDeclaration,Object Returns : Object} visit{ Params : ASTFormalParameter,Object Returns : Object} visit{ Params : ASTFieldDeclaration,Object Returns : Object} handleASTTypeChildren{ Params : SimpleNode Returns : void} checkVariableType{ Params : String Returns : void} filterTypes{ Params : String Returns : boolean} filterPrimativesAndWrappers{ Params : String Returns : boolean} ,,,,
PMD,net.sourceforge.pmd.rules,CyclomaticComplexityRule,1,1,0,0,0,false,AbstractRule ,0 ,Entry ,m_entryStack: Stack ,visit{ Params : ASTIfStatement,Object Returns : Object} visit{ Params : ASTForStatement,Object Returns : Object} visit{ Params : ASTSwitchStatement,Object Returns : Object} visit{ Params : ASTWhileStatement,Object Returns : Object} visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,Entry,3,2,0,0,0,false,AbstractRule ,0 ,Entry ,m_node: SimpleNode m_decisionPoints: int m_highestDecisionPoints: int m_methodCount: int ,visit{ Params : ASTIfStatement,Object Returns : Object} visit{ Params : ASTForStatement,Object Returns : Object} visit{ Params : ASTSwitchStatement,Object Returns : Object} visit{ Params : ASTWhileStatement,Object Returns : Object} visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules.design,ExceptionAsFlowControlRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTThrowStatement,Object Returns : Object} getThrowsName{ Params : ASTThrowStatement Returns : String} ,,,,
PMD,net.sourceforge.pmd.rules.design,ExcessiveLengthRule,1,1,0,0,0,false,StatisticalRule ,0 ,0 ,nodeClass: Class ,visit{ Params : SimpleNode,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules.design,ExcessiveNodeCountRule,1,1,0,0,0,false,StatisticalRule ,0 ,0 ,nodeClass: Class ,visit{ Params : SimpleNode,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules.design,LongClassRule,1,1,0,0,0,false,ExcessiveLengthRule ,0 ,0 ,,,,,,
PMD,net.sourceforge.pmd.rules.design,LongMethodRule,1,1,0,0,0,false,ExcessiveLengthRule ,0 ,0 ,,,,,,
PMD,net.sourceforge.pmd.rules.design,LongParameterListRule,1,1,0,0,0,false,ExcessiveNodeCountRule ,0 ,0 ,,visit{ Params : ASTFormalParameter,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules.design,LooseCouplingRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,implClassNames: Set ,visit{ Params : ASTName,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules.design,NullAssignmentRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTStatementExpression,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules.design,OnlyOneReturnRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules.design,PositionalIteratorRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTWhileStatement,Object Returns : Object} getVariableName{ Params : String Returns : String} collectNames{ Params : String,List,SimpleNode Returns : void} hasNameAsChild{ Params : SimpleNode Returns : boolean} getName{ Params : SimpleNode Returns : String} ,,,,
PMD,net.sourceforge.pmd.rules.design,SwitchDensityRule,1,1,0,0,0,false,StatisticalRule ,0 ,SwitchDensity ,,addSwitchLabel{ Params :  Returns : void} addStatement{ Params :  Returns : void} addStatements{ Params : int Returns : void} getStatementCount{ Params :  Returns : int} getDensity{ Params :  Returns : double} visit{ Params : ASTSwitchStatement,Object Returns : Object} visit{ Params : ASTStatement,Object Returns : Object} visit{ Params : ASTSwitchLabel,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules.design,SwitchDensity,3,2,0,0,0,false,StatisticalRule ,0 ,SwitchDensity ,labels: int stmts: int ,addSwitchLabel{ Params :  Returns : void} addStatement{ Params :  Returns : void} addStatements{ Params : int Returns : void} getStatementCount{ Params :  Returns : int} getDensity{ Params :  Returns : double} visit{ Params : ASTSwitchStatement,Object Returns : Object} visit{ Params : ASTStatement,Object Returns : Object} visit{ Params : ASTSwitchLabel,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules.design,UseSingletonRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,isOK: boolean methodCount: int ,visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTFieldDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,DoubleCheckedLockingRule,1,1,0,0,0,false,net.sourceforge.pmd.AbstractRule ,0 ,0 ,interfaceSkipper: boolean ,visit{ Params : ASTMethodDeclaration,Object Returns : Object} ifVerify{ Params : ASTIfStatement,String Returns : boolean} visit{ Params : ASTClassDeclaration,Object Returns : Object} visit{ Params : ASTNestedClassDeclaration,Object Returns : Object} visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTNestedInterfaceDeclaration,Object Returns : Object} matchName{ Params : ASTPrimaryExpression,String Returns : boolean} getNameFromPrimaryPrefix{ Params : ASTPrimaryPrefix Returns : String} ,,,,
PMD,net.sourceforge.pmd.rules,DuplicateImportsRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,singleTypeImports: Set importOnDemandImports: Set ,visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTImportDeclaration,Object Returns : Object} createRV{ Params : RuleContext,SimpleNode Returns : void} ,,,,
PMD,net.sourceforge.pmd.rules,ExcessiveImportsRule,1,1,0,0,0,false,ExcessiveNodeCountRule ,0 ,0 ,,visit{ Params : ASTImportDeclaration,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,ExcessivePublicCountRule,1,1,0,0,0,false,ExcessiveNodeCountRule ,0 ,0 ,,visit{ Params : ASTMethodDeclarator,Object Returns : Object} visit{ Params : ASTFieldDeclaration,Object Returns : Object} getTallyOnAccessType{ Params : AccessNode Returns : Integer} ,,,,
PMD,net.sourceforge.pmd.rules,IdempotentOperationsRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTStatementExpression,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,ImportFromSamePackageRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,packageName: String ,visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTPackageDeclaration,Object Returns : Object} visit{ Params : ASTImportDeclaration,Object Returns : Object} addViolation{ Params : RuleContext,ASTImportDeclaration Returns : void} getPackageName{ Params : String Returns : String} ,,,,
PMD,net.sourceforge.pmd.rules,ImportWrapper,1,1,0,0,0,false,0 ,0 ,0 ,line: int name: String ,equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} getName{ Params :  Returns : String} getLine{ Params :  Returns : int} ,,,,
PMD,net.sourceforge.pmd.rules.junit,JUnitAssertionsShouldIncludeMessageRule,1,1,0,0,0,false,AbstractRule ,Rule ,AssertionCall ,checks: List ,visit{ Params : ASTArguments,Object Returns : Object} check{ Params : RuleContext,ASTArguments,int,String Returns : void} ,,,,
PMD,net.sourceforge.pmd.rules.junit,AssertionCall,3,2,0,1,0,false,AbstractRule ,Rule ,AssertionCall ,args: int name: String ,visit{ Params : ASTArguments,Object Returns : Object} check{ Params : RuleContext,ASTArguments,int,String Returns : void} ,,,,
PMD,net.sourceforge.pmd.rules,MethodNamingConventionsRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTMethodDeclarator,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,SimplifyBooleanReturnsRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTIfStatement,Object Returns : Object} hasOneBlockStmt{ Params : SimpleNode Returns : boolean} terminatesInBooleanLiteral{ Params : SimpleNode Returns : boolean} eachNodeHasOneChild{ Params : SimpleNode Returns : boolean} getLastChild{ Params : SimpleNode Returns : SimpleNode} ,,,,
PMD,net.sourceforge.pmd.rules.strictexception,AvoidCatchingThrowable,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTTryStatement,Object Returns : Object} evaluateCatch{ Params : ASTCatch,RuleContext Returns : void} ,,,,
PMD,net.sourceforge.pmd.rules.strictexception,ExceptionSignatureDeclaration,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} evaluateExceptions{ Params : List,RuleContext Returns : void} hasDeclaredExceptionInSignature{ Params : ASTName Returns : boolean} isParentSignatureDeclaration{ Params : ASTName Returns : boolean} hasContent{ Params : List Returns : boolean} ,,,,
PMD,net.sourceforge.pmd.rules.strictexception,ExceptionTypeChecking,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTTryStatement,Object Returns : Object} evaluateCatchClause{ Params : ASTCatch,RuleContext Returns : void} evaluateInstanceOfExpression{ Params : ASTInstanceOfExpression,String,RuleContext Returns : void} hasTypeEvaluation{ Params : ASTInstanceOfExpression Returns : boolean} getInstanceOfObjectReference{ Params : ASTInstanceOfExpression Returns : String} getExceptionParameter{ Params : ASTCatch Returns : String} ,,,,
PMD,net.sourceforge.pmd.rules,StringConcatenationRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTForStatement,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,StringToStringRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTVariableDeclaratorId,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,SuspiciousOctalEscapeRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTLiteral,Object Returns : Object} isOctal{ Params : char Returns : boolean} isDecimal{ Params : char Returns : boolean} ,,,,
PMD,net.sourceforge.pmd.rules,SymbolTableTestRule,1,1,0,0,0,false,AbstractRule ,Rule ,0 ,,visit{ Params : ASTVariableDeclaratorId,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,UnnecessaryConversionTemporaryRule,1,1,0,0,0,false,AbstractRule ,Rule ,0 ,inPrimaryExpressionContext: boolean usingPrimitiveWrapperAllocation: boolean primitiveWrappers: Set ,visit{ Params : ASTPrimaryExpression,Object Returns : Object} visit{ Params : ASTAllocationExpression,Object Returns : Object} visit{ Params : ASTPrimarySuffix,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,UnusedFormalParameterRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTMethodDeclaration,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,UnusedImportsRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,imports: Set ,visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTImportDeclaration,Object Returns : Object} visit{ Params : ASTName,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,UnusedLocalVariableRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTVariableDeclaratorId,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,UnusedPrivateFieldRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,UnusedPrivateMethodRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,privateMethodNodes: Set trollingForDeclarations: boolean depth: int ,visit{ Params : ASTInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTClassBody,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} visit{ Params : ASTPrimarySuffix,Object Returns : Object} visit{ Params : ASTName,Object Returns : Object} removeIfUsed{ Params : String,int Returns : void} harvestUnused{ Params : RuleContext Returns : void} ,,,,
PMD,net.sourceforge.pmd.rules,VariableNamingConventionsRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,,visit{ Params : ASTLocalVariableDeclaration,Object Returns : Object} visit{ Params : ASTFieldDeclaration,Object Returns : Object} checkNames{ Params : AccessNode,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.rules,XPathRule,1,1,0,0,0,false,AbstractRule ,0 ,0 ,xpath: XPath ,visit{ Params : ASTCompilationUnit,Object Returns : Object} init{ Params :  Returns : void} throwJaxenAsRuntime{ Params : JaxenException Returns : void} printStackTrace{ Params :  Returns : void} printStackTrace{ Params : PrintWriter Returns : void} printStackTrace{ Params : PrintStream Returns : void} getMessage{ Params :  Returns : String} ,,throwJaxenAsRuntime ,,
PMD,net.sourceforge.pmd,RuleSet,1,1,0,0,0,false,0 ,0 ,0 ,rules: Set name: String description: String m_include: boolean m_fileName: String ,size{ Params :  Returns : int} addRule{ Params : Rule Returns : void} getRules{ Params :  Returns : Set} getRuleByName{ Params : String Returns : Rule} addRuleSet{ Params : RuleSet Returns : void} apply{ Params : List,RuleContext Returns : void} getName{ Params :  Returns : String} setName{ Params : String Returns : void} getDescription{ Params :  Returns : String} setDescription{ Params : String Returns : void} include{ Params :  Returns : boolean} setInclude{ Params : boolean Returns : void} getFileName{ Params :  Returns : String} setFileName{ Params : String Returns : void} ,,,,
PMD,net.sourceforge.pmd,RuleSetFactory,1,1,0,0,0,false,0 ,0 ,0 ,classLoader: ClassLoader ,getRegisteredRuleSets{ Params :  Returns : Iterator} createRuleSet{ Params : String,ClassLoader Returns : RuleSet} createRuleSet{ Params : String Returns : RuleSet} createRuleSet{ Params : InputStream Returns : RuleSet} createRuleSet{ Params : InputStream,ClassLoader Returns : RuleSet} getClassLoader{ Params :  Returns : ClassLoader} setClassLoader{ Params : ClassLoader Returns : void} tryToGetStreamTo{ Params : String,ClassLoader Returns : InputStream} parseDescriptionNode{ Params : RuleSet,Node Returns : void} parseRuleNode{ Params : RuleSet,Node Returns : void} parseInternallyDefinedRuleNode{ Params : RuleSet,Node Returns : void} parseExternallyDefinedRuleNode{ Params : RuleSet,Node Returns : void} parseRuleNodeWithSimpleReference{ Params : RuleSet,String Returns : void} parseRuleNodeWithExclude{ Params : RuleSet,Element,String Returns : void} parseDescriptionNode{ Params : Rule,Node Returns : void} parseExampleNode{ Params : Rule,Node Returns : void} parsePriorityNode{ Params : Rule,Node Returns : void} parsePropertiesNode{ Params : Rule,Node Returns : void} parsePropertyNode{ Params : Rule,Node Returns : void} parseValueNode{ Params : Node Returns : String} ,,,,
PMD,net.sourceforge.pmd,RuleSetNotFoundException,1,1,0,0,0,false,Exception ,0 ,0 ,,,,,,
PMD,net.sourceforge.pmd,RuleViolation,1,1,0,0,0,false,0 ,0 ,RuleViolationComparator ,line: int rule: Rule description: String filename: String ,compare{ Params : Object,Object Returns : int} getRule{ Params :  Returns : Rule} getLine{ Params :  Returns : int} getDescription{ Params :  Returns : String} getFilename{ Params :  Returns : String} ,,,,
PMD,net.sourceforge.pmd,RuleViolationComparator,3,1,0,1,0,false,0 ,0 ,RuleViolationComparator ,,compare{ Params : Object,Object Returns : int} getRule{ Params :  Returns : Rule} getLine{ Params :  Returns : int} getDescription{ Params :  Returns : String} getFilename{ Params :  Returns : String} ,,,,
PMD,net.sourceforge.pmd.stat,DataPoint,1,1,0,0,0,false,0 ,java.lang.Comparable ,0 ,lineNumber: int random: int score: double message: String rule: Rule ,compareTo{ Params : Object Returns : int} getLineNumber{ Params :  Returns : int} setLineNumber{ Params : int Returns : void} getMessage{ Params :  Returns : String} getRule{ Params :  Returns : Rule} setMessage{ Params : String Returns : void} setRule{ Params : Rule Returns : void} getScore{ Params :  Returns : double} setScore{ Params : double Returns : void} setScore{ Params : int Returns : void} ,,,,
PMD,net.sourceforge.pmd.stat,Metric,1,1,0,0,0,false,0 ,0 ,0 ,metricName: String count: int total: double low: double high: double mean: double stddev: double ,getMetricName{ Params :  Returns : String} getLowValue{ Params :  Returns : double} getHighValue{ Params :  Returns : double} getAverage{ Params :  Returns : double} getStandardDeviation{ Params :  Returns : double} getCount{ Params :  Returns : int} getTotal{ Params :  Returns : double} ,,,,
PMD,net.sourceforge.pmd.stat,StatisticalRule,1,1,1,0,0,false,AbstractRule ,0 ,0 ,DELTA: double dataPoints: SortedSet count: int total: double totalSquared: double ,addDataPoint{ Params : DataPoint Returns : void} apply{ Params : List,RuleContext Returns : void} getMean{ Params :  Returns : double} getStdDev{ Params :  Returns : double} applyMinimumValue{ Params : SortedSet,double Returns : SortedSet} applyTopScore{ Params : SortedSet,int Returns : SortedSet} makeViolations{ Params : RuleContext,Set Returns : void} ,,,,
PMD,net.sourceforge.pmd.symboltable,AbstractNameDeclaration,1,1,1,0,0,false,0 ,0 ,0 ,node: SimpleNode ,getScope{ Params :  Returns : Scope} getLine{ Params :  Returns : int} getImage{ Params :  Returns : String} ,,,,
PMD,net.sourceforge.pmd.symboltable,AbstractScope,1,1,1,0,0,false,0 ,Scope ,0 ,parent: Scope variableNames: Map methodNames: Map ,getEnclosingClassScope{ Params :  Returns : ClassScope} setParent{ Params : Scope Returns : void} getParent{ Params :  Returns : Scope} addDeclaration{ Params : VariableNameDeclaration Returns : void} addDeclaration{ Params : MethodNameDeclaration Returns : void} contains{ Params : NameOccurrence Returns : boolean} getVariableDeclarations{ Params : boolean Returns : Map} addVariableNameOccurrence{ Params : NameOccurrence Returns : NameDeclaration} findVariableHere{ Params : NameOccurrence Returns : NameDeclaration} glomNames{ Params :  Returns : String} ,,,,findVariableHere 
PMD,net.sourceforge.pmd.symboltable,AbstractScopeEvaluator,1,1,1,0,0,false,0 ,ScopeEvaluator ,0 ,triggers: Set ,getScopeFor{ Params : SimpleNode Returns : Scope} isScopeCreatedBy{ Params : SimpleNode Returns : boolean} ,,,,getScopeFor 
PMD,net.sourceforge.pmd.symboltable,BasicScopeCreationVisitor,1,1,0,0,0,false,JavaParserVisitorAdapter ,0 ,0 ,sf: ScopeFactory scopes: Stack ,visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTUnmodifiedClassDeclaration,Object Returns : Object} visit{ Params : ASTClassBodyDeclaration,Object Returns : Object} visit{ Params : ASTUnmodifiedInterfaceDeclaration,Object Returns : Object} visit{ Params : ASTBlock,Object Returns : Object} visit{ Params : ASTConstructorDeclaration,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTTryStatement,Object Returns : Object} visit{ Params : ASTForStatement,Object Returns : Object} visit{ Params : ASTIfStatement,Object Returns : Object} visit{ Params : ASTSwitchStatement,Object Returns : Object} cont{ Params : SimpleNode Returns : void} ,,,,
PMD,net.sourceforge.pmd.symboltable,BasicScopeFactory,1,1,0,0,0,false,0 ,ScopeFactory ,0 ,scopeEvaluators: Set ,openScope{ Params : Stack,SimpleNode Returns : void} ,,,,
PMD,net.sourceforge.pmd.symboltable,ClassScope,1,1,0,0,0,false,AbstractScope ,0 ,0 ,anonymousInnerClassCounter: int className: String ,getEnclosingClassScope{ Params :  Returns : ClassScope} getClassName{ Params :  Returns : String} addDeclaration{ Params : MethodNameDeclaration Returns : void} findVariableHere{ Params : NameOccurrence Returns : NameDeclaration} toString{ Params :  Returns : String} clipClassName{ Params : String Returns : String} ,,,,
PMD,net.sourceforge.pmd.symboltable,ClassScopeEvaluator,1,1,0,0,0,false,AbstractScopeEvaluator ,0 ,0 ,,getScopeFor{ Params : SimpleNode Returns : Scope} ,,,,
PMD,net.sourceforge.pmd.symboltable,DeclarationFinder,1,1,0,0,0,false,JavaParserVisitorAdapter ,0 ,0 ,,visit{ Params : ASTVariableDeclaratorId,Object Returns : Object} visit{ Params : ASTMethodDeclarator,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.symboltable,GlobalScope,1,1,0,0,0,false,AbstractScope ,Scope ,0 ,,getEnclosingClassScope{ Params :  Returns : ClassScope} addDeclaration{ Params : MethodNameDeclaration Returns : void} getUnusedVariableDeclarations{ Params :  Returns : Map} addDeclaration{ Params : VariableNameDeclaration Returns : void} contains{ Params : NameOccurrence Returns : boolean} addVariableNameOccurrence{ Params : NameOccurrence Returns : NameDeclaration} toString{ Params :  Returns : String} findVariableHere{ Params : NameOccurrence Returns : NameDeclaration} ,,,,
PMD,net.sourceforge.pmd.symboltable,GlobalScopeEvaluator,1,1,0,0,0,false,AbstractScopeEvaluator ,0 ,0 ,,getScopeFor{ Params : SimpleNode Returns : Scope} ,,,,
PMD,net.sourceforge.pmd.symboltable,ImageFinderFunction,1,1,0,0,0,false,0 ,UnaryFunction ,0 ,images: Set decl: NameDeclaration ,applyTo{ Params : Object Returns : void} getDecl{ Params :  Returns : NameDeclaration} ,,,,
PMD,net.sourceforge.pmd.symboltable,LocalScope,1,1,0,0,0,false,AbstractScope ,0 ,0 ,,addDeclaration{ Params : VariableNameDeclaration Returns : void} findVariableHere{ Params : NameOccurrence Returns : NameDeclaration} toString{ Params :  Returns : String} ,,,,
PMD,net.sourceforge.pmd.symboltable,LocalScopeEvaluator,1,1,0,0,0,false,AbstractScopeEvaluator ,0 ,0 ,,getScopeFor{ Params : SimpleNode Returns : Scope} ,,,,
PMD,net.sourceforge.pmd.symboltable,MethodNameDeclaration,1,1,0,0,0,false,AbstractNameDeclaration ,NameDeclaration ,0 ,,equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} toString{ Params :  Returns : String} ,,,,
PMD,net.sourceforge.pmd.symboltable,MethodScope,1,1,0,0,0,false,AbstractScope ,0 ,0 ,,findVariableHere{ Params : NameOccurrence Returns : NameDeclaration} toString{ Params :  Returns : String} ,,,,
PMD,net.sourceforge.pmd.symboltable,MethodScopeEvaluator,1,1,0,0,0,false,AbstractScopeEvaluator ,0 ,0 ,,getScopeFor{ Params : SimpleNode Returns : Scope} ,,,,
PMD,net.sourceforge.pmd.symboltable,NameDeclaration,2,1,0,0,0,true,AbstractScopeEvaluator ,0 ,0 ,,getImage{ Params :  Returns : String} getScope{ Params :  Returns : Scope} ,,,,
PMD,net.sourceforge.pmd.symboltable,NameOccurrence,1,1,0,0,0,false,0 ,0 ,0 ,location: SimpleNode image: String qualifiedName: NameOccurrence isMethodOrConstructorInvocation: boolean ,setIsMethodOrConstructorInvocation{ Params :  Returns : void} isMethodOrConstructorInvocation{ Params :  Returns : boolean} setNameWhichThisQualifies{ Params : NameOccurrence Returns : void} getNameForWhichThisIsAQualifier{ Params :  Returns : NameOccurrence} getLocation{ Params :  Returns : SimpleNode} isOnLeftHandSide{ Params :  Returns : boolean} getScope{ Params :  Returns : Scope} getBeginLine{ Params :  Returns : int} isThisOrSuper{ Params :  Returns : boolean} equals{ Params : Object Returns : boolean} getImage{ Params :  Returns : String} hashCode{ Params :  Returns : int} toString{ Params :  Returns : String} ,,,,
PMD,net.sourceforge.pmd.symboltable,NameOccurrences,1,1,0,0,0,false,0 ,0 ,0 ,names: List ,getNames{ Params :  Returns : List} iterator{ Params :  Returns : Iterator} buildOccurrences{ Params : ASTPrimaryExpression Returns : void} checkForNameChild{ Params : SimpleNode Returns : void} add{ Params : NameOccurrence Returns : void} toString{ Params :  Returns : String} ,,,,
PMD,net.sourceforge.pmd.symboltable,Scope,2,1,0,0,0,true,0 ,0 ,0 ,,getVariableDeclarations{ Params : boolean Returns : Map} addDeclaration{ Params : VariableNameDeclaration Returns : void} addDeclaration{ Params : MethodNameDeclaration Returns : void} contains{ Params : NameOccurrence Returns : boolean} addVariableNameOccurrence{ Params : NameOccurrence Returns : NameDeclaration} setParent{ Params : Scope Returns : void} getParent{ Params :  Returns : Scope} getEnclosingClassScope{ Params :  Returns : ClassScope} ,,,,
PMD,net.sourceforge.pmd.symboltable,ScopeEvaluator,2,1,0,0,0,true,0 ,0 ,0 ,,getScopeFor{ Params : SimpleNode Returns : Scope} isScopeCreatedBy{ Params : SimpleNode Returns : boolean} ,,,,
PMD,net.sourceforge.pmd.symboltable,ScopeFactory,2,1,0,0,0,true,0 ,0 ,0 ,,openScope{ Params : Stack,SimpleNode Returns : void} ,,,,
PMD,net.sourceforge.pmd.symboltable,Search,1,1,0,0,0,false,0 ,0 ,0 ,TRACE: boolean occ: NameOccurrence decl: NameDeclaration ,execute{ Params :  Returns : void} execute{ Params : Scope Returns : void} getResult{ Params :  Returns : NameDeclaration} searchUpward{ Params : NameOccurrence,Scope Returns : NameDeclaration} ,,,,
PMD,net.sourceforge.pmd.symboltable,SymbolFacade,1,1,0,0,0,false,JavaParserVisitorAdapter ,0 ,0 ,,initializeWith{ Params : ASTCompilationUnit Returns : void} visit{ Params : ASTPrimaryExpression,Object Returns : Object} ,,,,
PMD,net.sourceforge.pmd.symboltable,TypeSet,1,1,0,0,0,false,0 ,0 ,Resolver ExplicitImportResolver CurrentPackageResolver ImplicitImportResolver ImportOnDemandResolver PrimitiveTypeResolver VoidResolver FullyQualifiedNameResolver ,pkg: String imports: Set resolvers: List ,resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} setASTCompilationUnitPackage{ Params : String Returns : void} getASTCompilationUnitPackage{ Params :  Returns : String} addImport{ Params : String Returns : void} getImportsCount{ Params :  Returns : int} findClass{ Params : String Returns : Class} buildResolvers{ Params :  Returns : void} ,,,,
PMD,net.sourceforge.pmd.symboltable,Resolver,3,1,0,0,0,true,0 ,0 ,Resolver ExplicitImportResolver CurrentPackageResolver ImplicitImportResolver ImportOnDemandResolver PrimitiveTypeResolver VoidResolver FullyQualifiedNameResolver ,,resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} setASTCompilationUnitPackage{ Params : String Returns : void} getASTCompilationUnitPackage{ Params :  Returns : String} addImport{ Params : String Returns : void} getImportsCount{ Params :  Returns : int} findClass{ Params : String Returns : Class} buildResolvers{ Params :  Returns : void} ,,,,
PMD,net.sourceforge.pmd.symboltable,ExplicitImportResolver,3,1,0,1,0,false,0 ,0 ,Resolver ExplicitImportResolver CurrentPackageResolver ImplicitImportResolver ImportOnDemandResolver PrimitiveTypeResolver VoidResolver FullyQualifiedNameResolver ,importStmts: Set ,resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} setASTCompilationUnitPackage{ Params : String Returns : void} getASTCompilationUnitPackage{ Params :  Returns : String} addImport{ Params : String Returns : void} getImportsCount{ Params :  Returns : int} findClass{ Params : String Returns : Class} buildResolvers{ Params :  Returns : void} ,,,,
PMD,net.sourceforge.pmd.symboltable,CurrentPackageResolver,3,1,0,1,0,false,0 ,0 ,Resolver ExplicitImportResolver CurrentPackageResolver ImplicitImportResolver ImportOnDemandResolver PrimitiveTypeResolver VoidResolver FullyQualifiedNameResolver ,pkg: String ,resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} setASTCompilationUnitPackage{ Params : String Returns : void} getASTCompilationUnitPackage{ Params :  Returns : String} addImport{ Params : String Returns : void} getImportsCount{ Params :  Returns : int} findClass{ Params : String Returns : Class} buildResolvers{ Params :  Returns : void} ,,,,
PMD,net.sourceforge.pmd.symboltable,ImplicitImportResolver,3,1,0,1,0,false,0 ,0 ,Resolver ExplicitImportResolver CurrentPackageResolver ImplicitImportResolver ImportOnDemandResolver PrimitiveTypeResolver VoidResolver FullyQualifiedNameResolver ,,resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} setASTCompilationUnitPackage{ Params : String Returns : void} getASTCompilationUnitPackage{ Params :  Returns : String} addImport{ Params : String Returns : void} getImportsCount{ Params :  Returns : int} findClass{ Params : String Returns : Class} buildResolvers{ Params :  Returns : void} ,,,,
PMD,net.sourceforge.pmd.symboltable,ImportOnDemandResolver,3,1,0,1,0,false,0 ,0 ,Resolver ExplicitImportResolver CurrentPackageResolver ImplicitImportResolver ImportOnDemandResolver PrimitiveTypeResolver VoidResolver FullyQualifiedNameResolver ,importStmts: Set ,resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} setASTCompilationUnitPackage{ Params : String Returns : void} getASTCompilationUnitPackage{ Params :  Returns : String} addImport{ Params : String Returns : void} getImportsCount{ Params :  Returns : int} findClass{ Params : String Returns : Class} buildResolvers{ Params :  Returns : void} ,,,,
PMD,net.sourceforge.pmd.symboltable,PrimitiveTypeResolver,3,1,0,1,0,false,0 ,0 ,Resolver ExplicitImportResolver CurrentPackageResolver ImplicitImportResolver ImportOnDemandResolver PrimitiveTypeResolver VoidResolver FullyQualifiedNameResolver ,primitiveTypes: Map ,resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} setASTCompilationUnitPackage{ Params : String Returns : void} getASTCompilationUnitPackage{ Params :  Returns : String} addImport{ Params : String Returns : void} getImportsCount{ Params :  Returns : int} findClass{ Params : String Returns : Class} buildResolvers{ Params :  Returns : void} ,,,,
PMD,net.sourceforge.pmd.symboltable,VoidResolver,3,1,0,1,0,false,0 ,0 ,Resolver ExplicitImportResolver CurrentPackageResolver ImplicitImportResolver ImportOnDemandResolver PrimitiveTypeResolver VoidResolver FullyQualifiedNameResolver ,,resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} setASTCompilationUnitPackage{ Params : String Returns : void} getASTCompilationUnitPackage{ Params :  Returns : String} addImport{ Params : String Returns : void} getImportsCount{ Params :  Returns : int} findClass{ Params : String Returns : Class} buildResolvers{ Params :  Returns : void} ,,,,
PMD,net.sourceforge.pmd.symboltable,FullyQualifiedNameResolver,3,1,0,1,0,false,0 ,0 ,Resolver ExplicitImportResolver CurrentPackageResolver ImplicitImportResolver ImportOnDemandResolver PrimitiveTypeResolver VoidResolver FullyQualifiedNameResolver ,,resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} resolve{ Params : String Returns : Class} setASTCompilationUnitPackage{ Params : String Returns : void} getASTCompilationUnitPackage{ Params :  Returns : String} addImport{ Params : String Returns : void} getImportsCount{ Params :  Returns : int} findClass{ Params : String Returns : Class} buildResolvers{ Params :  Returns : void} ,,,,
PMD,net.sourceforge.pmd.symboltable,VariableNameDeclaration,1,1,0,0,0,false,AbstractNameDeclaration ,NameDeclaration ,0 ,,getScope{ Params :  Returns : Scope} isArray{ Params :  Returns : boolean} isExceptionBlockParameter{ Params :  Returns : boolean} getAccessNodeParent{ Params :  Returns : AccessNode} getDeclaratorId{ Params :  Returns : ASTVariableDeclaratorId} equals{ Params : Object Returns : boolean} hashCode{ Params :  Returns : int} toString{ Params :  Returns : String} ,,,,
PMD,net.sourceforge.pmd.symboltable,VariableUsageFinderFunction,1,1,0,0,0,false,0 ,UnaryFunction ,0 ,results: Map decls: Map lookingForUsed: boolean ,applyTo{ Params : Object Returns : void} getUsed{ Params :  Returns : Map} ,,,,
PMD,net.sourceforge.pmd,TargetJDK1_3,1,1,0,0,0,false,0 ,TargetJDKVersion ,0 ,,createParser{ Params : InputStream Returns : JavaParser} createParser{ Params : Reader Returns : JavaParser} ,,,,
PMD,net.sourceforge.pmd,TargetJDK1_4,1,1,0,0,0,false,0 ,TargetJDKVersion ,0 ,,createParser{ Params : InputStream Returns : JavaParser} createParser{ Params : Reader Returns : JavaParser} createJavaParserTokenManager{ Params : Reader Returns : JavaParserTokenManager} ,,,,
PMD,net.sourceforge.pmd,TargetJDK1_5,1,1,0,0,0,false,0 ,TargetJDKVersion ,0 ,,createParser{ Params : InputStream Returns : JavaParser} createParser{ Params : Reader Returns : JavaParser} ,,,,
PMD,net.sourceforge.pmd,TargetJDKVersion,2,1,0,0,0,true,0 ,TargetJDKVersion ,0 ,,createParser{ Params : InputStream Returns : JavaParser} createParser{ Params : Reader Returns : JavaParser} ,,,,
PMD,net.sourceforge.pmd.util,Applier,1,1,0,0,0,false,0 ,0 ,0 ,,apply{ Params : UnaryFunction,Iterator Returns : void} ,,apply ,,
PMD,net.sourceforge.pmd.util,ASTViewer,1,1,0,0,0,false,0 ,0 ,JSmartPanel MyPrintStream ShowListener SaveListener XPathListener ,SETTINGS_FILE_NAME: String codeEditorPane: JTextPane astArea: JTextArea xpathResultArea: JTextArea xpathQueryArea: JTextArea frame: JFrame ,add{ Params : Component,int,int,int,int,double,double,int,int,Insets Returns : void} println{ Params : String Returns : void} getString{ Params :  Returns : String} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} loadText{ Params :  Returns : String} main{ Params : String[] Returns : void} ,,main ,,
PMD,net.sourceforge.pmd.util,JSmartPanel,3,2,0,1,0,false,0 ,0 ,JSmartPanel MyPrintStream ShowListener SaveListener XPathListener ,constraints: GridBagConstraints ,add{ Params : Component,int,int,int,int,double,double,int,int,Insets Returns : void} println{ Params : String Returns : void} getString{ Params :  Returns : String} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} loadText{ Params :  Returns : String} main{ Params : String[] Returns : void} ,,main ,,
PMD,net.sourceforge.pmd.util,MyPrintStream,3,2,0,1,0,false,0 ,0 ,JSmartPanel MyPrintStream ShowListener SaveListener XPathListener ,buf: StringBuffer ,add{ Params : Component,int,int,int,int,double,double,int,int,Insets Returns : void} println{ Params : String Returns : void} getString{ Params :  Returns : String} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} loadText{ Params :  Returns : String} main{ Params : String[] Returns : void} ,,main ,,
PMD,net.sourceforge.pmd.util,ShowListener,3,2,0,0,0,false,0 ,0 ,JSmartPanel MyPrintStream ShowListener SaveListener XPathListener ,,add{ Params : Component,int,int,int,int,double,double,int,int,Insets Returns : void} println{ Params : String Returns : void} getString{ Params :  Returns : String} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} loadText{ Params :  Returns : String} main{ Params : String[] Returns : void} ,,main ,,
PMD,net.sourceforge.pmd.util,SaveListener,3,2,0,0,0,false,0 ,0 ,JSmartPanel MyPrintStream ShowListener SaveListener XPathListener ,,add{ Params : Component,int,int,int,int,double,double,int,int,Insets Returns : void} println{ Params : String Returns : void} getString{ Params :  Returns : String} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} loadText{ Params :  Returns : String} main{ Params : String[] Returns : void} ,,main ,,
PMD,net.sourceforge.pmd.util,XPathListener,3,2,0,0,0,false,0 ,0 ,JSmartPanel MyPrintStream ShowListener SaveListener XPathListener ,,add{ Params : Component,int,int,int,int,double,double,int,int,Insets Returns : void} println{ Params : String Returns : void} getString{ Params :  Returns : String} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} actionPerformed{ Params : ActionEvent Returns : void} loadText{ Params :  Returns : String} main{ Params : String[] Returns : void} ,,main ,,
PMD,net.sourceforge.pmd.util,ResourceLoader,1,1,0,0,0,false,0 ,0 ,0 ,,loadResourceAsStream{ Params : String Returns : InputStream} loadResourceAsStream{ Params : String,ClassLoader Returns : InputStream} ,,loadResourceAsStream loadResourceAsStream ,,
PMD,net.sourceforge.pmd.util,StringUtil,1,1,0,0,0,false,0 ,0 ,0 ,ENTITIES: String ,replaceString{ Params : String,char,String Returns : String} replaceString{ Params : String,String,String Returns : String} appendXmlEscaped{ Params : StringBuffer,String Returns : void} ,,replaceString replaceString appendXmlEscaped ,,
PMD,net.sourceforge.pmd.util,UnaryFunction,2,1,0,0,0,true,0 ,0 ,0 ,,applyTo{ Params : Object Returns : void} ,,,,
PMD,net.sourceforge.pmd.util.viewer.gui,ActionCommands,2,1,0,0,0,true,0 ,0 ,0 ,COMPILE_ACTION: String EVALUATE_ACTION: String ,,,,,
PMD,net.sourceforge.pmd.util.viewer.gui,ASTPanel,1,1,0,0,0,false,JPanel ,ViewerModelListener TreeSelectionListener ,0 ,model: ViewerModel tree: JTree ,init{ Params :  Returns : void} mouseReleased{ Params : MouseEvent Returns : void} viewerModelChanged{ Params : ViewerModelEvent Returns : void} valueChanged{ Params : TreeSelectionEvent Returns : void} ,,,,
PMD,net.sourceforge.pmd.util.viewer.gui,EvaluationResultsPanel,1,1,0,0,0,false,JPanel ,ViewerModelListener ,0 ,model: ViewerModel list: JList ,init{ Params :  Returns : void} valueChanged{ Params : ListSelectionEvent Returns : void} viewerModelChanged{ Params : ViewerModelEvent Returns : void} ,,,,
PMD,net.sourceforge.pmd.util.viewer.gui,MainFrame,1,1,0,0,0,false,JFrame ,ActionListener ActionCommands ViewerModelListener ,0 ,model: ViewerModel sourcePanel: SourceCodePanel astPanel: ASTPanel xPathPanel: XPathPanel compileBtn: JButton evalBtn: JButton ,init{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} viewerModelChanged{ Params : ViewerModelEvent Returns : void} ,,,,
PMD,net.sourceforge.pmd.util.viewer.gui.menu,ASTNodePopupMenu,1,1,0,0,0,false,JPopupMenu ,0 ,0 ,model: ViewerModel node: SimpleNode ,init{ Params :  Returns : void} ,,,,
PMD,net.sourceforge.pmd.util.viewer.gui.menu,AttributesSubMenu,1,1,0,0,0,false,JMenu ,0 ,0 ,model: ViewerModel node: SimpleNode ,init{ Params :  Returns : void} ,,,,
PMD,net.sourceforge.pmd.util.viewer.gui.menu,SimpleNodeSubMenu,1,1,0,0,0,false,JMenu ,0 ,0 ,model: ViewerModel node: SimpleNode ,init{ Params :  Returns : void} ,,,,
PMD,net.sourceforge.pmd.util.viewer.gui.menu,XPathFragmentAddingItem,1,1,0,0,0,false,JMenuItem ,ActionListener ,0 ,model: ViewerModel fragment: String ,actionPerformed{ Params : ActionEvent Returns : void} ,,,,
PMD,net.sourceforge.pmd.util.viewer.gui,ParseExceptionHandler,1,1,0,0,0,false,JDialog ,ActionListener ,0 ,exc: Exception errorArea: JTextArea okBtn: JButton ,init{ Params :  Returns : void} actionPerformed{ Params : ActionEvent Returns : void} ,,,,
PMD,net.sourceforge.pmd.util.viewer.gui,SourceCodePanel,1,1,0,0,0,false,JPanel ,ViewerModelListener ,0 ,model: ViewerModel sourceCodeArea: JTextArea ,init{ Params :  Returns : void} getSourceCode{ Params :  Returns : String} viewerModelChanged{ Params : ViewerModelEvent Returns : void} run{ Params :  Returns : void} ,,,,
PMD,net.sourceforge.pmd.util.viewer.gui,XPathPanel,1,1,0,0,0,false,JTabbedPane ,ViewerModelListener ,0 ,model: ViewerModel xPathArea: JTextArea ,init{ Params :  Returns : void} getXPathExpression{ Params :  Returns : String} viewerModelChanged{ Params : ViewerModelEvent Returns : void} ,,,,
PMD,net.sourceforge.pmd.util.viewer.model,ASTModel,1,1,0,0,0,false,0 ,TreeModel ,0 ,root: SimpleNode listeners: Vector ,getChild{ Params : Object,int Returns : Object} getChildCount{ Params : Object Returns : int} getIndexOfChild{ Params : Object,Object Returns : int} isLeaf{ Params : Object Returns : boolean} getRoot{ Params :  Returns : Object} valueForPathChanged{ Params : TreePath,Object Returns : void} addTreeModelListener{ Params : TreeModelListener Returns : void} removeTreeModelListener{ Params : TreeModelListener Returns : void} fireTreeModelEvent{ Params : TreeModelEvent Returns : void} ,,,,
PMD,net.sourceforge.pmd.util.viewer.model,AttributeToolkit,1,1,0,0,0,false,0 ,0 ,0 ,,formatValueForXPath{ Params : Attribute Returns : String} constructPredicate{ Params : Attribute Returns : String} ,,formatValueForXPath constructPredicate ,,
PMD,net.sourceforge.pmd.util.viewer.model,SimpleNodeTreeNodeAdapter,1,1,0,0,0,false,0 ,TreeNode ,0 ,node: SimpleNode children: List parent: SimpleNodeTreeNodeAdapter ,getSimpleNode{ Params :  Returns : SimpleNode} getChildAt{ Params : int Returns : TreeNode} getChildCount{ Params :  Returns : int} getParent{ Params :  Returns : TreeNode} getIndex{ Params : TreeNode Returns : int} getAllowsChildren{ Params :  Returns : boolean} isLeaf{ Params :  Returns : boolean} children{ Params :  Returns : Enumeration} checkChildren{ Params :  Returns : void} toString{ Params :  Returns : String} ,,,,
PMD,net.sourceforge.pmd.util.viewer.model,ViewerModel,1,1,0,0,0,false,0 ,0 ,0 ,listeners: Vector rootNode: SimpleNode evaluationResults: List ,getRootNode{ Params :  Returns : SimpleNode} commitSource{ Params : String Returns : void} hasCompiledTree{ Params :  Returns : boolean} evaluateXPathExpression{ Params : String,Object Returns : void} getLastEvaluationResults{ Params :  Returns : List} selectNode{ Params : SimpleNode,Object Returns : void} appendToXPathExpression{ Params : String,Object Returns : void} addViewerModelListener{ Params : ViewerModelListener Returns : void} removeViewerModelListener{ Params : ViewerModelListener Returns : void} fireViewerModelEvent{ Params : ViewerModelEvent Returns : void} ,,,,
PMD,net.sourceforge.pmd.util.viewer.model,ViewerModelEvent,1,1,0,0,0,false,0 ,0 ,0 ,CODE_RECOMPILED: int NODE_SELECTED: int PATH_EXPRESSION_APPENDED: int PATH_EXPRESSION_EVALUATED: int source: Object reason: int parameter: Object ,getReason{ Params :  Returns : int} getSource{ Params :  Returns : Object} getParameter{ Params :  Returns : Object} ,,,,
PMD,net.sourceforge.pmd.util.viewer.model,ViewerModelListener,2,1,0,0,0,true,0 ,0 ,0 ,,viewerModelChanged{ Params : ViewerModelEvent Returns : void} ,,,,
PMD,net.sourceforge.pmd.util.viewer.util,NLS,1,1,0,0,0,false,0 ,0 ,0 ,bundle: ResourceBundle ,nls{ Params : String Returns : String} ,,nls ,,
PMD,net.sourceforge.pmd.util.viewer,Viewer,1,1,0,0,0,false,0 ,0 ,0 ,,main{ Params : String[] Returns : void} ,,main ,,
PMD,test.net.sourceforge.pmd,AbstractRuleTest,1,1,0,0,0,false,TestCase ,0 ,MyRule ,,getMessage{ Params :  Returns : String} testCreateRV{ Params :  Returns : void} testCreateRV2{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd,MyRule,3,2,0,1,0,false,TestCase ,0 ,MyRule ,,getMessage{ Params :  Returns : String} testCreateRV{ Params :  Returns : void} testCreateRV2{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.ant,AntTests,1,1,0,0,0,false,0 ,0 ,0 ,,suite{ Params :  Returns : Test} ,,suite ,,
PMD,test.net.sourceforge.pmd.ant,FormatterTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testType{ Params :  Returns : void} testNull{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.ant,PMDTaskTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testNoFormattersValidation{ Params :  Returns : void} testFormatterWithNoToFileAttribute{ Params :  Returns : void} testNoRuleSets{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.ast,AccessNodeTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testStatic{ Params :  Returns : void} testPublic{ Params :  Returns : void} testProtected{ Params :  Returns : void} testPrivate{ Params :  Returns : void} testFinal{ Params :  Returns : void} testSynchronized{ Params :  Returns : void} testVolatile{ Params :  Returns : void} testTransient{ Params :  Returns : void} testNative{ Params :  Returns : void} testInterface{ Params :  Returns : void} testAbstract{ Params :  Returns : void} testStrict{ Params :  Returns : void} testSuper{ Params :  Returns : void} testPackagePrivate{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.ast,ASTBooleanLiteralTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testTrue{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.ast,ASTImportDeclarationTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testBasic{ Params :  Returns : void} testGetImportedNameNode{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.ast,ASTTests,1,1,0,0,0,false,0 ,0 ,0 ,,suite{ Params :  Returns : Test} ,,suite ,,
PMD,test.net.sourceforge.pmd.ast,ASTTypeTest,1,1,0,0,0,false,TestCase ,0 ,0 ,TEST1: String TEST2: String TEST3: String ,testIsArray{ Params :  Returns : void} testOneDimensionArray{ Params :  Returns : void} testMultiDimensionalArray{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.ast,ASTVariableDeclaratorIdTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testIsExceptionBlockParameter{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.ast,ClassDeclTest,1,1,0,0,0,false,ParserTst ,0 ,0 ,,testPublic{ Params :  Returns : void} testAbstract{ Params :  Returns : void} testFinal{ Params :  Returns : void} testStrict{ Params :  Returns : void} testPublicFinal{ Params :  Returns : void} verifyFlags{ Params : ASTClassDeclaration,boolean,boolean,boolean,boolean Returns : void} getClassDecl{ Params : String[] Returns : ASTClassDeclaration} ,,,,
PMD,test.net.sourceforge.pmd.ast,DiscardableNodeCleanerTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testRemoveDiscardNodes{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.ast,EncodingTest,1,1,0,0,0,false,TestCase ,0 ,0 ,TEST_UTF8: String ,testDecodingOfUTF8{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.ast,FieldDeclTest,1,1,0,0,0,false,ParserTst ,0 ,0 ,,makeAccessJavaCode{ Params : String[] Returns : String} getFieldDecl{ Params : String[] Returns : ASTFieldDeclaration} testPublic{ Params :  Returns : void} testProtected{ Params :  Returns : void} testPrivate{ Params :  Returns : void} testStatic{ Params :  Returns : void} testFinal{ Params :  Returns : void} testTransient{ Params :  Returns : void} testVolatile{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.ast,JDKVersionTest,1,1,0,0,0,false,TestCase ,0 ,0 ,ASSERT_TEST1: String ASSERT_TEST2: String ASSERT_TEST3: String ASSERT_TEST4: String ASSERT_TEST5: String ASSERT_TEST6: String ASSERT_TEST7: String JDK15_ENUM: String JDK14_ENUM: String ,testEnumAsKeywordShouldFailWith14{ Params :  Returns : void} testEnumAsIdentifierShouldPassWith14{ Params :  Returns : void} testEnumAsKeywordShouldPassWith15{ Params :  Returns : void} testEnumAsIdentifierShouldFailWith15{ Params :  Returns : void} testAssertAsKeywordVariantsSucceedWith1_4{ Params :  Returns : void} testAssertAsVariableDeclIdentifierFailsWith1_4{ Params :  Returns : void} testAssertAsMethodNameIdentifierFailsWith1_4{ Params :  Returns : void} testAssertAsIdentifierSucceedsWith1_3{ Params :  Returns : void} testAssertAsKeywordFailsWith1_3{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.ast,MethodDeclTest,1,1,0,0,0,false,ParserTst ,0 ,0 ,,testPublic{ Params :  Returns : void} testPrivate{ Params :  Returns : void} testProtected{ Params :  Returns : void} testFinal{ Params :  Returns : void} testSynchronized{ Params :  Returns : void} testAbstract{ Params :  Returns : void} testNative{ Params :  Returns : void} testStrict{ Params :  Returns : void} getMethodDecl{ Params : String[] Returns : ASTMethodDeclaration} ,,,,
PMD,test.net.sourceforge.pmd.ast,ParserTst,1,1,0,0,0,false,TestCase ,0 ,Collector ,,getCollection{ Params :  Returns : Set} invoke{ Params : Object,Method,Object[] Returns : Object} getNodes{ Params : Class,String Returns : Set} ,,,,
PMD,test.net.sourceforge.pmd.ast,Collector,3,2,0,0,0,false,TestCase ,0 ,Collector ,clazz: Class collection: Set ,getCollection{ Params :  Returns : Set} invoke{ Params : Object,Method,Object[] Returns : Object} getNodes{ Params : Class,String Returns : Set} ,,,,
PMD,test.net.sourceforge.pmd.ast,SimpleNodeTest,1,1,0,0,0,false,ParserTst ,0 ,0 ,HAS_EXPLICIT_EXTENDS: String NO_EXPLICIT_EXTENDS: String HAS_EXPLICIT_IMPLEMENTS: String NO_EXPLICIT_IMPLEMENTS: String METHOD_DIFF_LINES: String METHOD_SAME_LINE: String QUALIFIED_NAME: String BROKEN_LINE_IN_NAME: String LINE_NUMBERS_ON_SIBLINGS: String NO_LOOKAHEAD: String ,testMethodDiffLines{ Params :  Returns : void} testMethodSameLine{ Params :  Returns : void} testNoLookahead{ Params :  Returns : void} testHasExplicitExtends{ Params :  Returns : void} testNoExplicitExtends{ Params :  Returns : void} testHasExplicitImplements{ Params :  Returns : void} testNoExplicitImplements{ Params :  Returns : void} testColumnsOnQualifiedName{ Params :  Returns : void} testLineNumbersForNameSplitOverTwoLines{ Params :  Returns : void} testLineNumbersAreSetOnAllSiblings{ Params :  Returns : void} testFindChildrenOfType{ Params :  Returns : void} testFindChildrenOfTypeMultiple{ Params :  Returns : void} testFindChildrenOfTypeRecurse{ Params :  Returns : void} testReplaceChild{ Params :  Returns : void} verifyNode{ Params : SimpleNode,int,int,int,int Returns : void} ,,,,
PMD,test.net.sourceforge.pmd,CommandLineOptionsTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testDebug{ Params :  Returns : void} testTargetJDKVersion{ Params :  Returns : void} testShortNames{ Params :  Returns : void} testEncoding{ Params :  Returns : void} testInputFileName{ Params :  Returns : void} testReportFormat{ Params :  Returns : void} testRulesets{ Params :  Returns : void} testCommaSeparatedFiles{ Params :  Returns : void} testNotEnoughArgs{ Params :  Returns : void} testNullArgs{ Params :  Returns : void} testRenderer{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.cpd,CPDTests,1,1,0,0,0,false,0 ,0 ,0 ,,suite{ Params :  Returns : Test} ,,suite ,,
PMD,test.net.sourceforge.pmd.cpd,FileReporterTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testCreation{ Params :  Returns : void} testEmptyReport{ Params :  Returns : void} testReport{ Params :  Returns : void} testInvalidFile{ Params :  Returns : void} readFile{ Params : File Returns : String} ,,,,
PMD,test.net.sourceforge.pmd.cpd,JavaTokensTokenizerTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,test1{ Params :  Returns : void} test2{ Params :  Returns : void} testDiscardSemicolons{ Params :  Returns : void} testDiscardImports{ Params :  Returns : void} testDiscardPkgStmts{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.cpd,LanguageFactoryTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testSimple{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.cpd,MatchAlgorithmTest,1,1,0,0,0,false,TestCase ,0 ,0 ,LINE_1: String LINE_2: String LINE_3: String LINE_4: String LINE_5: String LINE_6: String ,getSampleCode{ Params :  Returns : String} testSimple{ Params :  Returns : void} ,,getSampleCode ,,
PMD,test.net.sourceforge.pmd.cpd,MatchTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testSimple{ Params :  Returns : void} testCompareTo{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.cpd,SourceCodeTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testSimple{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.cpd,TokenEntryTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testSimple{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.cpd,XMLRendererTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testRender_NoMatches{ Params :  Returns : void} testRender_Match{ Params :  Returns : void} testRender_MultipleMatch{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd,ExternalRuleIDTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testSimpleRef{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.jaxen,AttributeAxisIteratorTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testBasicAttributes{ Params :  Returns : void} testRemove{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.jaxen,AttributeTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testConstructor{ Params :  Returns : void} testAccessors{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.jaxen,DocumentNavigatorTest,1,1,0,0,0,false,RuleTst ,0 ,TestRule ,rule: TestRule ,visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTImportDeclaration,Object Returns : Object} visit{ Params : ASTTypeDeclaration,Object Returns : Object} visit{ Params : ASTStatement,Object Returns : Object} visit{ Params : ASTPrimaryPrefix,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTPrimaryExpression,Object Returns : Object} setUp{ Params :  Returns : void} testChildAxisIterator{ Params :  Returns : void} testParentAxisIterator{ Params :  Returns : void} testParentAxisIterator2{ Params :  Returns : void} testDescendantAxisIterator{ Params :  Returns : void} testDescendantAxisIterator2{ Params :  Returns : void} testFollowingSiblingAxisIterator{ Params :  Returns : void} testFollowingSiblingAxisIterator2{ Params :  Returns : void} testPrecedingSiblingAxisIterator{ Params :  Returns : void} testPrecedingSiblingAxisIterator2{ Params :  Returns : void} testXPath{ Params :  Returns : void} testXPath2{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.jaxen,TestRule,3,2,0,0,0,false,RuleTst ,0 ,TestRule ,compilationUnit: Node importDeclaration: Node typeDeclaration: Node statement: Node primaryPrefix: Node primaryExpression: Node methodDeclaration: Node ,visit{ Params : ASTCompilationUnit,Object Returns : Object} visit{ Params : ASTImportDeclaration,Object Returns : Object} visit{ Params : ASTTypeDeclaration,Object Returns : Object} visit{ Params : ASTStatement,Object Returns : Object} visit{ Params : ASTPrimaryPrefix,Object Returns : Object} visit{ Params : ASTMethodDeclaration,Object Returns : Object} visit{ Params : ASTPrimaryExpression,Object Returns : Object} setUp{ Params :  Returns : void} testChildAxisIterator{ Params :  Returns : void} testParentAxisIterator{ Params :  Returns : void} testParentAxisIterator2{ Params :  Returns : void} testDescendantAxisIterator{ Params :  Returns : void} testDescendantAxisIterator2{ Params :  Returns : void} testFollowingSiblingAxisIterator{ Params :  Returns : void} testFollowingSiblingAxisIterator2{ Params :  Returns : void} testPrecedingSiblingAxisIterator{ Params :  Returns : void} testPrecedingSiblingAxisIterator2{ Params :  Returns : void} testXPath{ Params :  Returns : void} testXPath2{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.jaxen,JaxenTests,1,1,0,0,0,false,0 ,0 ,0 ,,suite{ Params :  Returns : Test} ,,suite ,,
PMD,test.net.sourceforge.pmd,PMDTests,1,1,0,0,0,false,0 ,0 ,0 ,,suite{ Params :  Returns : Test} ,,suite ,,
PMD,test.net.sourceforge.pmd.renderers,RenderersTests,1,1,0,0,0,false,0 ,0 ,0 ,,suite{ Params :  Returns : Test} ,,suite ,,
PMD,test.net.sourceforge.pmd.renderers,TextPadRendererTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testNullPassedIn{ Params :  Returns : void} testRenderer{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.renderers,XMLRendererTest,1,1,0,0,0,false,TestCase ,0 ,0 ,RULE1: MockRule RULE2: MockRule ctx: RuleContext ,testEmptyReport{ Params :  Returns : void} testErrorReport{ Params :  Returns : void} testSingleReport{ Params :  Returns : void} testDoubleReport{ Params :  Returns : void} testTwoFiles{ Params :  Returns : void} testUnorderedFiles{ Params :  Returns : void} testEscaping{ Params :  Returns : void} verifyPositions{ Params : String,List Returns : void} ,,,,
PMD,test.net.sourceforge.pmd,ReportTest,1,1,0,0,0,false,TestCase ,ReportListener ,0 ,violationSemaphore: boolean metricSemaphore: boolean ,testBasic{ Params :  Returns : void} testMetric0{ Params :  Returns : void} testMetric1{ Params :  Returns : void} testSortedReport_File{ Params :  Returns : void} testSortedReport_Line{ Params :  Returns : void} testListener{ Params :  Returns : void} ruleViolationAdded{ Params : RuleViolation Returns : void} metricAdded{ Params : Metric Returns : void} testSummary{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd,RuleContextTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testReport{ Params :  Returns : void} testFilename{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,AbstractNamingRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,AccessorClassGenerationRuleTest,1,1,0,0,0,false,RuleTst ,0 ,0 ,TEST1: String TEST2: String TEST3: String TEST4: String ,testInnerClassHasPrivateConstructor{ Params :  Returns : void} testInnerClassHasPublicConstructor{ Params :  Returns : void} testOuterClassHasPrivateConstructor{ Params :  Returns : void} testFinalInnerClass{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,AssignmentInOperandRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,AtLeastOneConstructorRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String ,testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,AvoidDeeplyNestedIfStmtsRuleTest,1,1,0,0,0,false,RuleTst ,0 ,0 ,TEST1: String TEST2: String rule: Rule ,setUp{ Params :  Returns : void} test1{ Params :  Returns : void} test2{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,AvoidDollarSignsRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,AvoidDuplicateLiteralsRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: AvoidDuplicateLiteralsRule TEST1: String TEST2: String TEST3: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} testStringParserEmptyString{ Params :  Returns : void} testStringParserSimple{ Params :  Returns : void} testStringParserEscapedChar{ Params :  Returns : void} testStringParserEscapedEscapedChar{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,AvoidReassigningParametersRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: AvoidReassigningParametersRule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String TEST7: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,BadComparisonRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,BeanMembersShouldSerializeRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,BooleanInstantiationRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,ClassNamingConventionsRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String TEST3: String ,testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,CloseConnectionRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String ,testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,ConstructorCallsOverridableMethodRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String TEST7: String ,testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,CouplingBetweenObjectsRuleTest,1,1,0,0,0,false,RuleTst ,0 ,0 ,TEST1: String TEST2: String rule: Rule ,setUp{ Params :  Returns : void} testSimpleBad{ Params :  Returns : void} testSimpleOK{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,CyclomaticComplexityRuleTest,1,1,0,0,0,false,RuleTst ,0 ,0 ,rule: CyclomaticComplexityRule TEST1: String TEST2: String TEST3: String ,setUp{ Params :  Returns : void} testOneMethod{ Params :  Returns : void} testNastyComplicatedMethod{ Params :  Returns : void} testConstructor{ Params :  Returns : void} testLessComplicatedThanReportLevel{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,DefaultLabelNotLastInSwitchStmtRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.design,DesignRulesTests,1,1,0,0,0,false,0 ,0 ,0 ,,suite{ Params :  Returns : Test} ,,suite ,,
PMD,test.net.sourceforge.pmd.rules.design,EmptyStatementNotInLoopRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.design,ExceptionAsFlowControlRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String ,testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.design,LongClassRuleTest,1,1,0,0,0,false,RuleTst ,0 ,0 ,TEST0: String TEST1: String ,getIUT{ Params :  Returns : LongClassRule} testShortClass{ Params :  Returns : void} testLongClass{ Params :  Returns : void} testLongClassWithLongerTest{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.design,LongMethodRuleTest,1,1,0,0,0,false,RuleTst ,0 ,0 ,TEST1: String TEST2: String TEST3: String TEST4: String ,getIUT{ Params :  Returns : LongMethodRule} testShortMethod{ Params :  Returns : void} testReallyLongMethod{ Params :  Returns : void} testReallyLongMethodWithLongerRange{ Params :  Returns : void} testNotQuiteLongMethod{ Params :  Returns : void} testLongMethod{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.design,LongParameterListRuleTest,1,1,0,0,0,false,RuleTst ,0 ,0 ,TEST1: String TEST2: String ,getIUT{ Params :  Returns : LongParameterListRule} testShortMethod{ Params :  Returns : void} testOneLongMethod{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.design,LooseCouplingRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: LooseCouplingRule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String TEST7: String TEST8: String TEST9: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.design,NullAssignmentRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String TEST3: String TEST4: String ,testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.design,OnlyOneReturnRuleTest,1,1,0,0,0,false,RuleTst ,0 ,0 ,TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String ,testTwoReturns{ Params :  Returns : void} testOneReturn{ Params :  Returns : void} testNoReturns{ Params :  Returns : void} testVoidRtn{ Params :  Returns : void} testFinally{ Params :  Returns : void} testReturnInsideAnonymousInnerClass{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.design,PositionalIteratorRuleTest,1,1,0,0,0,false,RuleTst ,0 ,0 ,TEST1: String TEST2: String TEST3: String ,test1{ Params :  Returns : void} test2{ Params :  Returns : void} test3{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.design,SwitchDensityTest,1,1,0,0,0,false,RuleTst ,0 ,0 ,TEST1: String TEST2: String TEST3: String ,getIUT{ Params :  Returns : SwitchDensityRule} testSD1{ Params :  Returns : void} testSD2{ Params :  Returns : void} testSD3{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.design,UseSingletonRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,ReportListener ,0 ,callbacks: int TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String TEST7: String ,testAll{ Params :  Returns : void} testResetState{ Params :  Returns : void} ruleViolationAdded{ Params : RuleViolation Returns : void} metricAdded{ Params : Metric Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,DontImportJavaLangRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,DontImportSunRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,DoubleCheckedLockingRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String TEST3: String ,testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,DuplicateImportsRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: DuplicateImportsRule TEST1: String TEST2: String TEST3: String TEST4: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,EmptyCatchBlockRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String TEST7: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,EmptyFinalizerRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,EmptyFinallyBlockRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,EmptyIfStmtRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,EmptyStaticInitializerRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,EmptySwitchStmtRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,EmptySynchronizedBlockRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,EmptyTryBlockRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,EmptyWhileStmtRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,ExcessiveImportsRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,ExcessivePublicCountRuleTest,1,1,0,0,0,false,RuleTst ,0 ,0 ,rule: ExcessivePublicCountRule TEST1: String TEST2: String ,setUp{ Params :  Returns : void} testSimpleOK{ Params :  Returns : void} testSimpleBad{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,FinalFieldCouldBeStaticRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.finalize,ExplicitCallToFinalizeRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.finalize,FinalizeDoesNotCallSuperFinalizeRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.finalize,FinalizeOnlyCallsSuperFinalizeRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.finalize,FinalizeOverloadedRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,FinalizeShouldBeProtectedRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,ForLoopShouldBeWhileLoopRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,ForLoopsMustUseBracesRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,IdempotentOperationsRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String ,testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,IfElseStmtsMustUseBracesRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,IfStmtsMustUseBracesRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,ImportFromSamePackageRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String ,testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,JumbledIncrementerRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.junit,JUnitAssertionsShouldIncludeMessageRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String TEST7: String TEST8: String TEST9: String TEST10: String TEST11: String ,testAll{ Params :  Returns : void} testAssertEqualsOK{ Params :  Returns : void} testAssertEqualsBad{ Params :  Returns : void} testAssertTrueOK{ Params :  Returns : void} testAssertTrueBad{ Params :  Returns : void} testAssertNullOK{ Params :  Returns : void} testAssertNullBad{ Params :  Returns : void} testAssertSameOK{ Params :  Returns : void} testAssertSameBad{ Params :  Returns : void} testAssertNotNullOK{ Params :  Returns : void} testAssertNotNullBad{ Params :  Returns : void} testFindBug{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.junit,JUnitRulesTests,1,1,0,0,0,false,0 ,0 ,0 ,,suite{ Params :  Returns : Test} ,,suite ,,
PMD,test.net.sourceforge.pmd.rules.junit,JUnitSpellingRuleTest,1,1,0,0,0,false,RuleTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String ,setUp{ Params :  Returns : void} testSetupMisspellings1{ Params :  Returns : void} testTeardownMisspellings{ Params :  Returns : void} testMethodsSpelledOK{ Params :  Returns : void} testUnrelatedMethods{ Params :  Returns : void} testMethodWithParams{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.junit,JUnitStaticSuiteRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,LongVariableRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,MethodNamingConventionsRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String TEST3: String ,testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,MethodWithSameNameAsEnclosingClassRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,NonCaseLabelInSwitchStatementRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,NonStaticInitializerRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,OptimizableToArrayCallRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,OverrideBothEqualsAndHashcodeRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String TEST7: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,ProperCloneImplementationRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,ReturnFromFinallyBlockTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,RulesTests,1,1,0,0,0,false,0 ,0 ,0 ,,suite{ Params :  Returns : Test} ,,suite ,,
PMD,test.net.sourceforge.pmd.rules,ShortMethodNameRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,ShortVariableRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,SimplifyBooleanExpressionsRuleTest,1,1,0,0,0,false,RuleTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String ,setUp{ Params :  Returns : void} testInFieldAssignment{ Params :  Returns : void} testInMethodBody{ Params :  Returns : void} testOK{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,SimplifyBooleanReturnsRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String TEST3: String ,testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.strictexception,AvoidCatchingNPERuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.strictexception,AvoidCatchingThrowableRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String ,testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.strictexception,AvoidThrowingCertainExceptionTypesRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.strictexception,ExceptionSignatureDeclarationRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String TEST3: String ,testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules.strictexception,ExceptionTypeCheckingRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String ,testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,StringInstantiationRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,StringToStringRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String ,testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,SuspiciousHashcodeMethodNameRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,SuspiciousOctalEscapeRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String ,testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,SwitchStmtsShouldHaveDefaultRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,UnconditionalIfStatementRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,UnnecessaryConstructorRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String TEST7: String TEST8: String TEST9: String TEST10: String TEST11: String TEST12: String TEST13: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,UnnecessaryReturnTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,UnnecessaryTemporariesRuleTest,1,1,0,0,0,false,RuleTst ,0 ,0 ,TEST1: String ,testSimple{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,UnusedFormalParameterRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: UnusedFormalParameterRule TEST1: String TEST2: String TEST3: String TEST4: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,UnusedImportsRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: UnusedImportsRule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,UnusedLocalVariableTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: UnusedLocalVariableRule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String TEST7: String TEST8: String TEST9: String TEST10: String TEST11: String TEST12: String TEST13: String TEST14: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,UnusedModifierRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String TEST7: String TEST8: String TEST9: String TEST10: String TEST11: String TEST12: String TEST13: String TEST14: String TEST15: String TEST16: String TEST17: String TEST18: String TEST19: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,UnusedPrivateFieldRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: UnusedPrivateFieldRule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String TEST7: String TEST8: String TEST9: String TEST10: String TEST11: String TEST12: String TEST13: String TEST14: String TEST15: String TEST16: String TEST17: String TEST18: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,UnusedPrivateMethodRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: UnusedPrivateMethodRule TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String TEST7: String TEST8: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,VariableNamingConventionsRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,TEST1: String TEST2: String TEST3: String TEST4: String TEST5: String TEST6: String TEST7: String TEST8: String ,testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,WhileLoopsMustUseBracesRuleTest,1,1,0,0,0,false,SimpleAggregatorTst ,0 ,0 ,rule: Rule TEST1: String TEST2: String ,setUp{ Params :  Returns : void} testAll{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.rules,XPathRuleTest,1,1,0,0,0,false,RuleTst ,0 ,0 ,rule: XPathRule TEST1: String ,setUp{ Params :  Returns : void} testPluginname{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd,RuleSetFactoryTest,1,1,0,0,0,false,TestCase ,0 ,0 ,EMPTY_RULE_SET: String SINGLE_RULE_SET: String MULTIPLE_RULE_SET: String RULE_WITH_PROPERTIES: String RULE_WITH_XPATH: String RULE_WITH_XPATH_AND_PLUGINNAME: String SINGLE_RULE_SET_WITH_PRIORITY: String ,testSingleRuleWithPriority{ Params :  Returns : void} testRuleSetNotFound{ Params :  Returns : void} testCreateEmptyRuleSet{ Params :  Returns : void} testSingleRule{ Params :  Returns : void} testMultipleRules{ Params :  Returns : void} testProps{ Params :  Returns : void} testXPathPluginnameProperty{ Params :  Returns : void} testXPath{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd,RuleSetTest,1,1,0,0,0,false,TestCase ,0 ,0 ,javaCode: String ,testConstructor{ Params :  Returns : void} testAccessors{ Params :  Returns : void} testGetRuleByName{ Params :  Returns : void} testRuleList{ Params :  Returns : void} testAddRuleSet{ Params :  Returns : void} testApply0Rules{ Params :  Returns : void} testApply1Rule{ Params :  Returns : void} testApplyNRule{ Params :  Returns : void} verifyRuleSet{ Params : RuleSet,int,Set Returns : void} makeCompilationUnits{ Params :  Returns : List} ,,,,
PMD,test.net.sourceforge.pmd,RuleViolationTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testConstructor1{ Params :  Returns : void} testConstructor2{ Params :  Returns : void} testComparatorWithDifferentFilenames{ Params :  Returns : void} testComparatorWithSameFileDifferentLines{ Params :  Returns : void} testComparatorWithSameFileSameLines{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.stat,MetricTest,1,1,0,0,0,false,TestCase ,0 ,0 ,testName: String random: Random ,testGetMetricName{ Params :  Returns : void} testGetCount{ Params :  Returns : void} testGetTotal{ Params :  Returns : void} testGetLowValue{ Params :  Returns : void} testGetHighValue{ Params :  Returns : void} testGetAverage{ Params :  Returns : void} testGetStandardDeviation{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.stat,MockStatisticalRule,1,1,0,0,0,false,StatisticalRule ,0 ,0 ,,,,,,
PMD,test.net.sourceforge.pmd.stat,StatisticalRuleTest,1,1,0,0,0,false,TestCase ,0 ,0 ,POINTS: int points: DataPoint IUT: MockStatisticalRule testName: String random: Random MAX_MINIMUM: double NO_MINIMUM: double MAX_SIGMA: double NO_SIGMA: double MIN_TOPSCORE: int NO_TOPSCORE: int MEAN: double SIGMA: double NUM_TESTS: int DELTA: double ,setUp{ Params :  Returns : void} testMetrics{ Params :  Returns : void} randomSigma{ Params :  Returns : double} randomSigma{ Params : int Returns : double} expectedSigma{ Params : double Returns : int} randomMinimum{ Params :  Returns : double} randomMinimum{ Params : int Returns : double} expectedMinimum{ Params : double Returns : int} testExpectedMinimum{ Params :  Returns : void} randomTopScore{ Params :  Returns : int} randomTopScore{ Params : double Returns : int} expectedTopScore{ Params : int Returns : int} testSingleDatapoint{ Params :  Returns : void} testS{ Params :  Returns : void} testS1{ Params :  Returns : void} testS2{ Params :  Returns : void} testS3{ Params :  Returns : void} testS4{ Params :  Returns : void} testS5{ Params :  Returns : void} testT{ Params :  Returns : void} testT1{ Params :  Returns : void} testT2{ Params :  Returns : void} testT3{ Params :  Returns : void} testT4{ Params :  Returns : void} testT5{ Params :  Returns : void} testM{ Params :  Returns : void} testM1{ Params :  Returns : void} testM2{ Params :  Returns : void} testM3{ Params :  Returns : void} testM4{ Params :  Returns : void} testM5{ Params :  Returns : void} testST{ Params :  Returns : void} testST1{ Params :  Returns : void} testST2{ Params :  Returns : void} testST3{ Params :  Returns : void} testST4{ Params :  Returns : void} testST5{ Params :  Returns : void} testTS{ Params :  Returns : void} testTS1{ Params :  Returns : void} testTS2{ Params :  Returns : void} testTS3{ Params :  Returns : void} testTS4{ Params :  Returns : void} testTS5{ Params :  Returns : void} testSM{ Params :  Returns : void} testSM1{ Params :  Returns : void} testSM2{ Params :  Returns : void} testSM3{ Params :  Returns : void} testSM4{ Params :  Returns : void} testSM5{ Params :  Returns : void} testMS{ Params :  Returns : void} testMS1{ Params :  Returns : void} testMS2{ Params :  Returns : void} testMS3{ Params :  Returns : void} testMS4{ Params :  Returns : void} testMS5{ Params :  Returns : void} testTM{ Params :  Returns : void} testTM1{ Params :  Returns : void} testTM2{ Params :  Returns : void} testTM3{ Params :  Returns : void} testTM4{ Params :  Returns : void} testTM5{ Params :  Returns : void} testMT{ Params :  Returns : void} testMT1{ Params :  Returns : void} testMT2{ Params :  Returns : void} testMT3{ Params :  Returns : void} testMT4{ Params :  Returns : void} testMT5{ Params :  Returns : void} testSTM{ Params :  Returns : void} testSTM1{ Params :  Returns : void} testSTM2{ Params :  Returns : void} testSTM3{ Params :  Returns : void} testSTM4{ Params :  Returns : void} testSTM5{ Params :  Returns : void} testSMT{ Params :  Returns : void} testSMT1{ Params :  Returns : void} testSMT2{ Params :  Returns : void} testSMT3{ Params :  Returns : void} testSMT4{ Params :  Returns : void} testSMT5{ Params :  Returns : void} testTSM{ Params :  Returns : void} testTSM1{ Params :  Returns : void} testTSM2{ Params :  Returns : void} testTSM3{ Params :  Returns : void} testTSM4{ Params :  Returns : void} testTSM5{ Params :  Returns : void} testTMS{ Params :  Returns : void} testTMS1{ Params :  Returns : void} testTMS2{ Params :  Returns : void} testTMS3{ Params :  Returns : void} testTMS4{ Params :  Returns : void} testTMS5{ Params :  Returns : void} verifyResults{ Params : double,double,int,int,int Returns : void} makeReport{ Params : Rule Returns : Report} ,,,,
PMD,test.net.sourceforge.pmd.stat,StatTests,1,1,0,0,0,false,0 ,0 ,0 ,,suite{ Params :  Returns : Test} ,,suite ,,
PMD,test.net.sourceforge.pmd.symboltable,AbstractScopeTest,1,1,0,0,0,false,TestCase ,0 ,MyScope IsEnclosingClassScope ,,findVariableHere{ Params : NameOccurrence Returns : NameDeclaration} findVariableHere{ Params : NameOccurrence Returns : NameDeclaration} getEnclosingClassScope{ Params :  Returns : ClassScope} testAccessors{ Params :  Returns : void} testEnclClassScopeGetsDelegatedRight{ Params :  Returns : void} testAdd{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.symboltable,MyScope,3,2,0,0,0,false,TestCase ,0 ,MyScope IsEnclosingClassScope ,,findVariableHere{ Params : NameOccurrence Returns : NameDeclaration} findVariableHere{ Params : NameOccurrence Returns : NameDeclaration} getEnclosingClassScope{ Params :  Returns : ClassScope} testAccessors{ Params :  Returns : void} testEnclClassScopeGetsDelegatedRight{ Params :  Returns : void} testAdd{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.symboltable,IsEnclosingClassScope,3,2,0,0,0,false,TestCase ,0 ,MyScope IsEnclosingClassScope ,,findVariableHere{ Params : NameOccurrence Returns : NameDeclaration} findVariableHere{ Params : NameOccurrence Returns : NameDeclaration} getEnclosingClassScope{ Params :  Returns : ClassScope} testAccessors{ Params :  Returns : void} testEnclClassScopeGetsDelegatedRight{ Params :  Returns : void} testAdd{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.symboltable,AcceptanceTest,1,1,0,0,0,false,TestCase ,0 ,0 ,TEST1: String TEST_NON_STATIC_INITIALIZER: String TEST_STATIC_INITIALIZER: String TEST4: String ,testClashingSymbols{ Params :  Returns : void} testInitializer{ Params :  Returns : void} testStaticInitializer{ Params :  Returns : void} testFindFieldDecl{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.symboltable,BasicScopeFactoryTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testGlobalScope{ Params :  Returns : void} testClassScope{ Params :  Returns : void} testMethodScope{ Params :  Returns : void} testLocalScope{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.symboltable,ClassScopeTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testContains{ Params :  Returns : void} testCantContainsSuperToString{ Params :  Returns : void} testContainsStaticVariablePrefixedWithClassName{ Params :  Returns : void} testClassName{ Params :  Returns : void} testAnonymousInnerClassName{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.symboltable,DeclarationFinderTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testDeclarationsAreFound{ Params :  Returns : void} test1{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.symboltable,ImageFinderFunctionTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testSingleImage{ Params :  Returns : void} testSeveralImages{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.symboltable,LocalScopeTest,1,1,0,0,0,false,TestCase ,0 ,MyASTVariableDeclaratorId ,,isExceptionBlockParameter{ Params :  Returns : boolean} testNameWithThisOrSuperIsNotFlaggedAsUnused{ Params :  Returns : void} testNameWithSuperIsNotFlaggedAsUnused{ Params :  Returns : void} testExceptionParamNameIsDiscarded{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.symboltable,MyASTVariableDeclaratorId,3,2,0,0,0,false,TestCase ,0 ,MyASTVariableDeclaratorId ,,isExceptionBlockParameter{ Params :  Returns : boolean} testNameWithThisOrSuperIsNotFlaggedAsUnused{ Params :  Returns : void} testNameWithSuperIsNotFlaggedAsUnused{ Params :  Returns : void} testExceptionParamNameIsDiscarded{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.symboltable,NameOccurrencesTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testNameLinkage{ Params :  Returns : void} testSuper{ Params :  Returns : void} testThis{ Params :  Returns : void} testFieldWithThis{ Params :  Returns : void} testField{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.symboltable,NameOccurrenceTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testConstructor{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.symboltable,ScopeCreationVisitorTest,1,1,0,0,0,false,TestCase ,0 ,MyCB MySF ,,isAnonymousInnerClass{ Params :  Returns : boolean} openScope{ Params : Stack,SimpleNode Returns : void} testScopesAreCreated{ Params :  Returns : void} testAnonymousInnerClassIsCreated{ Params :  Returns : void} testAnonymousInnerClassIsNotCreated{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.symboltable,MyCB,3,2,0,0,0,false,TestCase ,0 ,MyCB MySF ,,isAnonymousInnerClass{ Params :  Returns : boolean} openScope{ Params : Stack,SimpleNode Returns : void} testScopesAreCreated{ Params :  Returns : void} testAnonymousInnerClassIsCreated{ Params :  Returns : void} testAnonymousInnerClassIsNotCreated{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.symboltable,MySF,3,2,0,0,0,false,TestCase ,0 ,MyCB MySF ,gotCalled: boolean ,isAnonymousInnerClass{ Params :  Returns : boolean} openScope{ Params : Stack,SimpleNode Returns : void} testScopesAreCreated{ Params :  Returns : void} testAnonymousInnerClassIsCreated{ Params :  Returns : void} testAnonymousInnerClassIsNotCreated{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.symboltable,SymbolTableTests,1,1,0,0,0,false,0 ,0 ,0 ,,suite{ Params :  Returns : Test} ,,suite ,,
PMD,test.net.sourceforge.pmd.symboltable,TypeSetTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testASTCompilationUnitPackage{ Params :  Returns : void} testAddImport{ Params :  Returns : void} testFindClassImplicitImport{ Params :  Returns : void} testFindClassSamePackage{ Params :  Returns : void} testFindClassExplicitImport{ Params :  Returns : void} testFindClassImportOnDemand{ Params :  Returns : void} testFindClassPrimitive{ Params :  Returns : void} testFindClassVoid{ Params :  Returns : void} testFindFullyQualified{ Params :  Returns : void} testPrimitiveTypeResolver{ Params :  Returns : void} testVoidTypeResolver{ Params :  Returns : void} testExplicitImportResolver{ Params :  Returns : void} testImplicitImportResolverPass{ Params :  Returns : void} testImplicitImportResolverPassFail{ Params :  Returns : void} testCurrentPackageResolverPass{ Params :  Returns : void} testImportOnDemandResolverPass{ Params :  Returns : void} testImportOnDemandResolverFail{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.symboltable,VariableNameDeclarationTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testConstructor{ Params :  Returns : void} testExceptionBlkParam{ Params :  Returns : void} testMethodParam{ Params :  Returns : void} createNode{ Params : String,int Returns : ASTVariableDeclaratorId} ,,createNode ,,
PMD,test.net.sourceforge.pmd.testframework,MockRule,1,1,0,0,0,false,0 ,Rule ,0 ,name: String description: String message: String violations: Set properties: Properties example: String priority: int ,getExample{ Params :  Returns : String} setExample{ Params : String Returns : void} getPriority{ Params :  Returns : int} getPriorityName{ Params :  Returns : String} setPriority{ Params : int Returns : void} getDescription{ Params :  Returns : String} setDescription{ Params : String Returns : void} getName{ Params :  Returns : String} setName{ Params : String Returns : void} getMessage{ Params :  Returns : String} setMessage{ Params : String Returns : void} hasProperty{ Params : String Returns : boolean} addProperty{ Params : String,String Returns : void} getIntProperty{ Params : String Returns : int} getDoubleProperty{ Params : String Returns : double} getBooleanProperty{ Params : String Returns : boolean} getStringProperty{ Params : String Returns : String} getProperties{ Params :  Returns : Properties} include{ Params :  Returns : boolean} setInclude{ Params : boolean Returns : void} addViolation{ Params : RuleViolation Returns : void} apply{ Params : List,RuleContext Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.testframework,RuleTst,1,1,0,0,0,false,TestCase ,0 ,0 ,rulesets: Map rsf: RuleSetFactory ,runTestFromString{ Params : String,int,Rule Returns : void} findRule{ Params : String,String Returns : Rule} runTestFromString{ Params : String,Rule,Report Returns : void} processUsingStringReader{ Params : String,Rule Returns : Report} ,,,,
PMD,test.net.sourceforge.pmd.testframework,SimpleAggregatorTst,1,1,0,0,0,false,RuleTst ,0 ,0 ,,runTests{ Params : TestDescriptor[] Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.testframework,TestDescriptor,1,1,0,0,0,false,0 ,0 ,0 ,code: String description: String numberOfProblemsExpected: int rule: Rule ,,,,,
PMD,test.net.sourceforge.pmd.util,ApplierTest,1,1,0,0,0,false,TestCase ,0 ,MyFunction ,,applyTo{ Params : Object Returns : void} gotCallback{ Params :  Returns : boolean} testSimple{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.util,MyFunction,3,2,0,1,0,false,TestCase ,0 ,MyFunction ,gotCallback: boolean ,applyTo{ Params : Object Returns : void} gotCallback{ Params :  Returns : boolean} testSimple{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.util,StringUtilTest,1,1,0,0,0,false,TestCase ,0 ,0 ,,testReplaceWithOneChar{ Params :  Returns : void} testReplaceWithMultipleChars{ Params :  Returns : void} testReplaceStringWithString{ Params :  Returns : void} testReplaceStringWithString2{ Params :  Returns : void} ,,,,
PMD,test.net.sourceforge.pmd.util,UtilTests,1,1,0,0,0,false,0 ,0 ,0 ,,suite{ Params :  Returns : Test} ,,suite ,,
